:ADC A16, #n16 is dd=1 & op=0xBC; op=0xF3; n16 & A16  {  op_adc(A16, n16:2); }
:ADC A16, reg16 is regop0=0xc & reg16; op=0xF5 & A16  {  op_adc(A16, reg16); }
:ADC A16, X1indw is op=0xA0 & X1indw; op=0xF5 & A16  {  op_adc(A16, X1indw); }
:ADC A16, DPinddecw is op=0xA1 & DPinddecw; op=0xF5 & A16  {  op_adc(A16, DPinddecw); }
:ADC A16, DPindw is op=0xA2 & DPindw; op=0xF5 & A16  {  op_adc(A16, DPindw); }
:ADC A16, DPindincw is op=0xA3 & DPindincw; op=0xF5 & A16  {  op_adc(A16, DPindincw); }
:ADC A16, op1fix16 is op=0xA4; op1fix16; op=0xF5 & A16  {  op_adc(A16, op1fix16); }
:ADC A16, op1off16 is op=0xA5; op1off16; op=0xF5 & A16  {  op_adc(A16, op1off16); }
:ADC A16, op1sfr16 is op=0xA6; op1sfr16; op=0xF5 & A16  {  op_adc(A16, op1sfr16); }
:ADC A16, op1n16w is op=0xA7; op1n16w; op=0xF5 & A16  {  op_adc(A16, op1n16w); }
:ADC A16, X1immw is op=0xA8; X1immw; op=0xF5 & A16  {  op_adc(A16, X1immw); }
:ADC A16, X2immw is op=0xA9; X2immw; op=0xF5 & A16  {  op_adc(A16, X2immw); }
:ADC A16, X1plusAw is op=0xAA & X1plusAw; op=0xF5 & A16  {  op_adc(A16, X1plusAw); }
:ADC A16, X1plusR0w is op=0xAB & X1plusR0w; op=0xF5 & A16  {  op_adc(A16, X1plusR0w); }
:ADC A16, n7w is op=0x8B; n7w; op=0xF5 & A16  {  op_adc(A16, n7w); }
:ADC reg16, fix16 is regop0=0xc & reg16; op=0xF0; fix16  {  op_adc(reg16, fix16); }
:ADC X1indw, fix16 is op=0xA0 & X1indw; op=0xF0; fix16  {  op_adc(X1indw, fix16); }
:ADC DPinddecw, fix16 is op=0xA1 & DPinddecw; op=0xF0; fix16  {  op_adc(DPinddecw, fix16); }
:ADC DPindw, fix16 is op=0xA2 & DPindw; op=0xF0; fix16  {  op_adc(DPindw, fix16); }
:ADC DPindincw, fix16 is op=0xA3 & DPindincw; op=0xF0; fix16  {  op_adc(DPindincw, fix16); }
:ADC op1fix16, fix16 is op=0xA4; op1fix16; op=0xF0; fix16  {  op_adc(op1fix16, fix16); }
:ADC op1off16, fix16 is op=0xA5; op1off16; op=0xF0; fix16  {  op_adc(op1off16, fix16); }
:ADC op1sfr16, fix16 is op=0xA6; op1sfr16; op=0xF0; fix16  {  op_adc(op1sfr16, fix16); }
:ADC op1n16w, fix16 is op=0xA7; op1n16w; op=0xF0; fix16  {  op_adc(op1n16w, fix16); }
:ADC X1immw, fix16 is op=0xA8; X1immw; op=0xF0; fix16  {  op_adc(X1immw, fix16); }
:ADC X2immw, fix16 is op=0xA9; X2immw; op=0xF0; fix16  {  op_adc(X2immw, fix16); }
:ADC X1plusAw, fix16 is op=0xAA & X1plusAw; op=0xF0; fix16  {  op_adc(X1plusAw, fix16); }
:ADC X1plusR0w, fix16 is op=0xAB & X1plusR0w; op=0xF0; fix16  {  op_adc(X1plusR0w, fix16); }
:ADC n7w, fix16 is op=0x8B; n7w; op=0xF0; fix16  {  op_adc(n7w, fix16); }
:ADC reg16, off16 is regop0=0xc & reg16; op=0xF1; off16  {  op_adc(reg16, off16); }
:ADC X1indw, off16 is op=0xA0 & X1indw; op=0xF1; off16  {  op_adc(X1indw, off16); }
:ADC DPinddecw, off16 is op=0xA1 & DPinddecw; op=0xF1; off16  {  op_adc(DPinddecw, off16); }
:ADC DPindw, off16 is op=0xA2 & DPindw; op=0xF1; off16  {  op_adc(DPindw, off16); }
:ADC DPindincw, off16 is op=0xA3 & DPindincw; op=0xF1; off16  {  op_adc(DPindincw, off16); }
:ADC op1fix16, off16 is op=0xA4; op1fix16; op=0xF1; off16  {  op_adc(op1fix16, off16); }
:ADC op1off16, off16 is op=0xA5; op1off16; op=0xF1; off16  {  op_adc(op1off16, off16); }
:ADC op1sfr16, off16 is op=0xA6; op1sfr16; op=0xF1; off16  {  op_adc(op1sfr16, off16); }
:ADC op1n16w, off16 is op=0xA7; op1n16w; op=0xF1; off16  {  op_adc(op1n16w, off16); }
:ADC X1immw, off16 is op=0xA8; X1immw; op=0xF1; off16  {  op_adc(X1immw, off16); }
:ADC X2immw, off16 is op=0xA9; X2immw; op=0xF1; off16  {  op_adc(X2immw, off16); }
:ADC X1plusAw, off16 is op=0xAA & X1plusAw; op=0xF1; off16  {  op_adc(X1plusAw, off16); }
:ADC X1plusR0w, off16 is op=0xAB & X1plusR0w; op=0xF1; off16  {  op_adc(X1plusR0w, off16); }
:ADC n7w, off16 is op=0x8B; n7w; op=0xF1; off16  {  op_adc(n7w, off16); }
:ADC reg16, sfr16 is regop0=0xc & reg16; op=0xF2; sfr16  {  op_adc(reg16, sfr16); }
:ADC X1indw, sfr16 is op=0xA0 & X1indw; op=0xF2; sfr16  {  op_adc(X1indw, sfr16); }
:ADC DPinddecw, sfr16 is op=0xA1 & DPinddecw; op=0xF2; sfr16  {  op_adc(DPinddecw, sfr16); }
:ADC DPindw, sfr16 is op=0xA2 & DPindw; op=0xF2; sfr16  {  op_adc(DPindw, sfr16); }
:ADC DPindincw, sfr16 is op=0xA3 & DPindincw; op=0xF2; sfr16  {  op_adc(DPindincw, sfr16); }
:ADC op1fix16, sfr16 is op=0xA4; op1fix16; op=0xF2; sfr16  {  op_adc(op1fix16, sfr16); }
:ADC op1off16, sfr16 is op=0xA5; op1off16; op=0xF2; sfr16  {  op_adc(op1off16, sfr16); }
:ADC op1sfr16, sfr16 is op=0xA6; op1sfr16; op=0xF2; sfr16  {  op_adc(op1sfr16, sfr16); }
:ADC op1n16w, sfr16 is op=0xA7; op1n16w; op=0xF2; sfr16  {  op_adc(op1n16w, sfr16); }
:ADC X1immw, sfr16 is op=0xA8; X1immw; op=0xF2; sfr16  {  op_adc(X1immw, sfr16); }
:ADC X2immw, sfr16 is op=0xA9; X2immw; op=0xF2; sfr16  {  op_adc(X2immw, sfr16); }
:ADC X1plusAw, sfr16 is op=0xAA & X1plusAw; op=0xF2; sfr16  {  op_adc(X1plusAw, sfr16); }
:ADC X1plusR0w, sfr16 is op=0xAB & X1plusR0w; op=0xF2; sfr16  {  op_adc(X1plusR0w, sfr16); }
:ADC n7w, sfr16 is op=0x8B; n7w; op=0xF2; sfr16  {  op_adc(n7w, sfr16); }
:ADC reg16, #n16 is regop0=0xc & reg16; op=0xF3; n16  {  op_adc(reg16, n16:2); }
:ADC X1indw, #n16 is op=0xA0 & X1indw; op=0xF3; n16  {  op_adc(X1indw, n16:2); }
:ADC DPinddecw, #n16 is op=0xA1 & DPinddecw; op=0xF3; n16  {  op_adc(DPinddecw, n16:2); }
:ADC DPindw, #n16 is op=0xA2 & DPindw; op=0xF3; n16  {  op_adc(DPindw, n16:2); }
:ADC DPindincw, #n16 is op=0xA3 & DPindincw; op=0xF3; n16  {  op_adc(DPindincw, n16:2); }
:ADC op1fix16, #n16 is op=0xA4; op1fix16; op=0xF3; n16  {  op_adc(op1fix16, n16:2); }
:ADC op1off16, #n16 is op=0xA5; op1off16; op=0xF3; n16  {  op_adc(op1off16, n16:2); }
:ADC op1sfr16, #n16 is op=0xA6; op1sfr16; op=0xF3; n16  {  op_adc(op1sfr16, n16:2); }
:ADC op1n16w, #n16 is op=0xA7; op1n16w; op=0xF3; n16  {  op_adc(op1n16w, n16:2); }
:ADC X1immw, #n16 is op=0xA8; X1immw; op=0xF3; n16  {  op_adc(X1immw, n16:2); }
:ADC X2immw, #n16 is op=0xA9; X2immw; op=0xF3; n16  {  op_adc(X2immw, n16:2); }
:ADC X1plusAw, #n16 is op=0xAA & X1plusAw; op=0xF3; n16  {  op_adc(X1plusAw, n16:2); }
:ADC X1plusR0w, #n16 is op=0xAB & X1plusR0w; op=0xF3; n16  {  op_adc(X1plusR0w, n16:2); }
:ADC n7w, #n16 is op=0x8B; n7w; op=0xF3; n16  {  op_adc(n7w, n16:2); }
:ADC reg16, A16 is regop0=0xc & reg16; op=0xF4 & A16  {  op_adc(reg16, A16); }
:ADC X1indw, A16 is op=0xA0 & X1indw; op=0xF4 & A16  {  op_adc(X1indw, A16); }
:ADC DPinddecw, A16 is op=0xA1 & DPinddecw; op=0xF4 & A16  {  op_adc(DPinddecw, A16); }
:ADC DPindw, A16 is op=0xA2 & DPindw; op=0xF4 & A16  {  op_adc(DPindw, A16); }
:ADC DPindincw, A16 is op=0xA3 & DPindincw; op=0xF4 & A16  {  op_adc(DPindincw, A16); }
:ADC op1fix16, A16 is op=0xA4; op1fix16; op=0xF4 & A16  {  op_adc(op1fix16, A16); }
:ADC op1off16, A16 is op=0xA5; op1off16; op=0xF4 & A16  {  op_adc(op1off16, A16); }
:ADC op1sfr16, A16 is op=0xA6; op1sfr16; op=0xF4 & A16  {  op_adc(op1sfr16, A16); }
:ADC op1n16w, A16 is op=0xA7; op1n16w; op=0xF4 & A16  {  op_adc(op1n16w, A16); }
:ADC X1immw, A16 is op=0xA8; X1immw; op=0xF4 & A16  {  op_adc(X1immw, A16); }
:ADC X2immw, A16 is op=0xA9; X2immw; op=0xF4 & A16  {  op_adc(X2immw, A16); }
:ADC X1plusAw, A16 is op=0xAA & X1plusAw; op=0xF4 & A16  {  op_adc(X1plusAw, A16); }
:ADC X1plusR0w, A16 is op=0xAB & X1plusR0w; op=0xF4 & A16  {  op_adc(X1plusR0w, A16); }
:ADC n7w, A16 is op=0x8B; n7w; op=0xF4 & A16  {  op_adc(n7w, A16); }
:ADCB A8, #n8 is dd=0 & op=0xBC; op=0xF3; n8 & A8  {  op_adcb(A8, n8:1); }
:ADCB A8, reg8 is regop0=0xd & reg8; op=0xF5 & A8  {  op_adcb(A8, reg8); }
:ADCB A8, X1indb is op=0xB0 & X1indb; op=0xF5 & A8  {  op_adcb(A8, X1indb); }
:ADCB A8, DPinddecb is op=0xB1 & DPinddecb; op=0xF5 & A8  {  op_adcb(A8, DPinddecb); }
:ADCB A8, DPindb is op=0xB2 & DPindb; op=0xF5 & A8  {  op_adcb(A8, DPindb); }
:ADCB A8, DPindincb is op=0xB3 & DPindincb; op=0xF5 & A8  {  op_adcb(A8, DPindincb); }
:ADCB A8, op1fix8 is op=0xB4; op1fix8; op=0xF5 & A8  {  op_adcb(A8, op1fix8); }
:ADCB A8, op1off8 is op=0xB5; op1off8; op=0xF5 & A8  {  op_adcb(A8, op1off8); }
:ADCB A8, op1sfr8 is op=0xB6; op1sfr8; op=0xF5 & A8  {  op_adcb(A8, op1sfr8); }
:ADCB A8, op1n16b is op=0xB7; op1n16b; op=0xF5 & A8  {  op_adcb(A8, op1n16b); }
:ADCB A8, X1immb is op=0xB8; X1immb; op=0xF5 & A8  {  op_adcb(A8, X1immb); }
:ADCB A8, X2immb is op=0xB9; X2immb; op=0xF5 & A8  {  op_adcb(A8, X2immb); }
:ADCB A8, X1plusAb is op=0xBA & X1plusAb; op=0xF5 & A8  {  op_adcb(A8, X1plusAb); }
:ADCB A8, X1plusR0b is op=0xBB & X1plusR0b; op=0xF5 & A8  {  op_adcb(A8, X1plusR0b); }
:ADCB A8, PSWL is op=0x8A & PSWL; op=0xF5 & A8  {  op_adcb(A8, PSWL); }
:ADCB A8, PSWH is op=0x9A & PSWH; op=0xF5 & A8  {  op_adcb(A8, PSWH); }
:ADCB A8, n7b is op=0x9B; n7b; op=0xF5 & A8  {  op_adcb(A8, n7b); }
:ADCB reg8, fix8 is regop0=0xd & reg8; op=0xF0; fix8  {  op_adcb(reg8, fix8); }
:ADCB X1indb, fix8 is op=0xB0 & X1indb; op=0xF0; fix8  {  op_adcb(X1indb, fix8); }
:ADCB DPinddecb, fix8 is op=0xB1 & DPinddecb; op=0xF0; fix8  {  op_adcb(DPinddecb, fix8); }
:ADCB DPindb, fix8 is op=0xB2 & DPindb; op=0xF0; fix8  {  op_adcb(DPindb, fix8); }
:ADCB DPindincb, fix8 is op=0xB3 & DPindincb; op=0xF0; fix8  {  op_adcb(DPindincb, fix8); }
:ADCB op1fix8, fix8 is op=0xB4; op1fix8; op=0xF0; fix8  {  op_adcb(op1fix8, fix8); }
:ADCB op1off8, fix8 is op=0xB5; op1off8; op=0xF0; fix8  {  op_adcb(op1off8, fix8); }
:ADCB op1sfr8, fix8 is op=0xB6; op1sfr8; op=0xF0; fix8  {  op_adcb(op1sfr8, fix8); }
:ADCB op1n16b, fix8 is op=0xB7; op1n16b; op=0xF0; fix8  {  op_adcb(op1n16b, fix8); }
:ADCB X1immb, fix8 is op=0xB8; X1immb; op=0xF0; fix8  {  op_adcb(X1immb, fix8); }
:ADCB X2immb, fix8 is op=0xB9; X2immb; op=0xF0; fix8  {  op_adcb(X2immb, fix8); }
:ADCB X1plusAb, fix8 is op=0xBA & X1plusAb; op=0xF0; fix8  {  op_adcb(X1plusAb, fix8); }
:ADCB X1plusR0b, fix8 is op=0xBB & X1plusR0b; op=0xF0; fix8  {  op_adcb(X1plusR0b, fix8); }
:ADCB PSWL, fix8 is op=0x8A & PSWL; op=0xF0; fix8  {  op_adcb(PSWL, fix8); }
:ADCB PSWH, fix8 is op=0x9A & PSWH; op=0xF0; fix8  {  op_adcb(PSWH, fix8); }
:ADCB n7b, fix8 is op=0x9B; n7b; op=0xF0; fix8  {  op_adcb(n7b, fix8); }
:ADCB reg8, off8 is regop0=0xd & reg8; op=0xF1; off8  {  op_adcb(reg8, off8); }
:ADCB X1indb, off8 is op=0xB0 & X1indb; op=0xF1; off8  {  op_adcb(X1indb, off8); }
:ADCB DPinddecb, off8 is op=0xB1 & DPinddecb; op=0xF1; off8  {  op_adcb(DPinddecb, off8); }
:ADCB DPindb, off8 is op=0xB2 & DPindb; op=0xF1; off8  {  op_adcb(DPindb, off8); }
:ADCB DPindincb, off8 is op=0xB3 & DPindincb; op=0xF1; off8  {  op_adcb(DPindincb, off8); }
:ADCB op1fix8, off8 is op=0xB4; op1fix8; op=0xF1; off8  {  op_adcb(op1fix8, off8); }
:ADCB op1off8, off8 is op=0xB5; op1off8; op=0xF1; off8  {  op_adcb(op1off8, off8); }
:ADCB op1sfr8, off8 is op=0xB6; op1sfr8; op=0xF1; off8  {  op_adcb(op1sfr8, off8); }
:ADCB op1n16b, off8 is op=0xB7; op1n16b; op=0xF1; off8  {  op_adcb(op1n16b, off8); }
:ADCB X1immb, off8 is op=0xB8; X1immb; op=0xF1; off8  {  op_adcb(X1immb, off8); }
:ADCB X2immb, off8 is op=0xB9; X2immb; op=0xF1; off8  {  op_adcb(X2immb, off8); }
:ADCB X1plusAb, off8 is op=0xBA & X1plusAb; op=0xF1; off8  {  op_adcb(X1plusAb, off8); }
:ADCB X1plusR0b, off8 is op=0xBB & X1plusR0b; op=0xF1; off8  {  op_adcb(X1plusR0b, off8); }
:ADCB PSWL, off8 is op=0x8A & PSWL; op=0xF1; off8  {  op_adcb(PSWL, off8); }
:ADCB PSWH, off8 is op=0x9A & PSWH; op=0xF1; off8  {  op_adcb(PSWH, off8); }
:ADCB n7b, off8 is op=0x9B; n7b; op=0xF1; off8  {  op_adcb(n7b, off8); }
:ADCB reg8, sfr8 is regop0=0xd & reg8; op=0xF2; sfr8  {  op_adcb(reg8, sfr8); }
:ADCB X1indb, sfr8 is op=0xB0 & X1indb; op=0xF2; sfr8  {  op_adcb(X1indb, sfr8); }
:ADCB DPinddecb, sfr8 is op=0xB1 & DPinddecb; op=0xF2; sfr8  {  op_adcb(DPinddecb, sfr8); }
:ADCB DPindb, sfr8 is op=0xB2 & DPindb; op=0xF2; sfr8  {  op_adcb(DPindb, sfr8); }
:ADCB DPindincb, sfr8 is op=0xB3 & DPindincb; op=0xF2; sfr8  {  op_adcb(DPindincb, sfr8); }
:ADCB op1fix8, sfr8 is op=0xB4; op1fix8; op=0xF2; sfr8  {  op_adcb(op1fix8, sfr8); }
:ADCB op1off8, sfr8 is op=0xB5; op1off8; op=0xF2; sfr8  {  op_adcb(op1off8, sfr8); }
:ADCB op1sfr8, sfr8 is op=0xB6; op1sfr8; op=0xF2; sfr8  {  op_adcb(op1sfr8, sfr8); }
:ADCB op1n16b, sfr8 is op=0xB7; op1n16b; op=0xF2; sfr8  {  op_adcb(op1n16b, sfr8); }
:ADCB X1immb, sfr8 is op=0xB8; X1immb; op=0xF2; sfr8  {  op_adcb(X1immb, sfr8); }
:ADCB X2immb, sfr8 is op=0xB9; X2immb; op=0xF2; sfr8  {  op_adcb(X2immb, sfr8); }
:ADCB X1plusAb, sfr8 is op=0xBA & X1plusAb; op=0xF2; sfr8  {  op_adcb(X1plusAb, sfr8); }
:ADCB X1plusR0b, sfr8 is op=0xBB & X1plusR0b; op=0xF2; sfr8  {  op_adcb(X1plusR0b, sfr8); }
:ADCB PSWL, sfr8 is op=0x8A & PSWL; op=0xF2; sfr8  {  op_adcb(PSWL, sfr8); }
:ADCB PSWH, sfr8 is op=0x9A & PSWH; op=0xF2; sfr8  {  op_adcb(PSWH, sfr8); }
:ADCB n7b, sfr8 is op=0x9B; n7b; op=0xF2; sfr8  {  op_adcb(n7b, sfr8); }
:ADCB reg8, #n8 is regop0=0xd & reg8; op=0xF3; n8  {  op_adcb(reg8, n8:1); }
:ADCB X1indb, #n8 is op=0xB0 & X1indb; op=0xF3; n8  {  op_adcb(X1indb, n8:1); }
:ADCB DPinddecb, #n8 is op=0xB1 & DPinddecb; op=0xF3; n8  {  op_adcb(DPinddecb, n8:1); }
:ADCB DPindb, #n8 is op=0xB2 & DPindb; op=0xF3; n8  {  op_adcb(DPindb, n8:1); }
:ADCB DPindincb, #n8 is op=0xB3 & DPindincb; op=0xF3; n8  {  op_adcb(DPindincb, n8:1); }
:ADCB op1fix8, #n8 is op=0xB4; op1fix8; op=0xF3; n8  {  op_adcb(op1fix8, n8:1); }
:ADCB op1off8, #n8 is op=0xB5; op1off8; op=0xF3; n8  {  op_adcb(op1off8, n8:1); }
:ADCB op1sfr8, #n8 is op=0xB6; op1sfr8; op=0xF3; n8  {  op_adcb(op1sfr8, n8:1); }
:ADCB op1n16b, #n8 is op=0xB7; op1n16b; op=0xF3; n8  {  op_adcb(op1n16b, n8:1); }
:ADCB X1immb, #n8 is op=0xB8; X1immb; op=0xF3; n8  {  op_adcb(X1immb, n8:1); }
:ADCB X2immb, #n8 is op=0xB9; X2immb; op=0xF3; n8  {  op_adcb(X2immb, n8:1); }
:ADCB X1plusAb, #n8 is op=0xBA & X1plusAb; op=0xF3; n8  {  op_adcb(X1plusAb, n8:1); }
:ADCB X1plusR0b, #n8 is op=0xBB & X1plusR0b; op=0xF3; n8  {  op_adcb(X1plusR0b, n8:1); }
:ADCB PSWL, #n8 is op=0x8A & PSWL; op=0xF3; n8  {  op_adcb(PSWL, n8:1); }
:ADCB PSWH, #n8 is op=0x9A & PSWH; op=0xF3; n8  {  op_adcb(PSWH, n8:1); }
:ADCB n7b, #n8 is op=0x9B; n7b; op=0xF3; n8  {  op_adcb(n7b, n8:1); }
:ADCB reg8, A8 is regop0=0xd & reg8; op=0xF4 & A8  {  op_adcb(reg8, A8); }
:ADCB X1indb, A8 is op=0xB0 & X1indb; op=0xF4 & A8  {  op_adcb(X1indb, A8); }
:ADCB DPinddecb, A8 is op=0xB1 & DPinddecb; op=0xF4 & A8  {  op_adcb(DPinddecb, A8); }
:ADCB DPindb, A8 is op=0xB2 & DPindb; op=0xF4 & A8  {  op_adcb(DPindb, A8); }
:ADCB DPindincb, A8 is op=0xB3 & DPindincb; op=0xF4 & A8  {  op_adcb(DPindincb, A8); }
:ADCB op1fix8, A8 is op=0xB4; op1fix8; op=0xF4 & A8  {  op_adcb(op1fix8, A8); }
:ADCB op1off8, A8 is op=0xB5; op1off8; op=0xF4 & A8  {  op_adcb(op1off8, A8); }
:ADCB op1sfr8, A8 is op=0xB6; op1sfr8; op=0xF4 & A8  {  op_adcb(op1sfr8, A8); }
:ADCB op1n16b, A8 is op=0xB7; op1n16b; op=0xF4 & A8  {  op_adcb(op1n16b, A8); }
:ADCB X1immb, A8 is op=0xB8; X1immb; op=0xF4 & A8  {  op_adcb(X1immb, A8); }
:ADCB X2immb, A8 is op=0xB9; X2immb; op=0xF4 & A8  {  op_adcb(X2immb, A8); }
:ADCB X1plusAb, A8 is op=0xBA & X1plusAb; op=0xF4 & A8  {  op_adcb(X1plusAb, A8); }
:ADCB X1plusR0b, A8 is op=0xBB & X1plusR0b; op=0xF4 & A8  {  op_adcb(X1plusR0b, A8); }
:ADCB PSWL, A8 is op=0x8A & PSWL; op=0xF4 & A8  {  op_adcb(PSWL, A8); }
:ADCB PSWH, A8 is op=0x9A & PSWH; op=0xF4 & A8  {  op_adcb(PSWH, A8); }
:ADCB n7b, A8 is op=0x9B; n7b; op=0xF4 & A8  {  op_adcb(n7b, A8); }
:ADD A16, ERn is dd=1 & hregop0=10 & ERn & A16  {  op_add(A16, ERn); }
:ADD A16, PRn is dd=1 & hregop0=11 & PRn & A16  {  op_add(A16, PRn); }
:ADD A16, #n16 is dd=1 & op=0xAE; n16 & A16  {  op_add(A16, n16:2); }
:ADD A16, fix16 is dd=1 & op=0xAC; fix16 & A16  {  op_add(A16, fix16); }
:ADD A16, off16 is dd=1 & op=0xAD; off16 & A16  {  op_add(A16, off16); }
:ADD A16, reg16 is regop0=0xc & reg16; op=0xA5 & A16  {  op_add(A16, reg16); }
:ADD A16, X1indw is op=0xA0 & X1indw; op=0xA5 & A16  {  op_add(A16, X1indw); }
:ADD A16, DPinddecw is op=0xA1 & DPinddecw; op=0xA5 & A16  {  op_add(A16, DPinddecw); }
:ADD A16, DPindw is op=0xA2 & DPindw; op=0xA5 & A16  {  op_add(A16, DPindw); }
:ADD A16, DPindincw is op=0xA3 & DPindincw; op=0xA5 & A16  {  op_add(A16, DPindincw); }
:ADD A16, op1fix16 is op=0xA4; op1fix16; op=0xA5 & A16  {  op_add(A16, op1fix16); }
:ADD A16, op1off16 is op=0xA5; op1off16; op=0xA5 & A16  {  op_add(A16, op1off16); }
:ADD A16, op1sfr16 is op=0xA6; op1sfr16; op=0xA5 & A16  {  op_add(A16, op1sfr16); }
:ADD A16, op1n16w is op=0xA7; op1n16w; op=0xA5 & A16  {  op_add(A16, op1n16w); }
:ADD A16, X1immw is op=0xA8; X1immw; op=0xA5 & A16  {  op_add(A16, X1immw); }
:ADD A16, X2immw is op=0xA9; X2immw; op=0xA5 & A16  {  op_add(A16, X2immw); }
:ADD A16, X1plusAw is op=0xAA & X1plusAw; op=0xA5 & A16  {  op_add(A16, X1plusAw); }
:ADD A16, X1plusR0w is op=0xAB & X1plusR0w; op=0xA5 & A16  {  op_add(A16, X1plusR0w); }
:ADD A16, n7w is op=0x8B; n7w; op=0xA5 & A16  {  op_add(A16, n7w); }
:ADD reg16, fix16 is regop0=0xc & reg16; op=0xA0; fix16  {  op_add(reg16, fix16); }
:ADD X1indw, fix16 is op=0xA0 & X1indw; op=0xA0; fix16  {  op_add(X1indw, fix16); }
:ADD DPinddecw, fix16 is op=0xA1 & DPinddecw; op=0xA0; fix16  {  op_add(DPinddecw, fix16); }
:ADD DPindw, fix16 is op=0xA2 & DPindw; op=0xA0; fix16  {  op_add(DPindw, fix16); }
:ADD DPindincw, fix16 is op=0xA3 & DPindincw; op=0xA0; fix16  {  op_add(DPindincw, fix16); }
:ADD op1fix16, fix16 is op=0xA4; op1fix16; op=0xA0; fix16  {  op_add(op1fix16, fix16); }
:ADD op1off16, fix16 is op=0xA5; op1off16; op=0xA0; fix16  {  op_add(op1off16, fix16); }
:ADD op1sfr16, fix16 is op=0xA6; op1sfr16; op=0xA0; fix16  {  op_add(op1sfr16, fix16); }
:ADD op1n16w, fix16 is op=0xA7; op1n16w; op=0xA0; fix16  {  op_add(op1n16w, fix16); }
:ADD X1immw, fix16 is op=0xA8; X1immw; op=0xA0; fix16  {  op_add(X1immw, fix16); }
:ADD X2immw, fix16 is op=0xA9; X2immw; op=0xA0; fix16  {  op_add(X2immw, fix16); }
:ADD X1plusAw, fix16 is op=0xAA & X1plusAw; op=0xA0; fix16  {  op_add(X1plusAw, fix16); }
:ADD X1plusR0w, fix16 is op=0xAB & X1plusR0w; op=0xA0; fix16  {  op_add(X1plusR0w, fix16); }
:ADD n7w, fix16 is op=0x8B; n7w; op=0xA0; fix16  {  op_add(n7w, fix16); }
:ADD reg16, off16 is regop0=0xc & reg16; op=0xA1; off16  {  op_add(reg16, off16); }
:ADD X1indw, off16 is op=0xA0 & X1indw; op=0xA1; off16  {  op_add(X1indw, off16); }
:ADD DPinddecw, off16 is op=0xA1 & DPinddecw; op=0xA1; off16  {  op_add(DPinddecw, off16); }
:ADD DPindw, off16 is op=0xA2 & DPindw; op=0xA1; off16  {  op_add(DPindw, off16); }
:ADD DPindincw, off16 is op=0xA3 & DPindincw; op=0xA1; off16  {  op_add(DPindincw, off16); }
:ADD op1fix16, off16 is op=0xA4; op1fix16; op=0xA1; off16  {  op_add(op1fix16, off16); }
:ADD op1off16, off16 is op=0xA5; op1off16; op=0xA1; off16  {  op_add(op1off16, off16); }
:ADD op1sfr16, off16 is op=0xA6; op1sfr16; op=0xA1; off16  {  op_add(op1sfr16, off16); }
:ADD op1n16w, off16 is op=0xA7; op1n16w; op=0xA1; off16  {  op_add(op1n16w, off16); }
:ADD X1immw, off16 is op=0xA8; X1immw; op=0xA1; off16  {  op_add(X1immw, off16); }
:ADD X2immw, off16 is op=0xA9; X2immw; op=0xA1; off16  {  op_add(X2immw, off16); }
:ADD X1plusAw, off16 is op=0xAA & X1plusAw; op=0xA1; off16  {  op_add(X1plusAw, off16); }
:ADD X1plusR0w, off16 is op=0xAB & X1plusR0w; op=0xA1; off16  {  op_add(X1plusR0w, off16); }
:ADD n7w, off16 is op=0x8B; n7w; op=0xA1; off16  {  op_add(n7w, off16); }
:ADD reg16, sfr16 is regop0=0xc & reg16; op=0xA2; sfr16  {  op_add(reg16, sfr16); }
:ADD X1indw, sfr16 is op=0xA0 & X1indw; op=0xA2; sfr16  {  op_add(X1indw, sfr16); }
:ADD DPinddecw, sfr16 is op=0xA1 & DPinddecw; op=0xA2; sfr16  {  op_add(DPinddecw, sfr16); }
:ADD DPindw, sfr16 is op=0xA2 & DPindw; op=0xA2; sfr16  {  op_add(DPindw, sfr16); }
:ADD DPindincw, sfr16 is op=0xA3 & DPindincw; op=0xA2; sfr16  {  op_add(DPindincw, sfr16); }
:ADD op1fix16, sfr16 is op=0xA4; op1fix16; op=0xA2; sfr16  {  op_add(op1fix16, sfr16); }
:ADD op1off16, sfr16 is op=0xA5; op1off16; op=0xA2; sfr16  {  op_add(op1off16, sfr16); }
:ADD op1sfr16, sfr16 is op=0xA6; op1sfr16; op=0xA2; sfr16  {  op_add(op1sfr16, sfr16); }
:ADD op1n16w, sfr16 is op=0xA7; op1n16w; op=0xA2; sfr16  {  op_add(op1n16w, sfr16); }
:ADD X1immw, sfr16 is op=0xA8; X1immw; op=0xA2; sfr16  {  op_add(X1immw, sfr16); }
:ADD X2immw, sfr16 is op=0xA9; X2immw; op=0xA2; sfr16  {  op_add(X2immw, sfr16); }
:ADD X1plusAw, sfr16 is op=0xAA & X1plusAw; op=0xA2; sfr16  {  op_add(X1plusAw, sfr16); }
:ADD X1plusR0w, sfr16 is op=0xAB & X1plusR0w; op=0xA2; sfr16  {  op_add(X1plusR0w, sfr16); }
:ADD n7w, sfr16 is op=0x8B; n7w; op=0xA2; sfr16  {  op_add(n7w, sfr16); }
:ADD reg16, #n16 is regop0=0xc & reg16; op=0xA3; n16  {  op_add(reg16, n16:2); }
:ADD X1indw, #n16 is op=0xA0 & X1indw; op=0xA3; n16  {  op_add(X1indw, n16:2); }
:ADD DPinddecw, #n16 is op=0xA1 & DPinddecw; op=0xA3; n16  {  op_add(DPinddecw, n16:2); }
:ADD DPindw, #n16 is op=0xA2 & DPindw; op=0xA3; n16  {  op_add(DPindw, n16:2); }
:ADD DPindincw, #n16 is op=0xA3 & DPindincw; op=0xA3; n16  {  op_add(DPindincw, n16:2); }
:ADD op1fix16, #n16 is op=0xA4; op1fix16; op=0xA3; n16  {  op_add(op1fix16, n16:2); }
:ADD op1off16, #n16 is op=0xA5; op1off16; op=0xA3; n16  {  op_add(op1off16, n16:2); }
:ADD op1sfr16, #n16 is op=0xA6; op1sfr16; op=0xA3; n16  {  op_add(op1sfr16, n16:2); }
:ADD op1n16w, #n16 is op=0xA7; op1n16w; op=0xA3; n16  {  op_add(op1n16w, n16:2); }
:ADD X1immw, #n16 is op=0xA8; X1immw; op=0xA3; n16  {  op_add(X1immw, n16:2); }
:ADD X2immw, #n16 is op=0xA9; X2immw; op=0xA3; n16  {  op_add(X2immw, n16:2); }
:ADD X1plusAw, #n16 is op=0xAA & X1plusAw; op=0xA3; n16  {  op_add(X1plusAw, n16:2); }
:ADD X1plusR0w, #n16 is op=0xAB & X1plusR0w; op=0xA3; n16  {  op_add(X1plusR0w, n16:2); }
:ADD n7w, #n16 is op=0x8B; n7w; op=0xA3; n16  {  op_add(n7w, n16:2); }
:ADD reg16, A16 is regop0=0xc & reg16; op=0xA4 & A16  {  op_add(reg16, A16); }
:ADD X1indw, A16 is op=0xA0 & X1indw; op=0xA4 & A16  {  op_add(X1indw, A16); }
:ADD DPinddecw, A16 is op=0xA1 & DPinddecw; op=0xA4 & A16  {  op_add(DPinddecw, A16); }
:ADD DPindw, A16 is op=0xA2 & DPindw; op=0xA4 & A16  {  op_add(DPindw, A16); }
:ADD DPindincw, A16 is op=0xA3 & DPindincw; op=0xA4 & A16  {  op_add(DPindincw, A16); }
:ADD op1fix16, A16 is op=0xA4; op1fix16; op=0xA4 & A16  {  op_add(op1fix16, A16); }
:ADD op1off16, A16 is op=0xA5; op1off16; op=0xA4 & A16  {  op_add(op1off16, A16); }
:ADD op1sfr16, A16 is op=0xA6; op1sfr16; op=0xA4 & A16  {  op_add(op1sfr16, A16); }
:ADD op1n16w, A16 is op=0xA7; op1n16w; op=0xA4 & A16  {  op_add(op1n16w, A16); }
:ADD X1immw, A16 is op=0xA8; X1immw; op=0xA4 & A16  {  op_add(X1immw, A16); }
:ADD X2immw, A16 is op=0xA9; X2immw; op=0xA4 & A16  {  op_add(X2immw, A16); }
:ADD X1plusAw, A16 is op=0xAA & X1plusAw; op=0xA4 & A16  {  op_add(X1plusAw, A16); }
:ADD X1plusR0w, A16 is op=0xAB & X1plusR0w; op=0xA4 & A16  {  op_add(X1plusR0w, A16); }
:ADD n7w, A16 is op=0x8B; n7w; op=0xA4 & A16  {  op_add(n7w, A16); }
:ADDB A8, Rn is dd=0 & regop0=5 & Rn & A8  {  op_addb(A8, Rn); }
:ADDB A8, #n8 is dd=0 & op=0xAE; n8 & A8  {  op_addb(A8, n8:1); }
:ADDB A8, fix8 is dd=0 & op=0xAC; fix8 & A8  {  op_addb(A8, fix8); }
:ADDB A8, off8 is dd=0 & op=0xAD; off8 & A8  {  op_addb(A8, off8); }
:ADDB A8, reg8 is regop0=0xd & reg8; op=0xA5 & A8  {  op_addb(A8, reg8); }
:ADDB A8, X1indb is op=0xB0 & X1indb; op=0xA5 & A8  {  op_addb(A8, X1indb); }
:ADDB A8, DPinddecb is op=0xB1 & DPinddecb; op=0xA5 & A8  {  op_addb(A8, DPinddecb); }
:ADDB A8, DPindb is op=0xB2 & DPindb; op=0xA5 & A8  {  op_addb(A8, DPindb); }
:ADDB A8, DPindincb is op=0xB3 & DPindincb; op=0xA5 & A8  {  op_addb(A8, DPindincb); }
:ADDB A8, op1fix8 is op=0xB4; op1fix8; op=0xA5 & A8  {  op_addb(A8, op1fix8); }
:ADDB A8, op1off8 is op=0xB5; op1off8; op=0xA5 & A8  {  op_addb(A8, op1off8); }
:ADDB A8, op1sfr8 is op=0xB6; op1sfr8; op=0xA5 & A8  {  op_addb(A8, op1sfr8); }
:ADDB A8, op1n16b is op=0xB7; op1n16b; op=0xA5 & A8  {  op_addb(A8, op1n16b); }
:ADDB A8, X1immb is op=0xB8; X1immb; op=0xA5 & A8  {  op_addb(A8, X1immb); }
:ADDB A8, X2immb is op=0xB9; X2immb; op=0xA5 & A8  {  op_addb(A8, X2immb); }
:ADDB A8, X1plusAb is op=0xBA & X1plusAb; op=0xA5 & A8  {  op_addb(A8, X1plusAb); }
:ADDB A8, X1plusR0b is op=0xBB & X1plusR0b; op=0xA5 & A8  {  op_addb(A8, X1plusR0b); }
:ADDB A8, PSWL is op=0x8A & PSWL; op=0xA5 & A8  {  op_addb(A8, PSWL); }
:ADDB A8, PSWH is op=0x9A & PSWH; op=0xA5 & A8  {  op_addb(A8, PSWH); }
:ADDB A8, n7b is op=0x9B; n7b; op=0xA5 & A8  {  op_addb(A8, n7b); }
:ADDB reg8, fix8 is regop0=0xd & reg8; op=0xA0; fix8  {  op_addb(reg8, fix8); }
:ADDB X1indb, fix8 is op=0xB0 & X1indb; op=0xA0; fix8  {  op_addb(X1indb, fix8); }
:ADDB DPinddecb, fix8 is op=0xB1 & DPinddecb; op=0xA0; fix8  {  op_addb(DPinddecb, fix8); }
:ADDB DPindb, fix8 is op=0xB2 & DPindb; op=0xA0; fix8  {  op_addb(DPindb, fix8); }
:ADDB DPindincb, fix8 is op=0xB3 & DPindincb; op=0xA0; fix8  {  op_addb(DPindincb, fix8); }
:ADDB op1fix8, fix8 is op=0xB4; op1fix8; op=0xA0; fix8  {  op_addb(op1fix8, fix8); }
:ADDB op1off8, fix8 is op=0xB5; op1off8; op=0xA0; fix8  {  op_addb(op1off8, fix8); }
:ADDB op1sfr8, fix8 is op=0xB6; op1sfr8; op=0xA0; fix8  {  op_addb(op1sfr8, fix8); }
:ADDB op1n16b, fix8 is op=0xB7; op1n16b; op=0xA0; fix8  {  op_addb(op1n16b, fix8); }
:ADDB X1immb, fix8 is op=0xB8; X1immb; op=0xA0; fix8  {  op_addb(X1immb, fix8); }
:ADDB X2immb, fix8 is op=0xB9; X2immb; op=0xA0; fix8  {  op_addb(X2immb, fix8); }
:ADDB X1plusAb, fix8 is op=0xBA & X1plusAb; op=0xA0; fix8  {  op_addb(X1plusAb, fix8); }
:ADDB X1plusR0b, fix8 is op=0xBB & X1plusR0b; op=0xA0; fix8  {  op_addb(X1plusR0b, fix8); }
:ADDB PSWL, fix8 is op=0x8A & PSWL; op=0xA0; fix8  {  op_addb(PSWL, fix8); }
:ADDB PSWH, fix8 is op=0x9A & PSWH; op=0xA0; fix8  {  op_addb(PSWH, fix8); }
:ADDB n7b, fix8 is op=0x9B; n7b; op=0xA0; fix8  {  op_addb(n7b, fix8); }
:ADDB reg8, off8 is regop0=0xd & reg8; op=0xA1; off8  {  op_addb(reg8, off8); }
:ADDB X1indb, off8 is op=0xB0 & X1indb; op=0xA1; off8  {  op_addb(X1indb, off8); }
:ADDB DPinddecb, off8 is op=0xB1 & DPinddecb; op=0xA1; off8  {  op_addb(DPinddecb, off8); }
:ADDB DPindb, off8 is op=0xB2 & DPindb; op=0xA1; off8  {  op_addb(DPindb, off8); }
:ADDB DPindincb, off8 is op=0xB3 & DPindincb; op=0xA1; off8  {  op_addb(DPindincb, off8); }
:ADDB op1fix8, off8 is op=0xB4; op1fix8; op=0xA1; off8  {  op_addb(op1fix8, off8); }
:ADDB op1off8, off8 is op=0xB5; op1off8; op=0xA1; off8  {  op_addb(op1off8, off8); }
:ADDB op1sfr8, off8 is op=0xB6; op1sfr8; op=0xA1; off8  {  op_addb(op1sfr8, off8); }
:ADDB op1n16b, off8 is op=0xB7; op1n16b; op=0xA1; off8  {  op_addb(op1n16b, off8); }
:ADDB X1immb, off8 is op=0xB8; X1immb; op=0xA1; off8  {  op_addb(X1immb, off8); }
:ADDB X2immb, off8 is op=0xB9; X2immb; op=0xA1; off8  {  op_addb(X2immb, off8); }
:ADDB X1plusAb, off8 is op=0xBA & X1plusAb; op=0xA1; off8  {  op_addb(X1plusAb, off8); }
:ADDB X1plusR0b, off8 is op=0xBB & X1plusR0b; op=0xA1; off8  {  op_addb(X1plusR0b, off8); }
:ADDB PSWL, off8 is op=0x8A & PSWL; op=0xA1; off8  {  op_addb(PSWL, off8); }
:ADDB PSWH, off8 is op=0x9A & PSWH; op=0xA1; off8  {  op_addb(PSWH, off8); }
:ADDB n7b, off8 is op=0x9B; n7b; op=0xA1; off8  {  op_addb(n7b, off8); }
:ADDB reg8, sfr8 is regop0=0xd & reg8; op=0xA2; sfr8  {  op_addb(reg8, sfr8); }
:ADDB X1indb, sfr8 is op=0xB0 & X1indb; op=0xA2; sfr8  {  op_addb(X1indb, sfr8); }
:ADDB DPinddecb, sfr8 is op=0xB1 & DPinddecb; op=0xA2; sfr8  {  op_addb(DPinddecb, sfr8); }
:ADDB DPindb, sfr8 is op=0xB2 & DPindb; op=0xA2; sfr8  {  op_addb(DPindb, sfr8); }
:ADDB DPindincb, sfr8 is op=0xB3 & DPindincb; op=0xA2; sfr8  {  op_addb(DPindincb, sfr8); }
:ADDB op1fix8, sfr8 is op=0xB4; op1fix8; op=0xA2; sfr8  {  op_addb(op1fix8, sfr8); }
:ADDB op1off8, sfr8 is op=0xB5; op1off8; op=0xA2; sfr8  {  op_addb(op1off8, sfr8); }
:ADDB op1sfr8, sfr8 is op=0xB6; op1sfr8; op=0xA2; sfr8  {  op_addb(op1sfr8, sfr8); }
:ADDB op1n16b, sfr8 is op=0xB7; op1n16b; op=0xA2; sfr8  {  op_addb(op1n16b, sfr8); }
:ADDB X1immb, sfr8 is op=0xB8; X1immb; op=0xA2; sfr8  {  op_addb(X1immb, sfr8); }
:ADDB X2immb, sfr8 is op=0xB9; X2immb; op=0xA2; sfr8  {  op_addb(X2immb, sfr8); }
:ADDB X1plusAb, sfr8 is op=0xBA & X1plusAb; op=0xA2; sfr8  {  op_addb(X1plusAb, sfr8); }
:ADDB X1plusR0b, sfr8 is op=0xBB & X1plusR0b; op=0xA2; sfr8  {  op_addb(X1plusR0b, sfr8); }
:ADDB PSWL, sfr8 is op=0x8A & PSWL; op=0xA2; sfr8  {  op_addb(PSWL, sfr8); }
:ADDB PSWH, sfr8 is op=0x9A & PSWH; op=0xA2; sfr8  {  op_addb(PSWH, sfr8); }
:ADDB n7b, sfr8 is op=0x9B; n7b; op=0xA2; sfr8  {  op_addb(n7b, sfr8); }
:ADDB reg8, #n8 is regop0=0xd & reg8; op=0xA3; n8  {  op_addb(reg8, n8:1); }
:ADDB X1indb, #n8 is op=0xB0 & X1indb; op=0xA3; n8  {  op_addb(X1indb, n8:1); }
:ADDB DPinddecb, #n8 is op=0xB1 & DPinddecb; op=0xA3; n8  {  op_addb(DPinddecb, n8:1); }
:ADDB DPindb, #n8 is op=0xB2 & DPindb; op=0xA3; n8  {  op_addb(DPindb, n8:1); }
:ADDB DPindincb, #n8 is op=0xB3 & DPindincb; op=0xA3; n8  {  op_addb(DPindincb, n8:1); }
:ADDB op1fix8, #n8 is op=0xB4; op1fix8; op=0xA3; n8  {  op_addb(op1fix8, n8:1); }
:ADDB op1off8, #n8 is op=0xB5; op1off8; op=0xA3; n8  {  op_addb(op1off8, n8:1); }
:ADDB op1sfr8, #n8 is op=0xB6; op1sfr8; op=0xA3; n8  {  op_addb(op1sfr8, n8:1); }
:ADDB op1n16b, #n8 is op=0xB7; op1n16b; op=0xA3; n8  {  op_addb(op1n16b, n8:1); }
:ADDB X1immb, #n8 is op=0xB8; X1immb; op=0xA3; n8  {  op_addb(X1immb, n8:1); }
:ADDB X2immb, #n8 is op=0xB9; X2immb; op=0xA3; n8  {  op_addb(X2immb, n8:1); }
:ADDB X1plusAb, #n8 is op=0xBA & X1plusAb; op=0xA3; n8  {  op_addb(X1plusAb, n8:1); }
:ADDB X1plusR0b, #n8 is op=0xBB & X1plusR0b; op=0xA3; n8  {  op_addb(X1plusR0b, n8:1); }
:ADDB PSWL, #n8 is op=0x8A & PSWL; op=0xA3; n8  {  op_addb(PSWL, n8:1); }
:ADDB PSWH, #n8 is op=0x9A & PSWH; op=0xA3; n8  {  op_addb(PSWH, n8:1); }
:ADDB n7b, #n8 is op=0x9B; n7b; op=0xA3; n8  {  op_addb(n7b, n8:1); }
:ADDB reg8, A8 is regop0=0xd & reg8; op=0xA4 & A8  {  op_addb(reg8, A8); }
:ADDB X1indb, A8 is op=0xB0 & X1indb; op=0xA4 & A8  {  op_addb(X1indb, A8); }
:ADDB DPinddecb, A8 is op=0xB1 & DPinddecb; op=0xA4 & A8  {  op_addb(DPinddecb, A8); }
:ADDB DPindb, A8 is op=0xB2 & DPindb; op=0xA4 & A8  {  op_addb(DPindb, A8); }
:ADDB DPindincb, A8 is op=0xB3 & DPindincb; op=0xA4 & A8  {  op_addb(DPindincb, A8); }
:ADDB op1fix8, A8 is op=0xB4; op1fix8; op=0xA4 & A8  {  op_addb(op1fix8, A8); }
:ADDB op1off8, A8 is op=0xB5; op1off8; op=0xA4 & A8  {  op_addb(op1off8, A8); }
:ADDB op1sfr8, A8 is op=0xB6; op1sfr8; op=0xA4 & A8  {  op_addb(op1sfr8, A8); }
:ADDB op1n16b, A8 is op=0xB7; op1n16b; op=0xA4 & A8  {  op_addb(op1n16b, A8); }
:ADDB X1immb, A8 is op=0xB8; X1immb; op=0xA4 & A8  {  op_addb(X1immb, A8); }
:ADDB X2immb, A8 is op=0xB9; X2immb; op=0xA4 & A8  {  op_addb(X2immb, A8); }
:ADDB X1plusAb, A8 is op=0xBA & X1plusAb; op=0xA4 & A8  {  op_addb(X1plusAb, A8); }
:ADDB X1plusR0b, A8 is op=0xBB & X1plusR0b; op=0xA4 & A8  {  op_addb(X1plusR0b, A8); }
:ADDB PSWL, A8 is op=0x8A & PSWL; op=0xA4 & A8  {  op_addb(PSWL, A8); }
:ADDB PSWH, A8 is op=0x9A & PSWH; op=0xA4 & A8  {  op_addb(PSWH, A8); }
:ADDB n7b, A8 is op=0x9B; n7b; op=0xA4 & A8  {  op_addb(n7b, A8); }
:AND A16, off16 is dd=1 & op=0xBD; off16 & A16  {  op_and(A16, off16); }
:AND A16, #n16 is dd=1 & op=0xBE; n16 & A16  {  op_and(A16, n16:2); }
:AND A16, reg16 is regop0=0xc & reg16; op=0xB5 & A16  {  op_and(A16, reg16); }
:AND A16, X1indw is op=0xA0 & X1indw; op=0xB5 & A16  {  op_and(A16, X1indw); }
:AND A16, DPinddecw is op=0xA1 & DPinddecw; op=0xB5 & A16  {  op_and(A16, DPinddecw); }
:AND A16, DPindw is op=0xA2 & DPindw; op=0xB5 & A16  {  op_and(A16, DPindw); }
:AND A16, DPindincw is op=0xA3 & DPindincw; op=0xB5 & A16  {  op_and(A16, DPindincw); }
:AND A16, op1fix16 is op=0xA4; op1fix16; op=0xB5 & A16  {  op_and(A16, op1fix16); }
:AND A16, op1off16 is op=0xA5; op1off16; op=0xB5 & A16  {  op_and(A16, op1off16); }
:AND A16, op1sfr16 is op=0xA6; op1sfr16; op=0xB5 & A16  {  op_and(A16, op1sfr16); }
:AND A16, op1n16w is op=0xA7; op1n16w; op=0xB5 & A16  {  op_and(A16, op1n16w); }
:AND A16, X1immw is op=0xA8; X1immw; op=0xB5 & A16  {  op_and(A16, X1immw); }
:AND A16, X2immw is op=0xA9; X2immw; op=0xB5 & A16  {  op_and(A16, X2immw); }
:AND A16, X1plusAw is op=0xAA & X1plusAw; op=0xB5 & A16  {  op_and(A16, X1plusAw); }
:AND A16, X1plusR0w is op=0xAB & X1plusR0w; op=0xB5 & A16  {  op_and(A16, X1plusR0w); }
:AND A16, n7w is op=0x8B; n7w; op=0xB5 & A16  {  op_and(A16, n7w); }
:AND reg16, fix16 is regop0=0xc & reg16; op=0xB0; fix16  {  op_and(reg16, fix16); }
:AND X1indw, fix16 is op=0xA0 & X1indw; op=0xB0; fix16  {  op_and(X1indw, fix16); }
:AND DPinddecw, fix16 is op=0xA1 & DPinddecw; op=0xB0; fix16  {  op_and(DPinddecw, fix16); }
:AND DPindw, fix16 is op=0xA2 & DPindw; op=0xB0; fix16  {  op_and(DPindw, fix16); }
:AND DPindincw, fix16 is op=0xA3 & DPindincw; op=0xB0; fix16  {  op_and(DPindincw, fix16); }
:AND op1fix16, fix16 is op=0xA4; op1fix16; op=0xB0; fix16  {  op_and(op1fix16, fix16); }
:AND op1off16, fix16 is op=0xA5; op1off16; op=0xB0; fix16  {  op_and(op1off16, fix16); }
:AND op1sfr16, fix16 is op=0xA6; op1sfr16; op=0xB0; fix16  {  op_and(op1sfr16, fix16); }
:AND op1n16w, fix16 is op=0xA7; op1n16w; op=0xB0; fix16  {  op_and(op1n16w, fix16); }
:AND X1immw, fix16 is op=0xA8; X1immw; op=0xB0; fix16  {  op_and(X1immw, fix16); }
:AND X2immw, fix16 is op=0xA9; X2immw; op=0xB0; fix16  {  op_and(X2immw, fix16); }
:AND X1plusAw, fix16 is op=0xAA & X1plusAw; op=0xB0; fix16  {  op_and(X1plusAw, fix16); }
:AND X1plusR0w, fix16 is op=0xAB & X1plusR0w; op=0xB0; fix16  {  op_and(X1plusR0w, fix16); }
:AND n7w, fix16 is op=0x8B; n7w; op=0xB0; fix16  {  op_and(n7w, fix16); }
:AND reg16, off16 is regop0=0xc & reg16; op=0xB1; off16  {  op_and(reg16, off16); }
:AND X1indw, off16 is op=0xA0 & X1indw; op=0xB1; off16  {  op_and(X1indw, off16); }
:AND DPinddecw, off16 is op=0xA1 & DPinddecw; op=0xB1; off16  {  op_and(DPinddecw, off16); }
:AND DPindw, off16 is op=0xA2 & DPindw; op=0xB1; off16  {  op_and(DPindw, off16); }
:AND DPindincw, off16 is op=0xA3 & DPindincw; op=0xB1; off16  {  op_and(DPindincw, off16); }
:AND op1fix16, off16 is op=0xA4; op1fix16; op=0xB1; off16  {  op_and(op1fix16, off16); }
:AND op1off16, off16 is op=0xA5; op1off16; op=0xB1; off16  {  op_and(op1off16, off16); }
:AND op1sfr16, off16 is op=0xA6; op1sfr16; op=0xB1; off16  {  op_and(op1sfr16, off16); }
:AND op1n16w, off16 is op=0xA7; op1n16w; op=0xB1; off16  {  op_and(op1n16w, off16); }
:AND X1immw, off16 is op=0xA8; X1immw; op=0xB1; off16  {  op_and(X1immw, off16); }
:AND X2immw, off16 is op=0xA9; X2immw; op=0xB1; off16  {  op_and(X2immw, off16); }
:AND X1plusAw, off16 is op=0xAA & X1plusAw; op=0xB1; off16  {  op_and(X1plusAw, off16); }
:AND X1plusR0w, off16 is op=0xAB & X1plusR0w; op=0xB1; off16  {  op_and(X1plusR0w, off16); }
:AND n7w, off16 is op=0x8B; n7w; op=0xB1; off16  {  op_and(n7w, off16); }
:AND reg16, sfr16 is regop0=0xc & reg16; op=0xB2; sfr16  {  op_and(reg16, sfr16); }
:AND X1indw, sfr16 is op=0xA0 & X1indw; op=0xB2; sfr16  {  op_and(X1indw, sfr16); }
:AND DPinddecw, sfr16 is op=0xA1 & DPinddecw; op=0xB2; sfr16  {  op_and(DPinddecw, sfr16); }
:AND DPindw, sfr16 is op=0xA2 & DPindw; op=0xB2; sfr16  {  op_and(DPindw, sfr16); }
:AND DPindincw, sfr16 is op=0xA3 & DPindincw; op=0xB2; sfr16  {  op_and(DPindincw, sfr16); }
:AND op1fix16, sfr16 is op=0xA4; op1fix16; op=0xB2; sfr16  {  op_and(op1fix16, sfr16); }
:AND op1off16, sfr16 is op=0xA5; op1off16; op=0xB2; sfr16  {  op_and(op1off16, sfr16); }
:AND op1sfr16, sfr16 is op=0xA6; op1sfr16; op=0xB2; sfr16  {  op_and(op1sfr16, sfr16); }
:AND op1n16w, sfr16 is op=0xA7; op1n16w; op=0xB2; sfr16  {  op_and(op1n16w, sfr16); }
:AND X1immw, sfr16 is op=0xA8; X1immw; op=0xB2; sfr16  {  op_and(X1immw, sfr16); }
:AND X2immw, sfr16 is op=0xA9; X2immw; op=0xB2; sfr16  {  op_and(X2immw, sfr16); }
:AND X1plusAw, sfr16 is op=0xAA & X1plusAw; op=0xB2; sfr16  {  op_and(X1plusAw, sfr16); }
:AND X1plusR0w, sfr16 is op=0xAB & X1plusR0w; op=0xB2; sfr16  {  op_and(X1plusR0w, sfr16); }
:AND n7w, sfr16 is op=0x8B; n7w; op=0xB2; sfr16  {  op_and(n7w, sfr16); }
:AND reg16, #n16 is regop0=0xc & reg16; op=0xB3; n16  {  op_and(reg16, n16:2); }
:AND X1indw, #n16 is op=0xA0 & X1indw; op=0xB3; n16  {  op_and(X1indw, n16:2); }
:AND DPinddecw, #n16 is op=0xA1 & DPinddecw; op=0xB3; n16  {  op_and(DPinddecw, n16:2); }
:AND DPindw, #n16 is op=0xA2 & DPindw; op=0xB3; n16  {  op_and(DPindw, n16:2); }
:AND DPindincw, #n16 is op=0xA3 & DPindincw; op=0xB3; n16  {  op_and(DPindincw, n16:2); }
:AND op1fix16, #n16 is op=0xA4; op1fix16; op=0xB3; n16  {  op_and(op1fix16, n16:2); }
:AND op1off16, #n16 is op=0xA5; op1off16; op=0xB3; n16  {  op_and(op1off16, n16:2); }
:AND op1sfr16, #n16 is op=0xA6; op1sfr16; op=0xB3; n16  {  op_and(op1sfr16, n16:2); }
:AND op1n16w, #n16 is op=0xA7; op1n16w; op=0xB3; n16  {  op_and(op1n16w, n16:2); }
:AND X1immw, #n16 is op=0xA8; X1immw; op=0xB3; n16  {  op_and(X1immw, n16:2); }
:AND X2immw, #n16 is op=0xA9; X2immw; op=0xB3; n16  {  op_and(X2immw, n16:2); }
:AND X1plusAw, #n16 is op=0xAA & X1plusAw; op=0xB3; n16  {  op_and(X1plusAw, n16:2); }
:AND X1plusR0w, #n16 is op=0xAB & X1plusR0w; op=0xB3; n16  {  op_and(X1plusR0w, n16:2); }
:AND n7w, #n16 is op=0x8B; n7w; op=0xB3; n16  {  op_and(n7w, n16:2); }
:AND reg16, A16 is regop0=0xc & reg16; op=0xB4 & A16  {  op_and(reg16, A16); }
:AND X1indw, A16 is op=0xA0 & X1indw; op=0xB4 & A16  {  op_and(X1indw, A16); }
:AND DPinddecw, A16 is op=0xA1 & DPinddecw; op=0xB4 & A16  {  op_and(DPinddecw, A16); }
:AND DPindw, A16 is op=0xA2 & DPindw; op=0xB4 & A16  {  op_and(DPindw, A16); }
:AND DPindincw, A16 is op=0xA3 & DPindincw; op=0xB4 & A16  {  op_and(DPindincw, A16); }
:AND op1fix16, A16 is op=0xA4; op1fix16; op=0xB4 & A16  {  op_and(op1fix16, A16); }
:AND op1off16, A16 is op=0xA5; op1off16; op=0xB4 & A16  {  op_and(op1off16, A16); }
:AND op1sfr16, A16 is op=0xA6; op1sfr16; op=0xB4 & A16  {  op_and(op1sfr16, A16); }
:AND op1n16w, A16 is op=0xA7; op1n16w; op=0xB4 & A16  {  op_and(op1n16w, A16); }
:AND X1immw, A16 is op=0xA8; X1immw; op=0xB4 & A16  {  op_and(X1immw, A16); }
:AND X2immw, A16 is op=0xA9; X2immw; op=0xB4 & A16  {  op_and(X2immw, A16); }
:AND X1plusAw, A16 is op=0xAA & X1plusAw; op=0xB4 & A16  {  op_and(X1plusAw, A16); }
:AND X1plusR0w, A16 is op=0xAB & X1plusR0w; op=0xB4 & A16  {  op_and(X1plusR0w, A16); }
:AND n7w, A16 is op=0x8B; n7w; op=0xB4 & A16  {  op_and(n7w, A16); }
:ANDB A8, off8 is dd=0 & op=0xBD; off8 & A8  {  op_andb(A8, off8); }
:ANDB A8, #n8 is dd=0 & op=0xBE; n8 & A8  {  op_andb(A8, n8:1); }
:ANDB A8, reg8 is regop0=0xd & reg8; op=0xB5 & A8  {  op_andb(A8, reg8); }
:ANDB A8, X1indb is op=0xB0 & X1indb; op=0xB5 & A8  {  op_andb(A8, X1indb); }
:ANDB A8, DPinddecb is op=0xB1 & DPinddecb; op=0xB5 & A8  {  op_andb(A8, DPinddecb); }
:ANDB A8, DPindb is op=0xB2 & DPindb; op=0xB5 & A8  {  op_andb(A8, DPindb); }
:ANDB A8, DPindincb is op=0xB3 & DPindincb; op=0xB5 & A8  {  op_andb(A8, DPindincb); }
:ANDB A8, op1fix8 is op=0xB4; op1fix8; op=0xB5 & A8  {  op_andb(A8, op1fix8); }
:ANDB A8, op1off8 is op=0xB5; op1off8; op=0xB5 & A8  {  op_andb(A8, op1off8); }
:ANDB A8, op1sfr8 is op=0xB6; op1sfr8; op=0xB5 & A8  {  op_andb(A8, op1sfr8); }
:ANDB A8, op1n16b is op=0xB7; op1n16b; op=0xB5 & A8  {  op_andb(A8, op1n16b); }
:ANDB A8, X1immb is op=0xB8; X1immb; op=0xB5 & A8  {  op_andb(A8, X1immb); }
:ANDB A8, X2immb is op=0xB9; X2immb; op=0xB5 & A8  {  op_andb(A8, X2immb); }
:ANDB A8, X1plusAb is op=0xBA & X1plusAb; op=0xB5 & A8  {  op_andb(A8, X1plusAb); }
:ANDB A8, X1plusR0b is op=0xBB & X1plusR0b; op=0xB5 & A8  {  op_andb(A8, X1plusR0b); }
:ANDB A8, PSWL is op=0x8A & PSWL; op=0xB5 & A8  {  op_andb(A8, PSWL); }
:ANDB A8, PSWH is op=0x9A & PSWH; op=0xB5 & A8  {  op_andb(A8, PSWH); }
:ANDB A8, n7b is op=0x9B; n7b; op=0xB5 & A8  {  op_andb(A8, n7b); }
:ANDB reg8, fix8 is regop0=0xd & reg8; op=0xB0; fix8  {  op_andb(reg8, fix8); }
:ANDB X1indb, fix8 is op=0xB0 & X1indb; op=0xB0; fix8  {  op_andb(X1indb, fix8); }
:ANDB DPinddecb, fix8 is op=0xB1 & DPinddecb; op=0xB0; fix8  {  op_andb(DPinddecb, fix8); }
:ANDB DPindb, fix8 is op=0xB2 & DPindb; op=0xB0; fix8  {  op_andb(DPindb, fix8); }
:ANDB DPindincb, fix8 is op=0xB3 & DPindincb; op=0xB0; fix8  {  op_andb(DPindincb, fix8); }
:ANDB op1fix8, fix8 is op=0xB4; op1fix8; op=0xB0; fix8  {  op_andb(op1fix8, fix8); }
:ANDB op1off8, fix8 is op=0xB5; op1off8; op=0xB0; fix8  {  op_andb(op1off8, fix8); }
:ANDB op1sfr8, fix8 is op=0xB6; op1sfr8; op=0xB0; fix8  {  op_andb(op1sfr8, fix8); }
:ANDB op1n16b, fix8 is op=0xB7; op1n16b; op=0xB0; fix8  {  op_andb(op1n16b, fix8); }
:ANDB X1immb, fix8 is op=0xB8; X1immb; op=0xB0; fix8  {  op_andb(X1immb, fix8); }
:ANDB X2immb, fix8 is op=0xB9; X2immb; op=0xB0; fix8  {  op_andb(X2immb, fix8); }
:ANDB X1plusAb, fix8 is op=0xBA & X1plusAb; op=0xB0; fix8  {  op_andb(X1plusAb, fix8); }
:ANDB X1plusR0b, fix8 is op=0xBB & X1plusR0b; op=0xB0; fix8  {  op_andb(X1plusR0b, fix8); }
:ANDB PSWL, fix8 is op=0x8A & PSWL; op=0xB0; fix8  {  op_andb(PSWL, fix8); }
:ANDB PSWH, fix8 is op=0x9A & PSWH; op=0xB0; fix8  {  op_andb(PSWH, fix8); }
:ANDB n7b, fix8 is op=0x9B; n7b; op=0xB0; fix8  {  op_andb(n7b, fix8); }
:ANDB reg8, off8 is regop0=0xd & reg8; op=0xB1; off8  {  op_andb(reg8, off8); }
:ANDB X1indb, off8 is op=0xB0 & X1indb; op=0xB1; off8  {  op_andb(X1indb, off8); }
:ANDB DPinddecb, off8 is op=0xB1 & DPinddecb; op=0xB1; off8  {  op_andb(DPinddecb, off8); }
:ANDB DPindb, off8 is op=0xB2 & DPindb; op=0xB1; off8  {  op_andb(DPindb, off8); }
:ANDB DPindincb, off8 is op=0xB3 & DPindincb; op=0xB1; off8  {  op_andb(DPindincb, off8); }
:ANDB op1fix8, off8 is op=0xB4; op1fix8; op=0xB1; off8  {  op_andb(op1fix8, off8); }
:ANDB op1off8, off8 is op=0xB5; op1off8; op=0xB1; off8  {  op_andb(op1off8, off8); }
:ANDB op1sfr8, off8 is op=0xB6; op1sfr8; op=0xB1; off8  {  op_andb(op1sfr8, off8); }
:ANDB op1n16b, off8 is op=0xB7; op1n16b; op=0xB1; off8  {  op_andb(op1n16b, off8); }
:ANDB X1immb, off8 is op=0xB8; X1immb; op=0xB1; off8  {  op_andb(X1immb, off8); }
:ANDB X2immb, off8 is op=0xB9; X2immb; op=0xB1; off8  {  op_andb(X2immb, off8); }
:ANDB X1plusAb, off8 is op=0xBA & X1plusAb; op=0xB1; off8  {  op_andb(X1plusAb, off8); }
:ANDB X1plusR0b, off8 is op=0xBB & X1plusR0b; op=0xB1; off8  {  op_andb(X1plusR0b, off8); }
:ANDB PSWL, off8 is op=0x8A & PSWL; op=0xB1; off8  {  op_andb(PSWL, off8); }
:ANDB PSWH, off8 is op=0x9A & PSWH; op=0xB1; off8  {  op_andb(PSWH, off8); }
:ANDB n7b, off8 is op=0x9B; n7b; op=0xB1; off8  {  op_andb(n7b, off8); }
:ANDB reg8, sfr8 is regop0=0xd & reg8; op=0xB2; sfr8  {  op_andb(reg8, sfr8); }
:ANDB X1indb, sfr8 is op=0xB0 & X1indb; op=0xB2; sfr8  {  op_andb(X1indb, sfr8); }
:ANDB DPinddecb, sfr8 is op=0xB1 & DPinddecb; op=0xB2; sfr8  {  op_andb(DPinddecb, sfr8); }
:ANDB DPindb, sfr8 is op=0xB2 & DPindb; op=0xB2; sfr8  {  op_andb(DPindb, sfr8); }
:ANDB DPindincb, sfr8 is op=0xB3 & DPindincb; op=0xB2; sfr8  {  op_andb(DPindincb, sfr8); }
:ANDB op1fix8, sfr8 is op=0xB4; op1fix8; op=0xB2; sfr8  {  op_andb(op1fix8, sfr8); }
:ANDB op1off8, sfr8 is op=0xB5; op1off8; op=0xB2; sfr8  {  op_andb(op1off8, sfr8); }
:ANDB op1sfr8, sfr8 is op=0xB6; op1sfr8; op=0xB2; sfr8  {  op_andb(op1sfr8, sfr8); }
:ANDB op1n16b, sfr8 is op=0xB7; op1n16b; op=0xB2; sfr8  {  op_andb(op1n16b, sfr8); }
:ANDB X1immb, sfr8 is op=0xB8; X1immb; op=0xB2; sfr8  {  op_andb(X1immb, sfr8); }
:ANDB X2immb, sfr8 is op=0xB9; X2immb; op=0xB2; sfr8  {  op_andb(X2immb, sfr8); }
:ANDB X1plusAb, sfr8 is op=0xBA & X1plusAb; op=0xB2; sfr8  {  op_andb(X1plusAb, sfr8); }
:ANDB X1plusR0b, sfr8 is op=0xBB & X1plusR0b; op=0xB2; sfr8  {  op_andb(X1plusR0b, sfr8); }
:ANDB PSWL, sfr8 is op=0x8A & PSWL; op=0xB2; sfr8  {  op_andb(PSWL, sfr8); }
:ANDB PSWH, sfr8 is op=0x9A & PSWH; op=0xB2; sfr8  {  op_andb(PSWH, sfr8); }
:ANDB n7b, sfr8 is op=0x9B; n7b; op=0xB2; sfr8  {  op_andb(n7b, sfr8); }
:ANDB reg8, #n8 is regop0=0xd & reg8; op=0xB3; n8  {  op_andb(reg8, n8:1); }
:ANDB X1indb, #n8 is op=0xB0 & X1indb; op=0xB3; n8  {  op_andb(X1indb, n8:1); }
:ANDB DPinddecb, #n8 is op=0xB1 & DPinddecb; op=0xB3; n8  {  op_andb(DPinddecb, n8:1); }
:ANDB DPindb, #n8 is op=0xB2 & DPindb; op=0xB3; n8  {  op_andb(DPindb, n8:1); }
:ANDB DPindincb, #n8 is op=0xB3 & DPindincb; op=0xB3; n8  {  op_andb(DPindincb, n8:1); }
:ANDB op1fix8, #n8 is op=0xB4; op1fix8; op=0xB3; n8  {  op_andb(op1fix8, n8:1); }
:ANDB op1off8, #n8 is op=0xB5; op1off8; op=0xB3; n8  {  op_andb(op1off8, n8:1); }
:ANDB op1sfr8, #n8 is op=0xB6; op1sfr8; op=0xB3; n8  {  op_andb(op1sfr8, n8:1); }
:ANDB op1n16b, #n8 is op=0xB7; op1n16b; op=0xB3; n8  {  op_andb(op1n16b, n8:1); }
:ANDB X1immb, #n8 is op=0xB8; X1immb; op=0xB3; n8  {  op_andb(X1immb, n8:1); }
:ANDB X2immb, #n8 is op=0xB9; X2immb; op=0xB3; n8  {  op_andb(X2immb, n8:1); }
:ANDB X1plusAb, #n8 is op=0xBA & X1plusAb; op=0xB3; n8  {  op_andb(X1plusAb, n8:1); }
:ANDB X1plusR0b, #n8 is op=0xBB & X1plusR0b; op=0xB3; n8  {  op_andb(X1plusR0b, n8:1); }
:ANDB PSWL, #n8 is op=0x8A & PSWL; op=0xB3; n8  {  op_andb(PSWL, n8:1); }
:ANDB PSWH, #n8 is op=0x9A & PSWH; op=0xB3; n8  {  op_andb(PSWH, n8:1); }
:ANDB n7b, #n8 is op=0x9B; n7b; op=0xB3; n8  {  op_andb(n7b, n8:1); }
:ANDB reg8, A8 is regop0=0xd & reg8; op=0xB4 & A8  {  op_andb(reg8, A8); }
:ANDB X1indb, A8 is op=0xB0 & X1indb; op=0xB4 & A8  {  op_andb(X1indb, A8); }
:ANDB DPinddecb, A8 is op=0xB1 & DPinddecb; op=0xB4 & A8  {  op_andb(DPinddecb, A8); }
:ANDB DPindb, A8 is op=0xB2 & DPindb; op=0xB4 & A8  {  op_andb(DPindb, A8); }
:ANDB DPindincb, A8 is op=0xB3 & DPindincb; op=0xB4 & A8  {  op_andb(DPindincb, A8); }
:ANDB op1fix8, A8 is op=0xB4; op1fix8; op=0xB4 & A8  {  op_andb(op1fix8, A8); }
:ANDB op1off8, A8 is op=0xB5; op1off8; op=0xB4 & A8  {  op_andb(op1off8, A8); }
:ANDB op1sfr8, A8 is op=0xB6; op1sfr8; op=0xB4 & A8  {  op_andb(op1sfr8, A8); }
:ANDB op1n16b, A8 is op=0xB7; op1n16b; op=0xB4 & A8  {  op_andb(op1n16b, A8); }
:ANDB X1immb, A8 is op=0xB8; X1immb; op=0xB4 & A8  {  op_andb(X1immb, A8); }
:ANDB X2immb, A8 is op=0xB9; X2immb; op=0xB4 & A8  {  op_andb(X2immb, A8); }
:ANDB X1plusAb, A8 is op=0xBA & X1plusAb; op=0xB4 & A8  {  op_andb(X1plusAb, A8); }
:ANDB X1plusR0b, A8 is op=0xBB & X1plusR0b; op=0xB4 & A8  {  op_andb(X1plusR0b, A8); }
:ANDB PSWL, A8 is op=0x8A & PSWL; op=0xB4 & A8  {  op_andb(PSWL, A8); }
:ANDB PSWH, A8 is op=0x9A & PSWH; op=0xB4 & A8  {  op_andb(PSWH, A8); }
:ANDB n7b, A8 is op=0x9B; n7b; op=0xB4 & A8  {  op_andb(n7b, A8); }
:BAND C, A8^"."^bit is op=0xBC; bitop0=8 & bit & C & A8  {  op_band(C, A8,bit); }
:BAND C, reg8^"."^bit is regop0=0xd & reg8; bitop0=8 & bit & C  {  op_band(C, reg8,bit); }
:BAND C, X1indb^"."^bit is op=0xB0 & X1indb; bitop0=8 & bit & C  {  op_band(C, X1indb,bit); }
:BAND C, DPinddecb^"."^bit is op=0xB1 & DPinddecb; bitop0=8 & bit & C  {  op_band(C, DPinddecb,bit); }
:BAND C, DPindb^"."^bit is op=0xB2 & DPindb; bitop0=8 & bit & C  {  op_band(C, DPindb,bit); }
:BAND C, DPindincb^"."^bit is op=0xB3 & DPindincb; bitop0=8 & bit & C  {  op_band(C, DPindincb,bit); }
:BAND C, op1fix8^"."^bit is op=0xB4; op1fix8; bitop0=8 & bit & C  {  op_band(C, op1fix8,bit); }
:BAND C, op1off8^"."^bit is op=0xB5; op1off8; bitop0=8 & bit & C  {  op_band(C, op1off8,bit); }
:BAND C, op1sfr8^"."^bit is op=0xB6; op1sfr8; bitop0=8 & bit & C  {  op_band(C, op1sfr8,bit); }
:BAND C, op1n16b^"."^bit is op=0xB7; op1n16b; bitop0=8 & bit & C  {  op_band(C, op1n16b,bit); }
:BAND C, X1immb^"."^bit is op=0xB8; X1immb; bitop0=8 & bit & C  {  op_band(C, X1immb,bit); }
:BAND C, X2immb^"."^bit is op=0xB9; X2immb; bitop0=8 & bit & C  {  op_band(C, X2immb,bit); }
:BAND C, X1plusAb^"."^bit is op=0xBA & X1plusAb; bitop0=8 & bit & C  {  op_band(C, X1plusAb,bit); }
:BAND C, X1plusR0b^"."^bit is op=0xBB & X1plusR0b; bitop0=8 & bit & C  {  op_band(C, X1plusR0b,bit); }
:BAND C, PSWL^"."^bit is op=0x8A & PSWL; bitop0=8 & bit & C  {  op_band(C, PSWL,bit); }
:BAND C, PSWH^"."^bit is op=0x9A & PSWH; bitop0=8 & bit & C  {  op_band(C, PSWH,bit); }
:BAND C, n7b^"."^bit is op=0x9B; n7b; bitop0=8 & bit & C  {  op_band(C, n7b,bit); }
:BANDN C, A8^"."^bit is op=0xBC; bitop0=9 & bit & C & A8  {  op_bandn(C, A8,bit); }
:BANDN C, reg8^"."^bit is regop0=0xd & reg8; bitop0=9 & bit & C  {  op_bandn(C, reg8,bit); }
:BANDN C, X1indb^"."^bit is op=0xB0 & X1indb; bitop0=9 & bit & C  {  op_bandn(C, X1indb,bit); }
:BANDN C, DPinddecb^"."^bit is op=0xB1 & DPinddecb; bitop0=9 & bit & C  {  op_bandn(C, DPinddecb,bit); }
:BANDN C, DPindb^"."^bit is op=0xB2 & DPindb; bitop0=9 & bit & C  {  op_bandn(C, DPindb,bit); }
:BANDN C, DPindincb^"."^bit is op=0xB3 & DPindincb; bitop0=9 & bit & C  {  op_bandn(C, DPindincb,bit); }
:BANDN C, op1fix8^"."^bit is op=0xB4; op1fix8; bitop0=9 & bit & C  {  op_bandn(C, op1fix8,bit); }
:BANDN C, op1off8^"."^bit is op=0xB5; op1off8; bitop0=9 & bit & C  {  op_bandn(C, op1off8,bit); }
:BANDN C, op1sfr8^"."^bit is op=0xB6; op1sfr8; bitop0=9 & bit & C  {  op_bandn(C, op1sfr8,bit); }
:BANDN C, op1n16b^"."^bit is op=0xB7; op1n16b; bitop0=9 & bit & C  {  op_bandn(C, op1n16b,bit); }
:BANDN C, X1immb^"."^bit is op=0xB8; X1immb; bitop0=9 & bit & C  {  op_bandn(C, X1immb,bit); }
:BANDN C, X2immb^"."^bit is op=0xB9; X2immb; bitop0=9 & bit & C  {  op_bandn(C, X2immb,bit); }
:BANDN C, X1plusAb^"."^bit is op=0xBA & X1plusAb; bitop0=9 & bit & C  {  op_bandn(C, X1plusAb,bit); }
:BANDN C, X1plusR0b^"."^bit is op=0xBB & X1plusR0b; bitop0=9 & bit & C  {  op_bandn(C, X1plusR0b,bit); }
:BANDN C, PSWL^"."^bit is op=0x8A & PSWL; bitop0=9 & bit & C  {  op_bandn(C, PSWL,bit); }
:BANDN C, PSWH^"."^bit is op=0x9A & PSWH; bitop0=9 & bit & C  {  op_bandn(C, PSWH,bit); }
:BANDN C, n7b^"."^bit is op=0x9B; n7b; bitop0=9 & bit & C  {  op_bandn(C, n7b,bit); }
:BOR C, A8^"."^bit is op=0xBC; bitop0=10 & bit & C & A8  {  op_bor(C, A8,bit); }
:BOR C, reg8^"."^bit is regop0=0xd & reg8; bitop0=10 & bit & C  {  op_bor(C, reg8,bit); }
:BOR C, X1indb^"."^bit is op=0xB0 & X1indb; bitop0=10 & bit & C  {  op_bor(C, X1indb,bit); }
:BOR C, DPinddecb^"."^bit is op=0xB1 & DPinddecb; bitop0=10 & bit & C  {  op_bor(C, DPinddecb,bit); }
:BOR C, DPindb^"."^bit is op=0xB2 & DPindb; bitop0=10 & bit & C  {  op_bor(C, DPindb,bit); }
:BOR C, DPindincb^"."^bit is op=0xB3 & DPindincb; bitop0=10 & bit & C  {  op_bor(C, DPindincb,bit); }
:BOR C, op1fix8^"."^bit is op=0xB4; op1fix8; bitop0=10 & bit & C  {  op_bor(C, op1fix8,bit); }
:BOR C, op1off8^"."^bit is op=0xB5; op1off8; bitop0=10 & bit & C  {  op_bor(C, op1off8,bit); }
:BOR C, op1sfr8^"."^bit is op=0xB6; op1sfr8; bitop0=10 & bit & C  {  op_bor(C, op1sfr8,bit); }
:BOR C, op1n16b^"."^bit is op=0xB7; op1n16b; bitop0=10 & bit & C  {  op_bor(C, op1n16b,bit); }
:BOR C, X1immb^"."^bit is op=0xB8; X1immb; bitop0=10 & bit & C  {  op_bor(C, X1immb,bit); }
:BOR C, X2immb^"."^bit is op=0xB9; X2immb; bitop0=10 & bit & C  {  op_bor(C, X2immb,bit); }
:BOR C, X1plusAb^"."^bit is op=0xBA & X1plusAb; bitop0=10 & bit & C  {  op_bor(C, X1plusAb,bit); }
:BOR C, X1plusR0b^"."^bit is op=0xBB & X1plusR0b; bitop0=10 & bit & C  {  op_bor(C, X1plusR0b,bit); }
:BOR C, PSWL^"."^bit is op=0x8A & PSWL; bitop0=10 & bit & C  {  op_bor(C, PSWL,bit); }
:BOR C, PSWH^"."^bit is op=0x9A & PSWH; bitop0=10 & bit & C  {  op_bor(C, PSWH,bit); }
:BOR C, n7b^"."^bit is op=0x9B; n7b; bitop0=10 & bit & C  {  op_bor(C, n7b,bit); }
:BORN C, A8^"."^bit is op=0xBC; bitop0=11 & bit & C & A8  {  op_born(C, A8,bit); }
:BORN C, reg8^"."^bit is regop0=0xd & reg8; bitop0=11 & bit & C  {  op_born(C, reg8,bit); }
:BORN C, X1indb^"."^bit is op=0xB0 & X1indb; bitop0=11 & bit & C  {  op_born(C, X1indb,bit); }
:BORN C, DPinddecb^"."^bit is op=0xB1 & DPinddecb; bitop0=11 & bit & C  {  op_born(C, DPinddecb,bit); }
:BORN C, DPindb^"."^bit is op=0xB2 & DPindb; bitop0=11 & bit & C  {  op_born(C, DPindb,bit); }
:BORN C, DPindincb^"."^bit is op=0xB3 & DPindincb; bitop0=11 & bit & C  {  op_born(C, DPindincb,bit); }
:BORN C, op1fix8^"."^bit is op=0xB4; op1fix8; bitop0=11 & bit & C  {  op_born(C, op1fix8,bit); }
:BORN C, op1off8^"."^bit is op=0xB5; op1off8; bitop0=11 & bit & C  {  op_born(C, op1off8,bit); }
:BORN C, op1sfr8^"."^bit is op=0xB6; op1sfr8; bitop0=11 & bit & C  {  op_born(C, op1sfr8,bit); }
:BORN C, op1n16b^"."^bit is op=0xB7; op1n16b; bitop0=11 & bit & C  {  op_born(C, op1n16b,bit); }
:BORN C, X1immb^"."^bit is op=0xB8; X1immb; bitop0=11 & bit & C  {  op_born(C, X1immb,bit); }
:BORN C, X2immb^"."^bit is op=0xB9; X2immb; bitop0=11 & bit & C  {  op_born(C, X2immb,bit); }
:BORN C, X1plusAb^"."^bit is op=0xBA & X1plusAb; bitop0=11 & bit & C  {  op_born(C, X1plusAb,bit); }
:BORN C, X1plusR0b^"."^bit is op=0xBB & X1plusR0b; bitop0=11 & bit & C  {  op_born(C, X1plusR0b,bit); }
:BORN C, PSWL^"."^bit is op=0x8A & PSWL; bitop0=11 & bit & C  {  op_born(C, PSWL,bit); }
:BORN C, PSWH^"."^bit is op=0x9A & PSWH; bitop0=11 & bit & C  {  op_born(C, PSWH,bit); }
:BORN C, n7b^"."^bit is op=0x9B; n7b; bitop0=11 & bit & C  {  op_born(C, n7b,bit); }
:BXOR C, A8^"."^bit is op=0xBC; bitop0=12 & bit & C & A8  {  op_bxor(C, A8,bit); }
:BXOR C, reg8^"."^bit is regop0=0xd & reg8; bitop0=12 & bit & C  {  op_bxor(C, reg8,bit); }
:BXOR C, X1indb^"."^bit is op=0xB0 & X1indb; bitop0=12 & bit & C  {  op_bxor(C, X1indb,bit); }
:BXOR C, DPinddecb^"."^bit is op=0xB1 & DPinddecb; bitop0=12 & bit & C  {  op_bxor(C, DPinddecb,bit); }
:BXOR C, DPindb^"."^bit is op=0xB2 & DPindb; bitop0=12 & bit & C  {  op_bxor(C, DPindb,bit); }
:BXOR C, DPindincb^"."^bit is op=0xB3 & DPindincb; bitop0=12 & bit & C  {  op_bxor(C, DPindincb,bit); }
:BXOR C, op1fix8^"."^bit is op=0xB4; op1fix8; bitop0=12 & bit & C  {  op_bxor(C, op1fix8,bit); }
:BXOR C, op1off8^"."^bit is op=0xB5; op1off8; bitop0=12 & bit & C  {  op_bxor(C, op1off8,bit); }
:BXOR C, op1sfr8^"."^bit is op=0xB6; op1sfr8; bitop0=12 & bit & C  {  op_bxor(C, op1sfr8,bit); }
:BXOR C, op1n16b^"."^bit is op=0xB7; op1n16b; bitop0=12 & bit & C  {  op_bxor(C, op1n16b,bit); }
:BXOR C, X1immb^"."^bit is op=0xB8; X1immb; bitop0=12 & bit & C  {  op_bxor(C, X1immb,bit); }
:BXOR C, X2immb^"."^bit is op=0xB9; X2immb; bitop0=12 & bit & C  {  op_bxor(C, X2immb,bit); }
:BXOR C, X1plusAb^"."^bit is op=0xBA & X1plusAb; bitop0=12 & bit & C  {  op_bxor(C, X1plusAb,bit); }
:BXOR C, X1plusR0b^"."^bit is op=0xBB & X1plusR0b; bitop0=12 & bit & C  {  op_bxor(C, X1plusR0b,bit); }
:BXOR C, PSWL^"."^bit is op=0x8A & PSWL; bitop0=12 & bit & C  {  op_bxor(C, PSWL,bit); }
:BXOR C, PSWH^"."^bit is op=0x9A & PSWH; bitop0=12 & bit & C  {  op_bxor(C, PSWH,bit); }
:BXOR C, n7b^"."^bit is op=0x9B; n7b; bitop0=12 & bit & C  {  op_bxor(C, n7b,bit); }
:BRK  is op=0xFF [ dd=0; globalset(inst_next, dd); ] {  op_brk(); }
:CAL Cadr is op=0xFE; Cadr  {  op_cal(Cadr); }
:CAL A16indw is op=0xBC; op=0xEB & A16indw  {  op_cal(A16indw); }
:CAL [reg16] is regop0=0xc & reg16; op=0xEB  { local tmp_reg16 = *[ram]:2 reg16:2; op_cal(tmp_reg16); }
:CAL [X1indw] is op=0xA0 & X1indw; op=0xEB  { local tmp_X1indw = *[ram]:2 X1indw:2; op_cal(tmp_X1indw); }
:CAL [DPinddecw] is op=0xA1 & DPinddecw; op=0xEB  { local tmp_DPinddecw = *[ram]:2 DPinddecw:2; op_cal(tmp_DPinddecw); }
:CAL [DPindw] is op=0xA2 & DPindw; op=0xEB  { local tmp_DPindw = *[ram]:2 DPindw:2; op_cal(tmp_DPindw); }
:CAL [DPindincw] is op=0xA3 & DPindincw; op=0xEB  { local tmp_DPindincw = *[ram]:2 DPindincw:2; op_cal(tmp_DPindincw); }
:CAL [op1fix16] is op=0xA4; op1fix16; op=0xEB  { local tmp_op1fix16 = *[ram]:2 op1fix16:2; op_cal(tmp_op1fix16); }
:CAL [op1off16] is op=0xA5; op1off16; op=0xEB  { local tmp_op1off16 = *[ram]:2 op1off16:2; op_cal(tmp_op1off16); }
:CAL [op1sfr16] is op=0xA6; op1sfr16; op=0xEB  { local tmp_op1sfr16 = *[ram]:2 op1sfr16:2; op_cal(tmp_op1sfr16); }
:CAL [op1n16w] is op=0xA7; op1n16w; op=0xEB  { local tmp_op1n16w = *[ram]:2 op1n16w:2; op_cal(tmp_op1n16w); }
:CAL [X1immw] is op=0xA8; X1immw; op=0xEB  { local tmp_X1immw = *[ram]:2 X1immw:2; op_cal(tmp_X1immw); }
:CAL [X2immw] is op=0xA9; X2immw; op=0xEB  { local tmp_X2immw = *[ram]:2 X2immw:2; op_cal(tmp_X2immw); }
:CAL [X1plusAw] is op=0xAA & X1plusAw; op=0xEB  { local tmp_X1plusAw = *[ram]:2 X1plusAw:2; op_cal(tmp_X1plusAw); }
:CAL [X1plusR0w] is op=0xAB & X1plusR0w; op=0xEB  { local tmp_X1plusR0w = *[ram]:2 X1plusR0w:2; op_cal(tmp_X1plusR0w); }
:CAL [n7w] is op=0x8B; n7w; op=0xEB  { local tmp_n7w = *[ram]:2 n7w:2; op_cal(tmp_n7w); }
:CLR A16 is op=0xFA & A16 [ dd=1; globalset(inst_next, dd); ] {  op_clr(A16); }
:CLR reg16 is regop0=0xc & reg16; op=0xC7  {  op_clr(reg16); }
:CLR X1indw is op=0xA0 & X1indw; op=0xC7  {  op_clr(X1indw); }
:CLR DPinddecw is op=0xA1 & DPinddecw; op=0xC7  {  op_clr(DPinddecw); }
:CLR DPindw is op=0xA2 & DPindw; op=0xC7  {  op_clr(DPindw); }
:CLR DPindincw is op=0xA3 & DPindincw; op=0xC7  {  op_clr(DPindincw); }
:CLR op1fix16 is op=0xA4; op1fix16; op=0xC7  {  op_clr(op1fix16); }
:CLR op1off16 is op=0xA5; op1off16; op=0xC7  {  op_clr(op1off16); }
:CLR op1sfr16 is op=0xA6; op1sfr16; op=0xC7  {  op_clr(op1sfr16); }
:CLR op1n16w is op=0xA7; op1n16w; op=0xC7  {  op_clr(op1n16w); }
:CLR X1immw is op=0xA8; X1immw; op=0xC7  {  op_clr(X1immw); }
:CLR X2immw is op=0xA9; X2immw; op=0xC7  {  op_clr(X2immw); }
:CLR X1plusAw is op=0xAA & X1plusAw; op=0xC7  {  op_clr(X1plusAw); }
:CLR X1plusR0w is op=0xAB & X1plusR0w; op=0xC7  {  op_clr(X1plusR0w); }
:CLR n7w is op=0x8B; n7w; op=0xC7  {  op_clr(n7w); }
:CLRB A8 is op=0xFB & A8 [ dd=0; globalset(inst_next, dd); ] {  op_clrb(A8); }
:CLRB reg8 is regop0=0xd & reg8; op=0xC7  {  op_clrb(reg8); }
:CLRB X1indb is op=0xB0 & X1indb; op=0xC7  {  op_clrb(X1indb); }
:CLRB DPinddecb is op=0xB1 & DPinddecb; op=0xC7  {  op_clrb(DPinddecb); }
:CLRB DPindb is op=0xB2 & DPindb; op=0xC7  {  op_clrb(DPindb); }
:CLRB DPindincb is op=0xB3 & DPindincb; op=0xC7  {  op_clrb(DPindincb); }
:CLRB op1fix8 is op=0xB4; op1fix8; op=0xC7  {  op_clrb(op1fix8); }
:CLRB op1off8 is op=0xB5; op1off8; op=0xC7  {  op_clrb(op1off8); }
:CLRB op1sfr8 is op=0xB6; op1sfr8; op=0xC7  {  op_clrb(op1sfr8); }
:CLRB op1n16b is op=0xB7; op1n16b; op=0xC7  {  op_clrb(op1n16b); }
:CLRB X1immb is op=0xB8; X1immb; op=0xC7  {  op_clrb(X1immb); }
:CLRB X2immb is op=0xB9; X2immb; op=0xC7  {  op_clrb(X2immb); }
:CLRB X1plusAb is op=0xBA & X1plusAb; op=0xC7  {  op_clrb(X1plusAb); }
:CLRB X1plusR0b is op=0xBB & X1plusR0b; op=0xC7  {  op_clrb(X1plusR0b); }
:CLRB PSWL is op=0x8A & PSWL; op=0xC7  {  op_clrb(PSWL); }
:CLRB PSWH is op=0x9A & PSWH; op=0xC7  {  op_clrb(PSWH); }
:CLRB n7b is op=0x9B; n7b; op=0xC7  {  op_clrb(n7b); }
:CMP A16, ERn is dd=1 & hregop0=6 & ERn & A16  {  op_cmp(A16, ERn); }
:CMP A16, PRn is dd=1 & hregop0=7 & PRn & A16  {  op_cmp(A16, PRn); }
:CMP A16, #n16 is dd=1 & op=0x9E; n16 & A16  {  op_cmp(A16, n16:2); }
:CMP A16, fix16 is dd=1 & op=0x9C; fix16 & A16  {  op_cmp(A16, fix16); }
:CMP A16, off16 is dd=1 & op=0x9D; off16 & A16  {  op_cmp(A16, off16); }
:CMP A16, reg16 is regop0=0xc & reg16; op=0x95 & A16  {  op_cmp(A16, reg16); }
:CMP A16, X1indw is op=0xA0 & X1indw; op=0x95 & A16  {  op_cmp(A16, X1indw); }
:CMP A16, DPinddecw is op=0xA1 & DPinddecw; op=0x95 & A16  {  op_cmp(A16, DPinddecw); }
:CMP A16, DPindw is op=0xA2 & DPindw; op=0x95 & A16  {  op_cmp(A16, DPindw); }
:CMP A16, DPindincw is op=0xA3 & DPindincw; op=0x95 & A16  {  op_cmp(A16, DPindincw); }
:CMP A16, op1fix16 is op=0xA4; op1fix16; op=0x95 & A16  {  op_cmp(A16, op1fix16); }
:CMP A16, op1off16 is op=0xA5; op1off16; op=0x95 & A16  {  op_cmp(A16, op1off16); }
:CMP A16, op1sfr16 is op=0xA6; op1sfr16; op=0x95 & A16  {  op_cmp(A16, op1sfr16); }
:CMP A16, op1n16w is op=0xA7; op1n16w; op=0x95 & A16  {  op_cmp(A16, op1n16w); }
:CMP A16, X1immw is op=0xA8; X1immw; op=0x95 & A16  {  op_cmp(A16, X1immw); }
:CMP A16, X2immw is op=0xA9; X2immw; op=0x95 & A16  {  op_cmp(A16, X2immw); }
:CMP A16, X1plusAw is op=0xAA & X1plusAw; op=0x95 & A16  {  op_cmp(A16, X1plusAw); }
:CMP A16, X1plusR0w is op=0xAB & X1plusR0w; op=0x95 & A16  {  op_cmp(A16, X1plusR0w); }
:CMP A16, n7w is op=0x8B; n7w; op=0x95 & A16  {  op_cmp(A16, n7w); }
:CMP fix16, #n16 is op=0xC4; fix16; n16  {  op_cmp(fix16, n16:2); }
:CMP off16, #n16 is op=0xC5; off16; n16  {  op_cmp(off16, n16:2); }
:CMP reg16, fix16 is regop0=0xc & reg16; op=0x90; fix16  {  op_cmp(reg16, fix16); }
:CMP X1indw, fix16 is op=0xA0 & X1indw; op=0x90; fix16  {  op_cmp(X1indw, fix16); }
:CMP DPinddecw, fix16 is op=0xA1 & DPinddecw; op=0x90; fix16  {  op_cmp(DPinddecw, fix16); }
:CMP DPindw, fix16 is op=0xA2 & DPindw; op=0x90; fix16  {  op_cmp(DPindw, fix16); }
:CMP DPindincw, fix16 is op=0xA3 & DPindincw; op=0x90; fix16  {  op_cmp(DPindincw, fix16); }
:CMP op1fix16, fix16 is op=0xA4; op1fix16; op=0x90; fix16  {  op_cmp(op1fix16, fix16); }
:CMP op1off16, fix16 is op=0xA5; op1off16; op=0x90; fix16  {  op_cmp(op1off16, fix16); }
:CMP op1sfr16, fix16 is op=0xA6; op1sfr16; op=0x90; fix16  {  op_cmp(op1sfr16, fix16); }
:CMP op1n16w, fix16 is op=0xA7; op1n16w; op=0x90; fix16  {  op_cmp(op1n16w, fix16); }
:CMP X1immw, fix16 is op=0xA8; X1immw; op=0x90; fix16  {  op_cmp(X1immw, fix16); }
:CMP X2immw, fix16 is op=0xA9; X2immw; op=0x90; fix16  {  op_cmp(X2immw, fix16); }
:CMP X1plusAw, fix16 is op=0xAA & X1plusAw; op=0x90; fix16  {  op_cmp(X1plusAw, fix16); }
:CMP X1plusR0w, fix16 is op=0xAB & X1plusR0w; op=0x90; fix16  {  op_cmp(X1plusR0w, fix16); }
:CMP n7w, fix16 is op=0x8B; n7w; op=0x90; fix16  {  op_cmp(n7w, fix16); }
:CMP reg16, off16 is regop0=0xc & reg16; op=0x91; off16  {  op_cmp(reg16, off16); }
:CMP X1indw, off16 is op=0xA0 & X1indw; op=0x91; off16  {  op_cmp(X1indw, off16); }
:CMP DPinddecw, off16 is op=0xA1 & DPinddecw; op=0x91; off16  {  op_cmp(DPinddecw, off16); }
:CMP DPindw, off16 is op=0xA2 & DPindw; op=0x91; off16  {  op_cmp(DPindw, off16); }
:CMP DPindincw, off16 is op=0xA3 & DPindincw; op=0x91; off16  {  op_cmp(DPindincw, off16); }
:CMP op1fix16, off16 is op=0xA4; op1fix16; op=0x91; off16  {  op_cmp(op1fix16, off16); }
:CMP op1off16, off16 is op=0xA5; op1off16; op=0x91; off16  {  op_cmp(op1off16, off16); }
:CMP op1sfr16, off16 is op=0xA6; op1sfr16; op=0x91; off16  {  op_cmp(op1sfr16, off16); }
:CMP op1n16w, off16 is op=0xA7; op1n16w; op=0x91; off16  {  op_cmp(op1n16w, off16); }
:CMP X1immw, off16 is op=0xA8; X1immw; op=0x91; off16  {  op_cmp(X1immw, off16); }
:CMP X2immw, off16 is op=0xA9; X2immw; op=0x91; off16  {  op_cmp(X2immw, off16); }
:CMP X1plusAw, off16 is op=0xAA & X1plusAw; op=0x91; off16  {  op_cmp(X1plusAw, off16); }
:CMP X1plusR0w, off16 is op=0xAB & X1plusR0w; op=0x91; off16  {  op_cmp(X1plusR0w, off16); }
:CMP n7w, off16 is op=0x8B; n7w; op=0x91; off16  {  op_cmp(n7w, off16); }
:CMP reg16, sfr16 is regop0=0xc & reg16; op=0x92; sfr16  {  op_cmp(reg16, sfr16); }
:CMP X1indw, sfr16 is op=0xA0 & X1indw; op=0x92; sfr16  {  op_cmp(X1indw, sfr16); }
:CMP DPinddecw, sfr16 is op=0xA1 & DPinddecw; op=0x92; sfr16  {  op_cmp(DPinddecw, sfr16); }
:CMP DPindw, sfr16 is op=0xA2 & DPindw; op=0x92; sfr16  {  op_cmp(DPindw, sfr16); }
:CMP DPindincw, sfr16 is op=0xA3 & DPindincw; op=0x92; sfr16  {  op_cmp(DPindincw, sfr16); }
:CMP op1fix16, sfr16 is op=0xA4; op1fix16; op=0x92; sfr16  {  op_cmp(op1fix16, sfr16); }
:CMP op1off16, sfr16 is op=0xA5; op1off16; op=0x92; sfr16  {  op_cmp(op1off16, sfr16); }
:CMP op1sfr16, sfr16 is op=0xA6; op1sfr16; op=0x92; sfr16  {  op_cmp(op1sfr16, sfr16); }
:CMP op1n16w, sfr16 is op=0xA7; op1n16w; op=0x92; sfr16  {  op_cmp(op1n16w, sfr16); }
:CMP X1immw, sfr16 is op=0xA8; X1immw; op=0x92; sfr16  {  op_cmp(X1immw, sfr16); }
:CMP X2immw, sfr16 is op=0xA9; X2immw; op=0x92; sfr16  {  op_cmp(X2immw, sfr16); }
:CMP X1plusAw, sfr16 is op=0xAA & X1plusAw; op=0x92; sfr16  {  op_cmp(X1plusAw, sfr16); }
:CMP X1plusR0w, sfr16 is op=0xAB & X1plusR0w; op=0x92; sfr16  {  op_cmp(X1plusR0w, sfr16); }
:CMP n7w, sfr16 is op=0x8B; n7w; op=0x92; sfr16  {  op_cmp(n7w, sfr16); }
:CMP reg16, #n16 is regop0=0xc & reg16; op=0x93; n16  {  op_cmp(reg16, n16:2); }
:CMP X1indw, #n16 is op=0xA0 & X1indw; op=0x93; n16  {  op_cmp(X1indw, n16:2); }
:CMP DPinddecw, #n16 is op=0xA1 & DPinddecw; op=0x93; n16  {  op_cmp(DPinddecw, n16:2); }
:CMP DPindw, #n16 is op=0xA2 & DPindw; op=0x93; n16  {  op_cmp(DPindw, n16:2); }
:CMP DPindincw, #n16 is op=0xA3 & DPindincw; op=0x93; n16  {  op_cmp(DPindincw, n16:2); }
:CMP op1fix16, #n16 is op=0xA4; op1fix16; op=0x93; n16  {  op_cmp(op1fix16, n16:2); }
:CMP op1off16, #n16 is op=0xA5; op1off16; op=0x93; n16  {  op_cmp(op1off16, n16:2); }
:CMP op1sfr16, #n16 is op=0xA6; op1sfr16; op=0x93; n16  {  op_cmp(op1sfr16, n16:2); }
:CMP op1n16w, #n16 is op=0xA7; op1n16w; op=0x93; n16  {  op_cmp(op1n16w, n16:2); }
:CMP X1immw, #n16 is op=0xA8; X1immw; op=0x93; n16  {  op_cmp(X1immw, n16:2); }
:CMP X2immw, #n16 is op=0xA9; X2immw; op=0x93; n16  {  op_cmp(X2immw, n16:2); }
:CMP X1plusAw, #n16 is op=0xAA & X1plusAw; op=0x93; n16  {  op_cmp(X1plusAw, n16:2); }
:CMP X1plusR0w, #n16 is op=0xAB & X1plusR0w; op=0x93; n16  {  op_cmp(X1plusR0w, n16:2); }
:CMP n7w, #n16 is op=0x8B; n7w; op=0x93; n16  {  op_cmp(n7w, n16:2); }
:CMP reg16, A16 is regop0=0xc & reg16; op=0x94 & A16  {  op_cmp(reg16, A16); }
:CMP X1indw, A16 is op=0xA0 & X1indw; op=0x94 & A16  {  op_cmp(X1indw, A16); }
:CMP DPinddecw, A16 is op=0xA1 & DPinddecw; op=0x94 & A16  {  op_cmp(DPinddecw, A16); }
:CMP DPindw, A16 is op=0xA2 & DPindw; op=0x94 & A16  {  op_cmp(DPindw, A16); }
:CMP DPindincw, A16 is op=0xA3 & DPindincw; op=0x94 & A16  {  op_cmp(DPindincw, A16); }
:CMP op1fix16, A16 is op=0xA4; op1fix16; op=0x94 & A16  {  op_cmp(op1fix16, A16); }
:CMP op1off16, A16 is op=0xA5; op1off16; op=0x94 & A16  {  op_cmp(op1off16, A16); }
:CMP op1sfr16, A16 is op=0xA6; op1sfr16; op=0x94 & A16  {  op_cmp(op1sfr16, A16); }
:CMP op1n16w, A16 is op=0xA7; op1n16w; op=0x94 & A16  {  op_cmp(op1n16w, A16); }
:CMP X1immw, A16 is op=0xA8; X1immw; op=0x94 & A16  {  op_cmp(X1immw, A16); }
:CMP X2immw, A16 is op=0xA9; X2immw; op=0x94 & A16  {  op_cmp(X2immw, A16); }
:CMP X1plusAw, A16 is op=0xAA & X1plusAw; op=0x94 & A16  {  op_cmp(X1plusAw, A16); }
:CMP X1plusR0w, A16 is op=0xAB & X1plusR0w; op=0x94 & A16  {  op_cmp(X1plusR0w, A16); }
:CMP n7w, A16 is op=0x8B; n7w; op=0x94 & A16  {  op_cmp(n7w, A16); }
:CMPB A8, Rn is dd=0 & regop0=3 & Rn & A8  {  op_cmpb(A8, Rn); }
:CMPB A8, #n8 is dd=0 & op=0x9E; n8 & A8  {  op_cmpb(A8, n8:1); }
:CMPB A8, fix8 is dd=0 & op=0x9C; fix8 & A8  {  op_cmpb(A8, fix8); }
:CMPB A8, off8 is dd=0 & op=0x9D; off8 & A8  {  op_cmpb(A8, off8); }
:CMPB A8, reg8 is regop0=0xd & reg8; op=0x95 & A8  {  op_cmpb(A8, reg8); }
:CMPB A8, X1indb is op=0xB0 & X1indb; op=0x95 & A8  {  op_cmpb(A8, X1indb); }
:CMPB A8, DPinddecb is op=0xB1 & DPinddecb; op=0x95 & A8  {  op_cmpb(A8, DPinddecb); }
:CMPB A8, DPindb is op=0xB2 & DPindb; op=0x95 & A8  {  op_cmpb(A8, DPindb); }
:CMPB A8, DPindincb is op=0xB3 & DPindincb; op=0x95 & A8  {  op_cmpb(A8, DPindincb); }
:CMPB A8, op1fix8 is op=0xB4; op1fix8; op=0x95 & A8  {  op_cmpb(A8, op1fix8); }
:CMPB A8, op1off8 is op=0xB5; op1off8; op=0x95 & A8  {  op_cmpb(A8, op1off8); }
:CMPB A8, op1sfr8 is op=0xB6; op1sfr8; op=0x95 & A8  {  op_cmpb(A8, op1sfr8); }
:CMPB A8, op1n16b is op=0xB7; op1n16b; op=0x95 & A8  {  op_cmpb(A8, op1n16b); }
:CMPB A8, X1immb is op=0xB8; X1immb; op=0x95 & A8  {  op_cmpb(A8, X1immb); }
:CMPB A8, X2immb is op=0xB9; X2immb; op=0x95 & A8  {  op_cmpb(A8, X2immb); }
:CMPB A8, X1plusAb is op=0xBA & X1plusAb; op=0x95 & A8  {  op_cmpb(A8, X1plusAb); }
:CMPB A8, X1plusR0b is op=0xBB & X1plusR0b; op=0x95 & A8  {  op_cmpb(A8, X1plusR0b); }
:CMPB A8, PSWL is op=0x8A & PSWL; op=0x95 & A8  {  op_cmpb(A8, PSWL); }
:CMPB A8, PSWH is op=0x9A & PSWH; op=0x95 & A8  {  op_cmpb(A8, PSWH); }
:CMPB A8, n7b is op=0x9B; n7b; op=0x95 & A8  {  op_cmpb(A8, n7b); }
:CMPB fix8, #n8 is op=0xD4; fix8; n8  {  op_cmpb(fix8, n8:1); }
:CMPB off8, #n8 is op=0xD5; off8; n8  {  op_cmpb(off8, n8:1); }
:CMPB reg8, fix8 is regop0=0xd & reg8; op=0x90; fix8  {  op_cmpb(reg8, fix8); }
:CMPB X1indb, fix8 is op=0xB0 & X1indb; op=0x90; fix8  {  op_cmpb(X1indb, fix8); }
:CMPB DPinddecb, fix8 is op=0xB1 & DPinddecb; op=0x90; fix8  {  op_cmpb(DPinddecb, fix8); }
:CMPB DPindb, fix8 is op=0xB2 & DPindb; op=0x90; fix8  {  op_cmpb(DPindb, fix8); }
:CMPB DPindincb, fix8 is op=0xB3 & DPindincb; op=0x90; fix8  {  op_cmpb(DPindincb, fix8); }
:CMPB op1fix8, fix8 is op=0xB4; op1fix8; op=0x90; fix8  {  op_cmpb(op1fix8, fix8); }
:CMPB op1off8, fix8 is op=0xB5; op1off8; op=0x90; fix8  {  op_cmpb(op1off8, fix8); }
:CMPB op1sfr8, fix8 is op=0xB6; op1sfr8; op=0x90; fix8  {  op_cmpb(op1sfr8, fix8); }
:CMPB op1n16b, fix8 is op=0xB7; op1n16b; op=0x90; fix8  {  op_cmpb(op1n16b, fix8); }
:CMPB X1immb, fix8 is op=0xB8; X1immb; op=0x90; fix8  {  op_cmpb(X1immb, fix8); }
:CMPB X2immb, fix8 is op=0xB9; X2immb; op=0x90; fix8  {  op_cmpb(X2immb, fix8); }
:CMPB X1plusAb, fix8 is op=0xBA & X1plusAb; op=0x90; fix8  {  op_cmpb(X1plusAb, fix8); }
:CMPB X1plusR0b, fix8 is op=0xBB & X1plusR0b; op=0x90; fix8  {  op_cmpb(X1plusR0b, fix8); }
:CMPB PSWL, fix8 is op=0x8A & PSWL; op=0x90; fix8  {  op_cmpb(PSWL, fix8); }
:CMPB PSWH, fix8 is op=0x9A & PSWH; op=0x90; fix8  {  op_cmpb(PSWH, fix8); }
:CMPB n7b, fix8 is op=0x9B; n7b; op=0x90; fix8  {  op_cmpb(n7b, fix8); }
:CMPB reg8, off8 is regop0=0xd & reg8; op=0x91; off8  {  op_cmpb(reg8, off8); }
:CMPB X1indb, off8 is op=0xB0 & X1indb; op=0x91; off8  {  op_cmpb(X1indb, off8); }
:CMPB DPinddecb, off8 is op=0xB1 & DPinddecb; op=0x91; off8  {  op_cmpb(DPinddecb, off8); }
:CMPB DPindb, off8 is op=0xB2 & DPindb; op=0x91; off8  {  op_cmpb(DPindb, off8); }
:CMPB DPindincb, off8 is op=0xB3 & DPindincb; op=0x91; off8  {  op_cmpb(DPindincb, off8); }
:CMPB op1fix8, off8 is op=0xB4; op1fix8; op=0x91; off8  {  op_cmpb(op1fix8, off8); }
:CMPB op1off8, off8 is op=0xB5; op1off8; op=0x91; off8  {  op_cmpb(op1off8, off8); }
:CMPB op1sfr8, off8 is op=0xB6; op1sfr8; op=0x91; off8  {  op_cmpb(op1sfr8, off8); }
:CMPB op1n16b, off8 is op=0xB7; op1n16b; op=0x91; off8  {  op_cmpb(op1n16b, off8); }
:CMPB X1immb, off8 is op=0xB8; X1immb; op=0x91; off8  {  op_cmpb(X1immb, off8); }
:CMPB X2immb, off8 is op=0xB9; X2immb; op=0x91; off8  {  op_cmpb(X2immb, off8); }
:CMPB X1plusAb, off8 is op=0xBA & X1plusAb; op=0x91; off8  {  op_cmpb(X1plusAb, off8); }
:CMPB X1plusR0b, off8 is op=0xBB & X1plusR0b; op=0x91; off8  {  op_cmpb(X1plusR0b, off8); }
:CMPB PSWL, off8 is op=0x8A & PSWL; op=0x91; off8  {  op_cmpb(PSWL, off8); }
:CMPB PSWH, off8 is op=0x9A & PSWH; op=0x91; off8  {  op_cmpb(PSWH, off8); }
:CMPB n7b, off8 is op=0x9B; n7b; op=0x91; off8  {  op_cmpb(n7b, off8); }
:CMPB reg8, sfr8 is regop0=0xd & reg8; op=0x92; sfr8  {  op_cmpb(reg8, sfr8); }
:CMPB X1indb, sfr8 is op=0xB0 & X1indb; op=0x92; sfr8  {  op_cmpb(X1indb, sfr8); }
:CMPB DPinddecb, sfr8 is op=0xB1 & DPinddecb; op=0x92; sfr8  {  op_cmpb(DPinddecb, sfr8); }
:CMPB DPindb, sfr8 is op=0xB2 & DPindb; op=0x92; sfr8  {  op_cmpb(DPindb, sfr8); }
:CMPB DPindincb, sfr8 is op=0xB3 & DPindincb; op=0x92; sfr8  {  op_cmpb(DPindincb, sfr8); }
:CMPB op1fix8, sfr8 is op=0xB4; op1fix8; op=0x92; sfr8  {  op_cmpb(op1fix8, sfr8); }
:CMPB op1off8, sfr8 is op=0xB5; op1off8; op=0x92; sfr8  {  op_cmpb(op1off8, sfr8); }
:CMPB op1sfr8, sfr8 is op=0xB6; op1sfr8; op=0x92; sfr8  {  op_cmpb(op1sfr8, sfr8); }
:CMPB op1n16b, sfr8 is op=0xB7; op1n16b; op=0x92; sfr8  {  op_cmpb(op1n16b, sfr8); }
:CMPB X1immb, sfr8 is op=0xB8; X1immb; op=0x92; sfr8  {  op_cmpb(X1immb, sfr8); }
:CMPB X2immb, sfr8 is op=0xB9; X2immb; op=0x92; sfr8  {  op_cmpb(X2immb, sfr8); }
:CMPB X1plusAb, sfr8 is op=0xBA & X1plusAb; op=0x92; sfr8  {  op_cmpb(X1plusAb, sfr8); }
:CMPB X1plusR0b, sfr8 is op=0xBB & X1plusR0b; op=0x92; sfr8  {  op_cmpb(X1plusR0b, sfr8); }
:CMPB PSWL, sfr8 is op=0x8A & PSWL; op=0x92; sfr8  {  op_cmpb(PSWL, sfr8); }
:CMPB PSWH, sfr8 is op=0x9A & PSWH; op=0x92; sfr8  {  op_cmpb(PSWH, sfr8); }
:CMPB n7b, sfr8 is op=0x9B; n7b; op=0x92; sfr8  {  op_cmpb(n7b, sfr8); }
:CMPB reg8, #n8 is regop0=0xd & reg8; op=0x93; n8  {  op_cmpb(reg8, n8:1); }
:CMPB X1indb, #n8 is op=0xB0 & X1indb; op=0x93; n8  {  op_cmpb(X1indb, n8:1); }
:CMPB DPinddecb, #n8 is op=0xB1 & DPinddecb; op=0x93; n8  {  op_cmpb(DPinddecb, n8:1); }
:CMPB DPindb, #n8 is op=0xB2 & DPindb; op=0x93; n8  {  op_cmpb(DPindb, n8:1); }
:CMPB DPindincb, #n8 is op=0xB3 & DPindincb; op=0x93; n8  {  op_cmpb(DPindincb, n8:1); }
:CMPB op1fix8, #n8 is op=0xB4; op1fix8; op=0x93; n8  {  op_cmpb(op1fix8, n8:1); }
:CMPB op1off8, #n8 is op=0xB5; op1off8; op=0x93; n8  {  op_cmpb(op1off8, n8:1); }
:CMPB op1sfr8, #n8 is op=0xB6; op1sfr8; op=0x93; n8  {  op_cmpb(op1sfr8, n8:1); }
:CMPB op1n16b, #n8 is op=0xB7; op1n16b; op=0x93; n8  {  op_cmpb(op1n16b, n8:1); }
:CMPB X1immb, #n8 is op=0xB8; X1immb; op=0x93; n8  {  op_cmpb(X1immb, n8:1); }
:CMPB X2immb, #n8 is op=0xB9; X2immb; op=0x93; n8  {  op_cmpb(X2immb, n8:1); }
:CMPB X1plusAb, #n8 is op=0xBA & X1plusAb; op=0x93; n8  {  op_cmpb(X1plusAb, n8:1); }
:CMPB X1plusR0b, #n8 is op=0xBB & X1plusR0b; op=0x93; n8  {  op_cmpb(X1plusR0b, n8:1); }
:CMPB PSWL, #n8 is op=0x8A & PSWL; op=0x93; n8  {  op_cmpb(PSWL, n8:1); }
:CMPB PSWH, #n8 is op=0x9A & PSWH; op=0x93; n8  {  op_cmpb(PSWH, n8:1); }
:CMPB n7b, #n8 is op=0x9B; n7b; op=0x93; n8  {  op_cmpb(n7b, n8:1); }
:CMPB reg8, A8 is regop0=0xd & reg8; op=0x94 & A8  {  op_cmpb(reg8, A8); }
:CMPB X1indb, A8 is op=0xB0 & X1indb; op=0x94 & A8  {  op_cmpb(X1indb, A8); }
:CMPB DPinddecb, A8 is op=0xB1 & DPinddecb; op=0x94 & A8  {  op_cmpb(DPinddecb, A8); }
:CMPB DPindb, A8 is op=0xB2 & DPindb; op=0x94 & A8  {  op_cmpb(DPindb, A8); }
:CMPB DPindincb, A8 is op=0xB3 & DPindincb; op=0x94 & A8  {  op_cmpb(DPindincb, A8); }
:CMPB op1fix8, A8 is op=0xB4; op1fix8; op=0x94 & A8  {  op_cmpb(op1fix8, A8); }
:CMPB op1off8, A8 is op=0xB5; op1off8; op=0x94 & A8  {  op_cmpb(op1off8, A8); }
:CMPB op1sfr8, A8 is op=0xB6; op1sfr8; op=0x94 & A8  {  op_cmpb(op1sfr8, A8); }
:CMPB op1n16b, A8 is op=0xB7; op1n16b; op=0x94 & A8  {  op_cmpb(op1n16b, A8); }
:CMPB X1immb, A8 is op=0xB8; X1immb; op=0x94 & A8  {  op_cmpb(X1immb, A8); }
:CMPB X2immb, A8 is op=0xB9; X2immb; op=0x94 & A8  {  op_cmpb(X2immb, A8); }
:CMPB X1plusAb, A8 is op=0xBA & X1plusAb; op=0x94 & A8  {  op_cmpb(X1plusAb, A8); }
:CMPB X1plusR0b, A8 is op=0xBB & X1plusR0b; op=0x94 & A8  {  op_cmpb(X1plusR0b, A8); }
:CMPB PSWL, A8 is op=0x8A & PSWL; op=0x94 & A8  {  op_cmpb(PSWL, A8); }
:CMPB PSWH, A8 is op=0x9A & PSWH; op=0x94 & A8  {  op_cmpb(PSWH, A8); }
:CMPB n7b, A8 is op=0x9B; n7b; op=0x94 & A8  {  op_cmpb(n7b, A8); }
:CMPC A16, [reg16] is regop0=0xc & reg16; op=0xD8 & A16  { local tmp_reg16 = *[ram]:2 reg16:2; op_cmpc(A16, tmp_reg16); }
:CMPC A16, [X1indw] is op=0xA0 & X1indw; op=0xD8 & A16  { local tmp_X1indw = *[ram]:2 X1indw:2; op_cmpc(A16, tmp_X1indw); }
:CMPC A16, [DPinddecw] is op=0xA1 & DPinddecw; op=0xD8 & A16  { local tmp_DPinddecw = *[ram]:2 DPinddecw:2; op_cmpc(A16, tmp_DPinddecw); }
:CMPC A16, [DPindw] is op=0xA2 & DPindw; op=0xD8 & A16  { local tmp_DPindw = *[ram]:2 DPindw:2; op_cmpc(A16, tmp_DPindw); }
:CMPC A16, [DPindincw] is op=0xA3 & DPindincw; op=0xD8 & A16  { local tmp_DPindincw = *[ram]:2 DPindincw:2; op_cmpc(A16, tmp_DPindincw); }
:CMPC A16, [op1fix16] is op=0xA4; op1fix16; op=0xD8 & A16  { local tmp_op1fix16 = *[ram]:2 op1fix16:2; op_cmpc(A16, tmp_op1fix16); }
:CMPC A16, [op1off16] is op=0xA5; op1off16; op=0xD8 & A16  { local tmp_op1off16 = *[ram]:2 op1off16:2; op_cmpc(A16, tmp_op1off16); }
:CMPC A16, [op1sfr16] is op=0xA6; op1sfr16; op=0xD8 & A16  { local tmp_op1sfr16 = *[ram]:2 op1sfr16:2; op_cmpc(A16, tmp_op1sfr16); }
:CMPC A16, [op1n16w] is op=0xA7; op1n16w; op=0xD8 & A16  { local tmp_op1n16w = *[ram]:2 op1n16w:2; op_cmpc(A16, tmp_op1n16w); }
:CMPC A16, [X1immw] is op=0xA8; X1immw; op=0xD8 & A16  { local tmp_X1immw = *[ram]:2 X1immw:2; op_cmpc(A16, tmp_X1immw); }
:CMPC A16, [X2immw] is op=0xA9; X2immw; op=0xD8 & A16  { local tmp_X2immw = *[ram]:2 X2immw:2; op_cmpc(A16, tmp_X2immw); }
:CMPC A16, [X1plusAw] is op=0xAA & X1plusAw; op=0xD8 & A16  { local tmp_X1plusAw = *[ram]:2 X1plusAw:2; op_cmpc(A16, tmp_X1plusAw); }
:CMPC A16, [X1plusR0w] is op=0xAB & X1plusR0w; op=0xD8 & A16  { local tmp_X1plusR0w = *[ram]:2 X1plusR0w:2; op_cmpc(A16, tmp_X1plusR0w); }
:CMPC A16, [n7w] is op=0x8B; n7w; op=0xD8 & A16  { local tmp_n7w = *[ram]:2 n7w:2; op_cmpc(A16, tmp_n7w); }
:CMPC A16, n16[reg16] is regop0=0xc & reg16; op=0xE6; n16 & A16  { local tmp_reg16 = *[rom]:2 (reg16:2 + n16:2); op_cmpc(A16, tmp_reg16); }
:CMPC A16, n16[X1indw] is op=0xA0 & X1indw; op=0xE6; n16 & A16  { local tmp_X1indw = *[rom]:2 (X1indw:2 + n16:2); op_cmpc(A16, tmp_X1indw); }
:CMPC A16, n16[DPinddecw] is op=0xA1 & DPinddecw; op=0xE6; n16 & A16  { local tmp_DPinddecw = *[rom]:2 (DPinddecw:2 + n16:2); op_cmpc(A16, tmp_DPinddecw); }
:CMPC A16, n16[DPindw] is op=0xA2 & DPindw; op=0xE6; n16 & A16  { local tmp_DPindw = *[rom]:2 (DPindw:2 + n16:2); op_cmpc(A16, tmp_DPindw); }
:CMPC A16, n16[DPindincw] is op=0xA3 & DPindincw; op=0xE6; n16 & A16  { local tmp_DPindincw = *[rom]:2 (DPindincw:2 + n16:2); op_cmpc(A16, tmp_DPindincw); }
:CMPC A16, n16[op1fix16] is op=0xA4; op1fix16; op=0xE6; n16 & A16  { local tmp_op1fix16 = *[rom]:2 (op1fix16:2 + n16:2); op_cmpc(A16, tmp_op1fix16); }
:CMPC A16, n16[op1off16] is op=0xA5; op1off16; op=0xE6; n16 & A16  { local tmp_op1off16 = *[rom]:2 (op1off16:2 + n16:2); op_cmpc(A16, tmp_op1off16); }
:CMPC A16, n16[op1sfr16] is op=0xA6; op1sfr16; op=0xE6; n16 & A16  { local tmp_op1sfr16 = *[rom]:2 (op1sfr16:2 + n16:2); op_cmpc(A16, tmp_op1sfr16); }
:CMPC A16, n16[op1n16w] is op=0xA7; op1n16w; op=0xE6; n16 & A16  { local tmp_op1n16w = *[rom]:2 (op1n16w:2 + n16:2); op_cmpc(A16, tmp_op1n16w); }
:CMPC A16, n16[X1immw] is op=0xA8; X1immw; op=0xE6; n16 & A16  { local tmp_X1immw = *[rom]:2 (X1immw:2 + n16:2); op_cmpc(A16, tmp_X1immw); }
:CMPC A16, n16[X2immw] is op=0xA9; X2immw; op=0xE6; n16 & A16  { local tmp_X2immw = *[rom]:2 (X2immw:2 + n16:2); op_cmpc(A16, tmp_X2immw); }
:CMPC A16, n16[X1plusAw] is op=0xAA & X1plusAw; op=0xE6; n16 & A16  { local tmp_X1plusAw = *[rom]:2 (X1plusAw:2 + n16:2); op_cmpc(A16, tmp_X1plusAw); }
:CMPC A16, n16[X1plusR0w] is op=0xAB & X1plusR0w; op=0xE6; n16 & A16  { local tmp_X1plusR0w = *[rom]:2 (X1plusR0w:2 + n16:2); op_cmpc(A16, tmp_X1plusR0w); }
:CMPC A16, n16[n7w] is op=0x8B; n7w; op=0xE6; n16 & A16  { local tmp_n7w = *[rom]:2 (n7w:2 + n16:2); op_cmpc(A16, tmp_n7w); }
:CMPCB A8, [reg16] is regop0=0xc & reg16; op=0xD9 & A8  { local tmp_reg16 = *[ram]:1 reg16:2; op_cmpcb(A8, tmp_reg16); }
:CMPCB A8, [X1indw] is op=0xA0 & X1indw; op=0xD9 & A8  { local tmp_X1indw = *[ram]:1 X1indw:2; op_cmpcb(A8, tmp_X1indw); }
:CMPCB A8, [DPinddecw] is op=0xA1 & DPinddecw; op=0xD9 & A8  { local tmp_DPinddecw = *[ram]:1 DPinddecw:2; op_cmpcb(A8, tmp_DPinddecw); }
:CMPCB A8, [DPindw] is op=0xA2 & DPindw; op=0xD9 & A8  { local tmp_DPindw = *[ram]:1 DPindw:2; op_cmpcb(A8, tmp_DPindw); }
:CMPCB A8, [DPindincw] is op=0xA3 & DPindincw; op=0xD9 & A8  { local tmp_DPindincw = *[ram]:1 DPindincw:2; op_cmpcb(A8, tmp_DPindincw); }
:CMPCB A8, [op1fix16] is op=0xA4; op1fix16; op=0xD9 & A8  { local tmp_op1fix16 = *[ram]:1 op1fix16:2; op_cmpcb(A8, tmp_op1fix16); }
:CMPCB A8, [op1off16] is op=0xA5; op1off16; op=0xD9 & A8  { local tmp_op1off16 = *[ram]:1 op1off16:2; op_cmpcb(A8, tmp_op1off16); }
:CMPCB A8, [op1sfr16] is op=0xA6; op1sfr16; op=0xD9 & A8  { local tmp_op1sfr16 = *[ram]:1 op1sfr16:2; op_cmpcb(A8, tmp_op1sfr16); }
:CMPCB A8, [op1n16w] is op=0xA7; op1n16w; op=0xD9 & A8  { local tmp_op1n16w = *[ram]:1 op1n16w:2; op_cmpcb(A8, tmp_op1n16w); }
:CMPCB A8, [X1immw] is op=0xA8; X1immw; op=0xD9 & A8  { local tmp_X1immw = *[ram]:1 X1immw:2; op_cmpcb(A8, tmp_X1immw); }
:CMPCB A8, [X2immw] is op=0xA9; X2immw; op=0xD9 & A8  { local tmp_X2immw = *[ram]:1 X2immw:2; op_cmpcb(A8, tmp_X2immw); }
:CMPCB A8, [X1plusAw] is op=0xAA & X1plusAw; op=0xD9 & A8  { local tmp_X1plusAw = *[ram]:1 X1plusAw:2; op_cmpcb(A8, tmp_X1plusAw); }
:CMPCB A8, [X1plusR0w] is op=0xAB & X1plusR0w; op=0xD9 & A8  { local tmp_X1plusR0w = *[ram]:1 X1plusR0w:2; op_cmpcb(A8, tmp_X1plusR0w); }
:CMPCB A8, [n7w] is op=0x8B; n7w; op=0xD9 & A8  { local tmp_n7w = *[ram]:1 n7w:2; op_cmpcb(A8, tmp_n7w); }
:CMPCB A8, n16[reg16] is regop0=0xc & reg16; op=0xF6; n16 & A8  { local tmp_reg16 = *[rom]:1 (reg16:2 + n16:2); op_cmpcb(A8, tmp_reg16); }
:CMPCB A8, n16[X1indw] is op=0xA0 & X1indw; op=0xF6; n16 & A8  { local tmp_X1indw = *[rom]:1 (X1indw:2 + n16:2); op_cmpcb(A8, tmp_X1indw); }
:CMPCB A8, n16[DPinddecw] is op=0xA1 & DPinddecw; op=0xF6; n16 & A8  { local tmp_DPinddecw = *[rom]:1 (DPinddecw:2 + n16:2); op_cmpcb(A8, tmp_DPinddecw); }
:CMPCB A8, n16[DPindw] is op=0xA2 & DPindw; op=0xF6; n16 & A8  { local tmp_DPindw = *[rom]:1 (DPindw:2 + n16:2); op_cmpcb(A8, tmp_DPindw); }
:CMPCB A8, n16[DPindincw] is op=0xA3 & DPindincw; op=0xF6; n16 & A8  { local tmp_DPindincw = *[rom]:1 (DPindincw:2 + n16:2); op_cmpcb(A8, tmp_DPindincw); }
:CMPCB A8, n16[op1fix16] is op=0xA4; op1fix16; op=0xF6; n16 & A8  { local tmp_op1fix16 = *[rom]:1 (op1fix16:2 + n16:2); op_cmpcb(A8, tmp_op1fix16); }
:CMPCB A8, n16[op1off16] is op=0xA5; op1off16; op=0xF6; n16 & A8  { local tmp_op1off16 = *[rom]:1 (op1off16:2 + n16:2); op_cmpcb(A8, tmp_op1off16); }
:CMPCB A8, n16[op1sfr16] is op=0xA6; op1sfr16; op=0xF6; n16 & A8  { local tmp_op1sfr16 = *[rom]:1 (op1sfr16:2 + n16:2); op_cmpcb(A8, tmp_op1sfr16); }
:CMPCB A8, n16[op1n16w] is op=0xA7; op1n16w; op=0xF6; n16 & A8  { local tmp_op1n16w = *[rom]:1 (op1n16w:2 + n16:2); op_cmpcb(A8, tmp_op1n16w); }
:CMPCB A8, n16[X1immw] is op=0xA8; X1immw; op=0xF6; n16 & A8  { local tmp_X1immw = *[rom]:1 (X1immw:2 + n16:2); op_cmpcb(A8, tmp_X1immw); }
:CMPCB A8, n16[X2immw] is op=0xA9; X2immw; op=0xF6; n16 & A8  { local tmp_X2immw = *[rom]:1 (X2immw:2 + n16:2); op_cmpcb(A8, tmp_X2immw); }
:CMPCB A8, n16[X1plusAw] is op=0xAA & X1plusAw; op=0xF6; n16 & A8  { local tmp_X1plusAw = *[rom]:1 (X1plusAw:2 + n16:2); op_cmpcb(A8, tmp_X1plusAw); }
:CMPCB A8, n16[X1plusR0w] is op=0xAB & X1plusR0w; op=0xF6; n16 & A8  { local tmp_X1plusR0w = *[rom]:1 (X1plusR0w:2 + n16:2); op_cmpcb(A8, tmp_X1plusR0w); }
:CMPCB A8, n16[n7w] is op=0x8B; n7w; op=0xF6; n16 & A8  { local tmp_n7w = *[rom]:1 (n7w:2 + n16:2); op_cmpcb(A8, tmp_n7w); }
:CMPCB A8, Tadrb is op=0x8A; op=0xB6; Tadrb & A8  {  op_cmpcb(A8, Tadrb); }
:CPL C is op=0xFD & C  {  op_cpl(C); }
:DEC A16 is dd=1 & op=0xDC & A16  {  op_dec(A16); }
:DEC PRn is hregop0=20 & PRn  {  op_dec(PRn); }
:DEC reg16 is regop0=0xc & reg16; op=0xD6  {  op_dec(reg16); }
:DEC X1indw is op=0xA0 & X1indw; op=0xD6  {  op_dec(X1indw); }
:DEC DPinddecw is op=0xA1 & DPinddecw; op=0xD6  {  op_dec(DPinddecw); }
:DEC DPindw is op=0xA2 & DPindw; op=0xD6  {  op_dec(DPindw); }
:DEC DPindincw is op=0xA3 & DPindincw; op=0xD6  {  op_dec(DPindincw); }
:DEC op1fix16 is op=0xA4; op1fix16; op=0xD6  {  op_dec(op1fix16); }
:DEC op1off16 is op=0xA5; op1off16; op=0xD6  {  op_dec(op1off16); }
:DEC op1sfr16 is op=0xA6; op1sfr16; op=0xD6  {  op_dec(op1sfr16); }
:DEC op1n16w is op=0xA7; op1n16w; op=0xD6  {  op_dec(op1n16w); }
:DEC X1immw is op=0xA8; X1immw; op=0xD6  {  op_dec(X1immw); }
:DEC X2immw is op=0xA9; X2immw; op=0xD6  {  op_dec(X2immw); }
:DEC X1plusAw is op=0xAA & X1plusAw; op=0xD6  {  op_dec(X1plusAw); }
:DEC X1plusR0w is op=0xAB & X1plusR0w; op=0xD6  {  op_dec(X1plusR0w); }
:DEC n7w is op=0x8B; n7w; op=0xD6  {  op_dec(n7w); }
:DECB A8 is dd=0 & op=0xDC & A8  {  op_decb(A8); }
:DEC R0 is op=0xD0 & R0  {  op_dec(R0); }
:DEC R1 is op=0xD1 & R1  {  op_dec(R1); }
:DEC R2 is op=0xD2 & R2  {  op_dec(R2); }
:DEC R3 is op=0xD3 & R3  {  op_dec(R3); }
:DECB reg8 is regop0=0xd & reg8; op=0xD6  {  op_decb(reg8); }
:DECB X1indb is op=0xB0 & X1indb; op=0xD6  {  op_decb(X1indb); }
:DECB DPinddecb is op=0xB1 & DPinddecb; op=0xD6  {  op_decb(DPinddecb); }
:DECB DPindb is op=0xB2 & DPindb; op=0xD6  {  op_decb(DPindb); }
:DECB DPindincb is op=0xB3 & DPindincb; op=0xD6  {  op_decb(DPindincb); }
:DECB op1fix8 is op=0xB4; op1fix8; op=0xD6  {  op_decb(op1fix8); }
:DECB op1off8 is op=0xB5; op1off8; op=0xD6  {  op_decb(op1off8); }
:DECB op1sfr8 is op=0xB6; op1sfr8; op=0xD6  {  op_decb(op1sfr8); }
:DECB op1n16b is op=0xB7; op1n16b; op=0xD6  {  op_decb(op1n16b); }
:DECB X1immb is op=0xB8; X1immb; op=0xD6  {  op_decb(X1immb); }
:DECB X2immb is op=0xB9; X2immb; op=0xD6  {  op_decb(X2immb); }
:DECB X1plusAb is op=0xBA & X1plusAb; op=0xD6  {  op_decb(X1plusAb); }
:DECB X1plusR0b is op=0xBB & X1plusR0b; op=0xD6  {  op_decb(X1plusR0b); }
:DECB PSWL is op=0x8A & PSWL; op=0xD6  {  op_decb(PSWL); }
:DECB PSWH is op=0x9A & PSWH; op=0xD6  {  op_decb(PSWH); }
:DECB n7b is op=0x9B; n7b; op=0xD6  {  op_decb(n7b); }
:DI  is op=0xDA  {  op_di(); }
:DIV reg16 is regop0=0xc & reg16; op=0xA8  {  op_div(reg16); }
:DIV X1indw is op=0xA0 & X1indw; op=0xA8  {  op_div(X1indw); }
:DIV DPinddecw is op=0xA1 & DPinddecw; op=0xA8  {  op_div(DPinddecw); }
:DIV DPindw is op=0xA2 & DPindw; op=0xA8  {  op_div(DPindw); }
:DIV DPindincw is op=0xA3 & DPindincw; op=0xA8  {  op_div(DPindincw); }
:DIV op1fix16 is op=0xA4; op1fix16; op=0xA8  {  op_div(op1fix16); }
:DIV op1off16 is op=0xA5; op1off16; op=0xA8  {  op_div(op1off16); }
:DIV op1sfr16 is op=0xA6; op1sfr16; op=0xA8  {  op_div(op1sfr16); }
:DIV op1n16w is op=0xA7; op1n16w; op=0xA8  {  op_div(op1n16w); }
:DIV X1immw is op=0xA8; X1immw; op=0xA8  {  op_div(X1immw); }
:DIV X2immw is op=0xA9; X2immw; op=0xA8  {  op_div(X2immw); }
:DIV X1plusAw is op=0xAA & X1plusAw; op=0xA8  {  op_div(X1plusAw); }
:DIV X1plusR0w is op=0xAB & X1plusR0w; op=0xA8  {  op_div(X1plusR0w); }
:DIV n7w is op=0x8B; n7w; op=0xA8  {  op_div(n7w); }
:DIVB reg8 is regop0=0xd & reg8; op=0xA8  {  op_divb(reg8); }
:DIVB X1indb is op=0xB0 & X1indb; op=0xA8  {  op_divb(X1indb); }
:DIVB DPinddecb is op=0xB1 & DPinddecb; op=0xA8  {  op_divb(DPinddecb); }
:DIVB DPindb is op=0xB2 & DPindb; op=0xA8  {  op_divb(DPindb); }
:DIVB DPindincb is op=0xB3 & DPindincb; op=0xA8  {  op_divb(DPindincb); }
:DIVB op1fix8 is op=0xB4; op1fix8; op=0xA8  {  op_divb(op1fix8); }
:DIVB op1off8 is op=0xB5; op1off8; op=0xA8  {  op_divb(op1off8); }
:DIVB op1sfr8 is op=0xB6; op1sfr8; op=0xA8  {  op_divb(op1sfr8); }
:DIVB op1n16b is op=0xB7; op1n16b; op=0xA8  {  op_divb(op1n16b); }
:DIVB X1immb is op=0xB8; X1immb; op=0xA8  {  op_divb(X1immb); }
:DIVB X2immb is op=0xB9; X2immb; op=0xA8  {  op_divb(X2immb); }
:DIVB X1plusAb is op=0xBA & X1plusAb; op=0xA8  {  op_divb(X1plusAb); }
:DIVB X1plusR0b is op=0xBB & X1plusR0b; op=0xA8  {  op_divb(X1plusR0b); }
:DIVB PSWL is op=0x8A & PSWL; op=0xA8  {  op_divb(PSWL); }
:DIVB PSWH is op=0x9A & PSWH; op=0xA8  {  op_divb(PSWH); }
:DIVB n7b is op=0x9B; n7b; op=0xA8  {  op_divb(n7b); }
:DIVQ reg16 is regop0=0xc & reg16; op=0xFB  {  op_divq(reg16); }
:DIVQ X1indw is op=0xA0 & X1indw; op=0xFB  {  op_divq(X1indw); }
:DIVQ DPinddecw is op=0xA1 & DPinddecw; op=0xFB  {  op_divq(DPinddecw); }
:DIVQ DPindw is op=0xA2 & DPindw; op=0xFB  {  op_divq(DPindw); }
:DIVQ DPindincw is op=0xA3 & DPindincw; op=0xFB  {  op_divq(DPindincw); }
:DIVQ op1fix16 is op=0xA4; op1fix16; op=0xFB  {  op_divq(op1fix16); }
:DIVQ op1off16 is op=0xA5; op1off16; op=0xFB  {  op_divq(op1off16); }
:DIVQ op1sfr16 is op=0xA6; op1sfr16; op=0xFB  {  op_divq(op1sfr16); }
:DIVQ op1n16w is op=0xA7; op1n16w; op=0xFB  {  op_divq(op1n16w); }
:DIVQ X1immw is op=0xA8; X1immw; op=0xFB  {  op_divq(X1immw); }
:DIVQ X2immw is op=0xA9; X2immw; op=0xFB  {  op_divq(X2immw); }
:DIVQ X1plusAw is op=0xAA & X1plusAw; op=0xFB  {  op_divq(X1plusAw); }
:DIVQ X1plusR0w is op=0xAB & X1plusR0w; op=0xFB  {  op_divq(X1plusR0w); }
:DIVQ n7w is op=0x8B; n7w; op=0xFB  {  op_divq(n7w); }
:DJNZ r45switch, rel7 is op=0x05; rel7 & r45switch  {  op_djnz(r45switch, rel7); }
:DJNZ reg16, rel8 is regop0=0xc & reg16; op=0xEA; rel8  {  op_djnz(reg16, rel8); }
:DJNZ X1indw, rel8 is op=0xA0 & X1indw; op=0xEA; rel8  {  op_djnz(X1indw, rel8); }
:DJNZ DPinddecw, rel8 is op=0xA1 & DPinddecw; op=0xEA; rel8  {  op_djnz(DPinddecw, rel8); }
:DJNZ DPindw, rel8 is op=0xA2 & DPindw; op=0xEA; rel8  {  op_djnz(DPindw, rel8); }
:DJNZ DPindincw, rel8 is op=0xA3 & DPindincw; op=0xEA; rel8  {  op_djnz(DPindincw, rel8); }
:DJNZ op1fix16, rel8 is op=0xA4; op1fix16; op=0xEA; rel8  {  op_djnz(op1fix16, rel8); }
:DJNZ op1off16, rel8 is op=0xA5; op1off16; op=0xEA; rel8  {  op_djnz(op1off16, rel8); }
:DJNZ op1sfr16, rel8 is op=0xA6; op1sfr16; op=0xEA; rel8  {  op_djnz(op1sfr16, rel8); }
:DJNZ op1n16w, rel8 is op=0xA7; op1n16w; op=0xEA; rel8  {  op_djnz(op1n16w, rel8); }
:DJNZ X1immw, rel8 is op=0xA8; X1immw; op=0xEA; rel8  {  op_djnz(X1immw, rel8); }
:DJNZ X2immw, rel8 is op=0xA9; X2immw; op=0xEA; rel8  {  op_djnz(X2immw, rel8); }
:DJNZ X1plusAw, rel8 is op=0xAA & X1plusAw; op=0xEA; rel8  {  op_djnz(X1plusAw, rel8); }
:DJNZ X1plusR0w, rel8 is op=0xAB & X1plusR0w; op=0xEA; rel8  {  op_djnz(X1plusR0w, rel8); }
:DJNZ n7w, rel8 is op=0x8B; n7w; op=0xEA; rel8  {  op_djnz(n7w, rel8); }
:DJNZ A16, rel8 is op=0xBC; op=0xEA; rel8 & A16  {  op_djnz(A16, rel8); }
:DJNZ reg8, rel8 is regop0=0xd & reg8; op=0xEA; rel8  {  op_djnz(reg8, rel8); }
:DJNZ X1indb, rel8 is op=0xB0 & X1indb; op=0xEA; rel8  {  op_djnz(X1indb, rel8); }
:DJNZ DPinddecb, rel8 is op=0xB1 & DPinddecb; op=0xEA; rel8  {  op_djnz(DPinddecb, rel8); }
:DJNZ DPindb, rel8 is op=0xB2 & DPindb; op=0xEA; rel8  {  op_djnz(DPindb, rel8); }
:DJNZ DPindincb, rel8 is op=0xB3 & DPindincb; op=0xEA; rel8  {  op_djnz(DPindincb, rel8); }
:DJNZ op1fix8, rel8 is op=0xB4; op1fix8; op=0xEA; rel8  {  op_djnz(op1fix8, rel8); }
:DJNZ op1off8, rel8 is op=0xB5; op1off8; op=0xEA; rel8  {  op_djnz(op1off8, rel8); }
:DJNZ op1sfr8, rel8 is op=0xB6; op1sfr8; op=0xEA; rel8  {  op_djnz(op1sfr8, rel8); }
:DJNZ op1n16b, rel8 is op=0xB7; op1n16b; op=0xEA; rel8  {  op_djnz(op1n16b, rel8); }
:DJNZ X1immb, rel8 is op=0xB8; X1immb; op=0xEA; rel8  {  op_djnz(X1immb, rel8); }
:DJNZ X2immb, rel8 is op=0xB9; X2immb; op=0xEA; rel8  {  op_djnz(X2immb, rel8); }
:DJNZ X1plusAb, rel8 is op=0xBA & X1plusAb; op=0xEA; rel8  {  op_djnz(X1plusAb, rel8); }
:DJNZ X1plusR0b, rel8 is op=0xBB & X1plusR0b; op=0xEA; rel8  {  op_djnz(X1plusR0b, rel8); }
:DJNZ PSWL, rel8 is op=0x8A & PSWL; op=0xEA; rel8  {  op_djnz(PSWL, rel8); }
:DJNZ PSWH, rel8 is op=0x9A & PSWH; op=0xEA; rel8  {  op_djnz(PSWH, rel8); }
:DJNZ n7b, rel8 is op=0x9B; n7b; op=0xEA; rel8  {  op_djnz(n7b, rel8); }
:EI  is op=0xDB  {  op_ei(); }
:EXTND  is op=0xFC [ dd=1; globalset(inst_next, dd); ] {  op_extnd(); }
:FILL A16 is dd=1 & op=0xBC; op=0xD7 & A16  {  op_fill(A16); }
:FILL reg16 is regop0=0xc & reg16; op=0xD7  {  op_fill(reg16); }
:FILL X1indw is op=0xA0 & X1indw; op=0xD7  {  op_fill(X1indw); }
:FILL DPinddecw is op=0xA1 & DPinddecw; op=0xD7  {  op_fill(DPinddecw); }
:FILL DPindw is op=0xA2 & DPindw; op=0xD7  {  op_fill(DPindw); }
:FILL DPindincw is op=0xA3 & DPindincw; op=0xD7  {  op_fill(DPindincw); }
:FILL op1fix16 is op=0xA4; op1fix16; op=0xD7  {  op_fill(op1fix16); }
:FILL op1off16 is op=0xA5; op1off16; op=0xD7  {  op_fill(op1off16); }
:FILL op1sfr16 is op=0xA6; op1sfr16; op=0xD7  {  op_fill(op1sfr16); }
:FILL op1n16w is op=0xA7; op1n16w; op=0xD7  {  op_fill(op1n16w); }
:FILL X1immw is op=0xA8; X1immw; op=0xD7  {  op_fill(X1immw); }
:FILL X2immw is op=0xA9; X2immw; op=0xD7  {  op_fill(X2immw); }
:FILL X1plusAw is op=0xAA & X1plusAw; op=0xD7  {  op_fill(X1plusAw); }
:FILL X1plusR0w is op=0xAB & X1plusR0w; op=0xD7  {  op_fill(X1plusR0w); }
:FILL n7w is op=0x8B; n7w; op=0xD7  {  op_fill(n7w); }
:FILLB A8 is dd=0 & op=0xBC; op=0xD7 & A8  {  op_fillb(A8); }
:FILLB reg8 is regop0=0xd & reg8; op=0xD7  {  op_fillb(reg8); }
:FILLB X1indb is op=0xB0 & X1indb; op=0xD7  {  op_fillb(X1indb); }
:FILLB DPinddecb is op=0xB1 & DPinddecb; op=0xD7  {  op_fillb(DPinddecb); }
:FILLB DPindb is op=0xB2 & DPindb; op=0xD7  {  op_fillb(DPindb); }
:FILLB DPindincb is op=0xB3 & DPindincb; op=0xD7  {  op_fillb(DPindincb); }
:FILLB op1fix8 is op=0xB4; op1fix8; op=0xD7  {  op_fillb(op1fix8); }
:FILLB op1off8 is op=0xB5; op1off8; op=0xD7  {  op_fillb(op1off8); }
:FILLB op1sfr8 is op=0xB6; op1sfr8; op=0xD7  {  op_fillb(op1sfr8); }
:FILLB op1n16b is op=0xB7; op1n16b; op=0xD7  {  op_fillb(op1n16b); }
:FILLB X1immb is op=0xB8; X1immb; op=0xD7  {  op_fillb(X1immb); }
:FILLB X2immb is op=0xB9; X2immb; op=0xD7  {  op_fillb(X2immb); }
:FILLB X1plusAb is op=0xBA & X1plusAb; op=0xD7  {  op_fillb(X1plusAb); }
:FILLB X1plusR0b is op=0xBB & X1plusR0b; op=0xD7  {  op_fillb(X1plusR0b); }
:FILLB PSWL is op=0x8A & PSWL; op=0xD7  {  op_fillb(PSWL); }
:FILLB PSWH is op=0x9A & PSWH; op=0xD7  {  op_fillb(PSWH); }
:FILLB n7b is op=0x9B; n7b; op=0xD7  {  op_fillb(n7b); }
:INC A16 is dd=1 & op=0xCC & A16  {  op_inc(A16); }
:INC PRn is hregop0=16 & PRn  {  op_inc(PRn); }
:INC reg16 is regop0=0xc & reg16; op=0xC6  {  op_inc(reg16); }
:INC X1indw is op=0xA0 & X1indw; op=0xC6  {  op_inc(X1indw); }
:INC DPinddecw is op=0xA1 & DPinddecw; op=0xC6  {  op_inc(DPinddecw); }
:INC DPindw is op=0xA2 & DPindw; op=0xC6  {  op_inc(DPindw); }
:INC DPindincw is op=0xA3 & DPindincw; op=0xC6  {  op_inc(DPindincw); }
:INC op1fix16 is op=0xA4; op1fix16; op=0xC6  {  op_inc(op1fix16); }
:INC op1off16 is op=0xA5; op1off16; op=0xC6  {  op_inc(op1off16); }
:INC op1sfr16 is op=0xA6; op1sfr16; op=0xC6  {  op_inc(op1sfr16); }
:INC op1n16w is op=0xA7; op1n16w; op=0xC6  {  op_inc(op1n16w); }
:INC X1immw is op=0xA8; X1immw; op=0xC6  {  op_inc(X1immw); }
:INC X2immw is op=0xA9; X2immw; op=0xC6  {  op_inc(X2immw); }
:INC X1plusAw is op=0xAA & X1plusAw; op=0xC6  {  op_inc(X1plusAw); }
:INC X1plusR0w is op=0xAB & X1plusR0w; op=0xC6  {  op_inc(X1plusR0w); }
:INC n7w is op=0x8B; n7w; op=0xC6  {  op_inc(n7w); }
:INCB A8 is dd=0 & op=0xCC & A8  {  op_incb(A8); }
:INCB R0 is op=0xC0 & R0  {  op_incb(R0); }
:INCB R1 is op=0xC1 & R1  {  op_incb(R1); }
:INCB R2 is op=0xC2 & R2  {  op_incb(R2); }
:INCB R3 is op=0xC3 & R3  {  op_incb(R3); }
:INCB reg8 is regop0=0xd & reg8; op=0xC6  {  op_incb(reg8); }
:INCB X1indb is op=0xB0 & X1indb; op=0xC6  {  op_incb(X1indb); }
:INCB DPinddecb is op=0xB1 & DPinddecb; op=0xC6  {  op_incb(DPinddecb); }
:INCB DPindb is op=0xB2 & DPindb; op=0xC6  {  op_incb(DPindb); }
:INCB DPindincb is op=0xB3 & DPindincb; op=0xC6  {  op_incb(DPindincb); }
:INCB op1fix8 is op=0xB4; op1fix8; op=0xC6  {  op_incb(op1fix8); }
:INCB op1off8 is op=0xB5; op1off8; op=0xC6  {  op_incb(op1off8); }
:INCB op1sfr8 is op=0xB6; op1sfr8; op=0xC6  {  op_incb(op1sfr8); }
:INCB op1n16b is op=0xB7; op1n16b; op=0xC6  {  op_incb(op1n16b); }
:INCB X1immb is op=0xB8; X1immb; op=0xC6  {  op_incb(X1immb); }
:INCB X2immb is op=0xB9; X2immb; op=0xC6  {  op_incb(X2immb); }
:INCB X1plusAb is op=0xBA & X1plusAb; op=0xC6  {  op_incb(X1plusAb); }
:INCB X1plusR0b is op=0xBB & X1plusR0b; op=0xC6  {  op_incb(X1plusR0b); }
:INCB PSWL is op=0x8A & PSWL; op=0xC6  {  op_incb(PSWL); }
:INCB PSWH is op=0x9A & PSWH; op=0xC6  {  op_incb(PSWH); }
:INCB n7b is op=0x9B; n7b; op=0xC6  {  op_incb(n7b); }
:J Cadr is op=0x03; Cadr  {  op_j(Cadr); }
:J A16indw is op=0xBC; op=0xC9 & A16indw  {  op_j(A16indw); }
:J [reg16] is regop0=0xc & reg16; op=0xC9  { local tmp_reg16 = *[rom]:2 reg16:2; op_j(tmp_reg16); }
:J [X1indw] is op=0xA0 & X1indw; op=0xC9  { local tmp_X1indw = *[rom]:2 X1indw:2; op_j(tmp_X1indw); }
:J [DPinddecw] is op=0xA1 & DPinddecw; op=0xC9  { local tmp_DPinddecw = *[rom]:2 DPinddecw:2; op_j(tmp_DPinddecw); }
:J [DPindw] is op=0xA2 & DPindw; op=0xC9  { local tmp_DPindw = *[rom]:2 DPindw:2; op_j(tmp_DPindw); }
:J [DPindincw] is op=0xA3 & DPindincw; op=0xC9  { local tmp_DPindincw = *[rom]:2 DPindincw:2; op_j(tmp_DPindincw); }
:J [op1fix16] is op=0xA4; op1fix16; op=0xC9  { local tmp_op1fix16 = *[rom]:2 op1fix16:2; op_j(tmp_op1fix16); }
:J [op1off16] is op=0xA5; op1off16; op=0xC9  { local tmp_op1off16 = *[rom]:2 op1off16:2; op_j(tmp_op1off16); }
:J [op1sfr16] is op=0xA6; op1sfr16; op=0xC9  { local tmp_op1sfr16 = *[rom]:2 op1sfr16:2; op_j(tmp_op1sfr16); }
:J [op1n16w] is op=0xA7; op1n16w; op=0xC9  { local tmp_op1n16w = *[rom]:2 op1n16w:2; op_j(tmp_op1n16w); }
:J [X1immw] is op=0xA8; X1immw; op=0xC9  { local tmp_X1immw = *[rom]:2 X1immw:2; op_j(tmp_X1immw); }
:J [X2immw] is op=0xA9; X2immw; op=0xC9  { local tmp_X2immw = *[rom]:2 X2immw:2; op_j(tmp_X2immw); }
:J [X1plusAw] is op=0xAA & X1plusAw; op=0xC9  { local tmp_X1plusAw = *[rom]:2 X1plusAw:2; op_j(tmp_X1plusAw); }
:J [X1plusR0w] is op=0xAB & X1plusR0w; op=0xC9  { local tmp_X1plusR0w = *[rom]:2 X1plusR0w:2; op_j(tmp_X1plusR0w); }
:J [n7w] is op=0x8B; n7w; op=0xC9  { local tmp_n7w = *[rom]:2 n7w:2; op_j(tmp_n7w); }
:JBR sbafix^"."^bit, rel8 is bitop0=11 & bit; sbaop=3 & sbafix; rel8  {  op_jbr(sbafix,bit, rel8); }
:JBR sbaoff^"."^bit, rel8 is bitop0=9 & bit; sbaop=3 & sbaoff; rel8  {  op_jbr(sbaoff,bit, rel8); }
:JBR A8^"."^bit, rel8 is op=0xBC; bitop0=4 & bit; rel8 & A8  {  op_jbr(A8,bit, rel8); }
:JBR reg8^"."^bit, rel8 is regop0=0xd & reg8; bitop0=4 & bit; rel8  {  op_jbr(reg8,bit, rel8); }
:JBR X1indb^"."^bit, rel8 is op=0xB0 & X1indb; bitop0=4 & bit; rel8  {  op_jbr(X1indb,bit, rel8); }
:JBR DPinddecb^"."^bit, rel8 is op=0xB1 & DPinddecb; bitop0=4 & bit; rel8  {  op_jbr(DPinddecb,bit, rel8); }
:JBR DPindb^"."^bit, rel8 is op=0xB2 & DPindb; bitop0=4 & bit; rel8  {  op_jbr(DPindb,bit, rel8); }
:JBR DPindincb^"."^bit, rel8 is op=0xB3 & DPindincb; bitop0=4 & bit; rel8  {  op_jbr(DPindincb,bit, rel8); }
:JBR op1fix8^"."^bit, rel8 is op=0xB4; op1fix8; bitop0=4 & bit; rel8  {  op_jbr(op1fix8,bit, rel8); }
:JBR op1off8^"."^bit, rel8 is op=0xB5; op1off8; bitop0=4 & bit; rel8  {  op_jbr(op1off8,bit, rel8); }
:JBR op1sfr8^"."^bit, rel8 is op=0xB6; op1sfr8; bitop0=4 & bit; rel8  {  op_jbr(op1sfr8,bit, rel8); }
:JBR op1n16b^"."^bit, rel8 is op=0xB7; op1n16b; bitop0=4 & bit; rel8  {  op_jbr(op1n16b,bit, rel8); }
:JBR X1immb^"."^bit, rel8 is op=0xB8; X1immb; bitop0=4 & bit; rel8  {  op_jbr(X1immb,bit, rel8); }
:JBR X2immb^"."^bit, rel8 is op=0xB9; X2immb; bitop0=4 & bit; rel8  {  op_jbr(X2immb,bit, rel8); }
:JBR X1plusAb^"."^bit, rel8 is op=0xBA & X1plusAb; bitop0=4 & bit; rel8  {  op_jbr(X1plusAb,bit, rel8); }
:JBR X1plusR0b^"."^bit, rel8 is op=0xBB & X1plusR0b; bitop0=4 & bit; rel8  {  op_jbr(X1plusR0b,bit, rel8); }
:JBR PSWL^"."^bit, rel8 is op=0x8A & PSWL; bitop0=4 & bit; rel8  {  op_jbr(PSWL,bit, rel8); }
:JBR PSWH^"."^bit, rel8 is op=0x9A & PSWH; bitop0=4 & bit; rel8  {  op_jbr(PSWH,bit, rel8); }
:JBR n7b^"."^bit, rel8 is op=0x9B; n7b; bitop0=4 & bit; rel8  {  op_jbr(n7b,bit, rel8); }
:JBRS A8^"."^bit, rel8 is op=0xBC; bitop0=6 & bit; rel8 & A8  {  op_jbrs(A8,bit, rel8); }
:JBRS reg8^"."^bit, rel8 is regop0=0xd & reg8; bitop0=6 & bit; rel8  {  op_jbrs(reg8,bit, rel8); }
:JBRS X1indb^"."^bit, rel8 is op=0xB0 & X1indb; bitop0=6 & bit; rel8  {  op_jbrs(X1indb,bit, rel8); }
:JBRS DPinddecb^"."^bit, rel8 is op=0xB1 & DPinddecb; bitop0=6 & bit; rel8  {  op_jbrs(DPinddecb,bit, rel8); }
:JBRS DPindb^"."^bit, rel8 is op=0xB2 & DPindb; bitop0=6 & bit; rel8  {  op_jbrs(DPindb,bit, rel8); }
:JBRS DPindincb^"."^bit, rel8 is op=0xB3 & DPindincb; bitop0=6 & bit; rel8  {  op_jbrs(DPindincb,bit, rel8); }
:JBRS op1fix8^"."^bit, rel8 is op=0xB4; op1fix8; bitop0=6 & bit; rel8  {  op_jbrs(op1fix8,bit, rel8); }
:JBRS op1off8^"."^bit, rel8 is op=0xB5; op1off8; bitop0=6 & bit; rel8  {  op_jbrs(op1off8,bit, rel8); }
:JBRS op1sfr8^"."^bit, rel8 is op=0xB6; op1sfr8; bitop0=6 & bit; rel8  {  op_jbrs(op1sfr8,bit, rel8); }
:JBRS op1n16b^"."^bit, rel8 is op=0xB7; op1n16b; bitop0=6 & bit; rel8  {  op_jbrs(op1n16b,bit, rel8); }
:JBRS X1immb^"."^bit, rel8 is op=0xB8; X1immb; bitop0=6 & bit; rel8  {  op_jbrs(X1immb,bit, rel8); }
:JBRS X2immb^"."^bit, rel8 is op=0xB9; X2immb; bitop0=6 & bit; rel8  {  op_jbrs(X2immb,bit, rel8); }
:JBRS X1plusAb^"."^bit, rel8 is op=0xBA & X1plusAb; bitop0=6 & bit; rel8  {  op_jbrs(X1plusAb,bit, rel8); }
:JBRS X1plusR0b^"."^bit, rel8 is op=0xBB & X1plusR0b; bitop0=6 & bit; rel8  {  op_jbrs(X1plusR0b,bit, rel8); }
:JBRS PSWL^"."^bit, rel8 is op=0x8A & PSWL; bitop0=6 & bit; rel8  {  op_jbrs(PSWL,bit, rel8); }
:JBRS PSWH^"."^bit, rel8 is op=0x9A & PSWH; bitop0=6 & bit; rel8  {  op_jbrs(PSWH,bit, rel8); }
:JBRS n7b^"."^bit, rel8 is op=0x9B; n7b; bitop0=6 & bit; rel8  {  op_jbrs(n7b,bit, rel8); }
:JBS sbafix^"."^bit, rel8 is bitop0=11 & bit; sbaop=2 & sbafix; rel8  {  op_jbs(sbafix,bit, rel8); }
:JBS sbaoff^"."^bit, rel8 is bitop0=9 & bit; sbaop=2 & sbaoff; rel8  {  op_jbs(sbaoff,bit, rel8); }
:JBS A8^"."^bit, rel8 is op=0xBC; bitop0=5 & bit; rel8 & A8  {  op_jbs(A8,bit, rel8); }
:JBS reg8^"."^bit, rel8 is regop0=0xd & reg8; bitop0=5 & bit; rel8  {  op_jbs(reg8,bit, rel8); }
:JBS X1indb^"."^bit, rel8 is op=0xB0 & X1indb; bitop0=5 & bit; rel8  {  op_jbs(X1indb,bit, rel8); }
:JBS DPinddecb^"."^bit, rel8 is op=0xB1 & DPinddecb; bitop0=5 & bit; rel8  {  op_jbs(DPinddecb,bit, rel8); }
:JBS DPindb^"."^bit, rel8 is op=0xB2 & DPindb; bitop0=5 & bit; rel8  {  op_jbs(DPindb,bit, rel8); }
:JBS DPindincb^"."^bit, rel8 is op=0xB3 & DPindincb; bitop0=5 & bit; rel8  {  op_jbs(DPindincb,bit, rel8); }
:JBS op1fix8^"."^bit, rel8 is op=0xB4; op1fix8; bitop0=5 & bit; rel8  {  op_jbs(op1fix8,bit, rel8); }
:JBS op1off8^"."^bit, rel8 is op=0xB5; op1off8; bitop0=5 & bit; rel8  {  op_jbs(op1off8,bit, rel8); }
:JBS op1sfr8^"."^bit, rel8 is op=0xB6; op1sfr8; bitop0=5 & bit; rel8  {  op_jbs(op1sfr8,bit, rel8); }
:JBS op1n16b^"."^bit, rel8 is op=0xB7; op1n16b; bitop0=5 & bit; rel8  {  op_jbs(op1n16b,bit, rel8); }
:JBS X1immb^"."^bit, rel8 is op=0xB8; X1immb; bitop0=5 & bit; rel8  {  op_jbs(X1immb,bit, rel8); }
:JBS X2immb^"."^bit, rel8 is op=0xB9; X2immb; bitop0=5 & bit; rel8  {  op_jbs(X2immb,bit, rel8); }
:JBS X1plusAb^"."^bit, rel8 is op=0xBA & X1plusAb; bitop0=5 & bit; rel8  {  op_jbs(X1plusAb,bit, rel8); }
:JBS X1plusR0b^"."^bit, rel8 is op=0xBB & X1plusR0b; bitop0=5 & bit; rel8  {  op_jbs(X1plusR0b,bit, rel8); }
:JBS PSWL^"."^bit, rel8 is op=0x8A & PSWL; bitop0=5 & bit; rel8  {  op_jbs(PSWL,bit, rel8); }
:JBS PSWH^"."^bit, rel8 is op=0x9A & PSWH; bitop0=5 & bit; rel8  {  op_jbs(PSWH,bit, rel8); }
:JBS n7b^"."^bit, rel8 is op=0x9B; n7b; bitop0=5 & bit; rel8  {  op_jbs(n7b,bit, rel8); }
:JBSR A8^"."^bit, rel8 is op=0xBC; bitop0=7 & bit; rel8 & A8  {  op_jbsr(A8,bit, rel8); }
:JBSR reg8^"."^bit, rel8 is regop0=0xd & reg8; bitop0=7 & bit; rel8  {  op_jbsr(reg8,bit, rel8); }
:JBSR X1indb^"."^bit, rel8 is op=0xB0 & X1indb; bitop0=7 & bit; rel8  {  op_jbsr(X1indb,bit, rel8); }
:JBSR DPinddecb^"."^bit, rel8 is op=0xB1 & DPinddecb; bitop0=7 & bit; rel8  {  op_jbsr(DPinddecb,bit, rel8); }
:JBSR DPindb^"."^bit, rel8 is op=0xB2 & DPindb; bitop0=7 & bit; rel8  {  op_jbsr(DPindb,bit, rel8); }
:JBSR DPindincb^"."^bit, rel8 is op=0xB3 & DPindincb; bitop0=7 & bit; rel8  {  op_jbsr(DPindincb,bit, rel8); }
:JBSR op1fix8^"."^bit, rel8 is op=0xB4; op1fix8; bitop0=7 & bit; rel8  {  op_jbsr(op1fix8,bit, rel8); }
:JBSR op1off8^"."^bit, rel8 is op=0xB5; op1off8; bitop0=7 & bit; rel8  {  op_jbsr(op1off8,bit, rel8); }
:JBSR op1sfr8^"."^bit, rel8 is op=0xB6; op1sfr8; bitop0=7 & bit; rel8  {  op_jbsr(op1sfr8,bit, rel8); }
:JBSR op1n16b^"."^bit, rel8 is op=0xB7; op1n16b; bitop0=7 & bit; rel8  {  op_jbsr(op1n16b,bit, rel8); }
:JBSR X1immb^"."^bit, rel8 is op=0xB8; X1immb; bitop0=7 & bit; rel8  {  op_jbsr(X1immb,bit, rel8); }
:JBSR X2immb^"."^bit, rel8 is op=0xB9; X2immb; bitop0=7 & bit; rel8  {  op_jbsr(X2immb,bit, rel8); }
:JBSR X1plusAb^"."^bit, rel8 is op=0xBA & X1plusAb; bitop0=7 & bit; rel8  {  op_jbsr(X1plusAb,bit, rel8); }
:JBSR X1plusR0b^"."^bit, rel8 is op=0xBB & X1plusR0b; bitop0=7 & bit; rel8  {  op_jbsr(X1plusR0b,bit, rel8); }
:JBSR PSWL^"."^bit, rel8 is op=0x8A & PSWL; bitop0=7 & bit; rel8  {  op_jbsr(PSWL,bit, rel8); }
:JBSR PSWH^"."^bit, rel8 is op=0x9A & PSWH; bitop0=7 & bit; rel8  {  op_jbsr(PSWH,bit, rel8); }
:JBSR n7b^"."^bit, rel8 is op=0x9B; n7b; bitop0=7 & bit; rel8  {  op_jbsr(n7b,bit, rel8); }
:JGT rel8 is op=0xF0; rel8  {  op_jgt(rel8); }
:JGE rel8 is op=0xF5; rel8  {  op_jge(rel8); }
:JLT rel8 is op=0xF2; rel8  {  op_jlt(rel8); }
:JLE rel8 is op=0xF7; rel8  {  op_jle(rel8); }
:JEQ rel8 is op=0xF1; rel8  {  op_jeq(rel8); }
:JNE rel8 is op=0xF6; rel8  {  op_jne(rel8); }
:JGTS rel8 is op=0x8A; op=0xFE; rel8  {  op_jgts(rel8); }
:JGES rel8 is op=0x8A; op=0xFF; rel8  {  op_jges(rel8); }
:JLTS rel8 is op=0x8A; op=0xFC; rel8  {  op_jlts(rel8); }
:JLES rel8 is op=0x8A; op=0xFD; rel8  {  op_jles(rel8); }
:JPS rel8 is op=0xF4; rel8  {  op_jps(rel8); }
:JNS rel8 is op=0xF3; rel8  {  op_jns(rel8); }
:L A16, #n16 is op=0xF8; n16 & A16 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, n16:2); }
:L A16, ERn is hregop0=29 & ERn & A16 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, ERn); }
:L A16, PRn is hregop0=28 & PRn & A16 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, PRn); }
:L A16, X1indw2 is op=0x80 & A16 & X1indw2 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, X1indw2); }
:L A16, DPinddecw2 is op=0x81 & A16 & DPinddecw2 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, DPinddecw2); }
:L A16, DPindw2 is op=0x82 & A16 & DPindw2 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, DPindw2); }
:L A16, DPindincw2 is op=0x83 & A16 & DPindincw2 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, DPindincw2); }
:L A16, fix16 is op=0x84; fix16 & A16 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, fix16); }
:L A16, off16 is op=0x85; off16 & A16 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, off16); }
:L A16, sfr16 is op=0x86; sfr16 & A16 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, sfr16); }
:L A16, op2n16w is op=0x87; op2n16w & A16 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, op2n16w); }
:L A16, X1immw2 is op=0x88; X1immw2 & A16 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, X1immw2); }
:L A16, n7pw is op=0x89; n7pw & A16 [ dd=1; globalset(inst_next, dd); ] {  op_l(A16, n7pw); }
:LB A8, #n8 is op=0xF9; n8 & A8 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, n8:1); }
:LB A8, Rn is regop0=15 & Rn & A8 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, Rn); }
:LB A8, X1indb2 is op=0x90 & A8 & X1indb2 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, X1indb2); }
:LB A8, DPinddecb2 is op=0x91 & A8 & DPinddecb2 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, DPinddecb2); }
:LB A8, DPindb2 is op=0x92 & A8 & DPindb2 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, DPindb2); }
:LB A8, DPindincb2 is op=0x93 & A8 & DPindincb2 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, DPindincb2); }
:LB A8, fix8 is op=0x94; fix8 & A8 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, fix8); }
:LB A8, off8 is op=0x95; off8 & A8 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, off8); }
:LB A8, sfr8 is op=0x96; sfr8 & A8 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, sfr8); }
:LB A8, op2n16b is op=0x97; op2n16b & A8 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, op2n16b); }
:LB A8, X1immb2 is op=0x98; X1immb2 & A8 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, X1immb2); }
:LB A8, n7pb is op=0x99; n7pb & A8 [ dd=0; globalset(inst_next, dd); ] {  op_lb(A8, n7pb); }
:LC A16, A16indw is op=0xBC; op=0xDA & A16 & A16indw  {  op_lc(A16, A16indw); }
:LC A16, [reg16] is regop0=0xc & reg16; op=0xDA & A16  { local tmp_reg16 = *[rom]:2 reg16:2; op_lc(A16, tmp_reg16); }
:LC A16, [X1indw] is op=0xA0 & X1indw; op=0xDA & A16  { local tmp_X1indw = *[rom]:2 X1indw:2; op_lc(A16, tmp_X1indw); }
:LC A16, [DPinddecw] is op=0xA1 & DPinddecw; op=0xDA & A16  { local tmp_DPinddecw = *[rom]:2 DPinddecw:2; op_lc(A16, tmp_DPinddecw); }
:LC A16, [DPindw] is op=0xA2 & DPindw; op=0xDA & A16  { local tmp_DPindw = *[rom]:2 DPindw:2; op_lc(A16, tmp_DPindw); }
:LC A16, [DPindincw] is op=0xA3 & DPindincw; op=0xDA & A16  { local tmp_DPindincw = *[rom]:2 DPindincw:2; op_lc(A16, tmp_DPindincw); }
:LC A16, [op1fix16] is op=0xA4; op1fix16; op=0xDA & A16  { local tmp_op1fix16 = *[rom]:2 op1fix16:2; op_lc(A16, tmp_op1fix16); }
:LC A16, [op1off16] is op=0xA5; op1off16; op=0xDA & A16  { local tmp_op1off16 = *[rom]:2 op1off16:2; op_lc(A16, tmp_op1off16); }
:LC A16, [op1sfr16] is op=0xA6; op1sfr16; op=0xDA & A16  { local tmp_op1sfr16 = *[rom]:2 op1sfr16:2; op_lc(A16, tmp_op1sfr16); }
:LC A16, [op1n16w] is op=0xA7; op1n16w; op=0xDA & A16  { local tmp_op1n16w = *[rom]:2 op1n16w:2; op_lc(A16, tmp_op1n16w); }
:LC A16, [X1immw] is op=0xA8; X1immw; op=0xDA & A16  { local tmp_X1immw = *[rom]:2 X1immw:2; op_lc(A16, tmp_X1immw); }
:LC A16, [X2immw] is op=0xA9; X2immw; op=0xDA & A16  { local tmp_X2immw = *[rom]:2 X2immw:2; op_lc(A16, tmp_X2immw); }
:LC A16, [X1plusAw] is op=0xAA & X1plusAw; op=0xDA & A16  { local tmp_X1plusAw = *[rom]:2 X1plusAw:2; op_lc(A16, tmp_X1plusAw); }
:LC A16, [X1plusR0w] is op=0xAB & X1plusR0w; op=0xDA & A16  { local tmp_X1plusR0w = *[rom]:2 X1plusR0w:2; op_lc(A16, tmp_X1plusR0w); }
:LC A16, [n7w] is op=0x8B; n7w; op=0xDA & A16  { local tmp_n7w = *[rom]:2 n7w:2; op_lc(A16, tmp_n7w); }
:LC A16, n16[ACC] is op=0xBC; op=0xE7; n16 & A16& ACC  { local tmp_ACC = *[rom]:2 (ACC:2 + n16:2); op_lc(A16, tmp_ACC); }
:LC A16, n16[reg16] is regop0=0xc & reg16; op=0xE7; n16 & A16  { local tmp_reg16 = *[rom]:2 (reg16:2 + n16:2); op_lc(A16, tmp_reg16); }
:LC A16, n16[X1indw] is op=0xA0 & X1indw; op=0xE7; n16 & A16  { local tmp_X1indw = *[rom]:2 (X1indw:2 + n16:2); op_lc(A16, tmp_X1indw); }
:LC A16, n16[DPinddecw] is op=0xA1 & DPinddecw; op=0xE7; n16 & A16  { local tmp_DPinddecw = *[rom]:2 (DPinddecw:2 + n16:2); op_lc(A16, tmp_DPinddecw); }
:LC A16, n16[DPindw] is op=0xA2 & DPindw; op=0xE7; n16 & A16  { local tmp_DPindw = *[rom]:2 (DPindw:2 + n16:2); op_lc(A16, tmp_DPindw); }
:LC A16, n16[DPindincw] is op=0xA3 & DPindincw; op=0xE7; n16 & A16  { local tmp_DPindincw = *[rom]:2 (DPindincw:2 + n16:2); op_lc(A16, tmp_DPindincw); }
:LC A16, n16[op1fix16] is op=0xA4; op1fix16; op=0xE7; n16 & A16  { local tmp_op1fix16 = *[rom]:2 (op1fix16:2 + n16:2); op_lc(A16, tmp_op1fix16); }
:LC A16, n16[op1off16] is op=0xA5; op1off16; op=0xE7; n16 & A16  { local tmp_op1off16 = *[rom]:2 (op1off16:2 + n16:2); op_lc(A16, tmp_op1off16); }
:LC A16, n16[op1sfr16] is op=0xA6; op1sfr16; op=0xE7; n16 & A16  { local tmp_op1sfr16 = *[rom]:2 (op1sfr16:2 + n16:2); op_lc(A16, tmp_op1sfr16); }
:LC A16, n16[op1n16w] is op=0xA7; op1n16w; op=0xE7; n16 & A16  { local tmp_op1n16w = *[rom]:2 (op1n16w:2 + n16:2); op_lc(A16, tmp_op1n16w); }
:LC A16, n16[X1immw] is op=0xA8; X1immw; op=0xE7; n16 & A16  { local tmp_X1immw = *[rom]:2 (X1immw:2 + n16:2); op_lc(A16, tmp_X1immw); }
:LC A16, n16[X2immw] is op=0xA9; X2immw; op=0xE7; n16 & A16  { local tmp_X2immw = *[rom]:2 (X2immw:2 + n16:2); op_lc(A16, tmp_X2immw); }
:LC A16, n16[X1plusAw] is op=0xAA & X1plusAw; op=0xE7; n16 & A16  { local tmp_X1plusAw = *[rom]:2 (X1plusAw:2 + n16:2); op_lc(A16, tmp_X1plusAw); }
:LC A16, n16[X1plusR0w] is op=0xAB & X1plusR0w; op=0xE7; n16 & A16  { local tmp_X1plusR0w = *[rom]:2 (X1plusR0w:2 + n16:2); op_lc(A16, tmp_X1plusR0w); }
:LC A16, n16[n7w] is op=0x8B; n7w; op=0xE7; n16 & A16  { local tmp_n7w = *[rom]:2 (n7w:2 + n16:2); op_lc(A16, tmp_n7w); }
:LCB A8, A16indb is op=0xBC; op=0xDB & A8 & A16indb  {  op_lcb(A8, A16indb); }
:LCB A8, [reg16] is regop0=0xc & reg16; op=0xDB & A8  { local tmp_reg16 = *[rom]:1 reg16:2; op_lcb(A8, tmp_reg16); }
:LCB A8, [X1indw] is op=0xA0 & X1indw; op=0xDB & A8  { local tmp_X1indw = *[rom]:1 X1indw:2; op_lcb(A8, tmp_X1indw); }
:LCB A8, [DPinddecw] is op=0xA1 & DPinddecw; op=0xDB & A8  { local tmp_DPinddecw = *[rom]:1 DPinddecw:2; op_lcb(A8, tmp_DPinddecw); }
:LCB A8, [DPindw] is op=0xA2 & DPindw; op=0xDB & A8  { local tmp_DPindw = *[rom]:1 DPindw:2; op_lcb(A8, tmp_DPindw); }
:LCB A8, [DPindincw] is op=0xA3 & DPindincw; op=0xDB & A8  { local tmp_DPindincw = *[rom]:1 DPindincw:2; op_lcb(A8, tmp_DPindincw); }
:LCB A8, [op1fix16] is op=0xA4; op1fix16; op=0xDB & A8  { local tmp_op1fix16 = *[rom]:1 op1fix16:2; op_lcb(A8, tmp_op1fix16); }
:LCB A8, [op1off16] is op=0xA5; op1off16; op=0xDB & A8  { local tmp_op1off16 = *[rom]:1 op1off16:2; op_lcb(A8, tmp_op1off16); }
:LCB A8, [op1sfr16] is op=0xA6; op1sfr16; op=0xDB & A8  { local tmp_op1sfr16 = *[rom]:1 op1sfr16:2; op_lcb(A8, tmp_op1sfr16); }
:LCB A8, [op1n16w] is op=0xA7; op1n16w; op=0xDB & A8  { local tmp_op1n16w = *[rom]:1 op1n16w:2; op_lcb(A8, tmp_op1n16w); }
:LCB A8, [X1immw] is op=0xA8; X1immw; op=0xDB & A8  { local tmp_X1immw = *[rom]:1 X1immw:2; op_lcb(A8, tmp_X1immw); }
:LCB A8, [X2immw] is op=0xA9; X2immw; op=0xDB & A8  { local tmp_X2immw = *[rom]:1 X2immw:2; op_lcb(A8, tmp_X2immw); }
:LCB A8, [X1plusAw] is op=0xAA & X1plusAw; op=0xDB & A8  { local tmp_X1plusAw = *[rom]:1 X1plusAw:2; op_lcb(A8, tmp_X1plusAw); }
:LCB A8, [X1plusR0w] is op=0xAB & X1plusR0w; op=0xDB & A8  { local tmp_X1plusR0w = *[rom]:1 X1plusR0w:2; op_lcb(A8, tmp_X1plusR0w); }
:LCB A8, [n7w] is op=0x8B; n7w; op=0xDB & A8  { local tmp_n7w = *[rom]:1 n7w:2; op_lcb(A8, tmp_n7w); }
:LCB A8, n16[ACC] is op=0xBC; op=0xF7; n16 & A8& ACC  { local tmp_ACC = *[rom]:1 (ACC:2 + n16:2); op_lcb(A8, tmp_ACC); }
:LCB A8, n16[reg16] is regop0=0xc & reg16; op=0xF7; n16 & A8  { local tmp_reg16 = *[rom]:1 (reg16:2 + n16:2); op_lcb(A8, tmp_reg16); }
:LCB A8, n16[X1indw] is op=0xA0 & X1indw; op=0xF7; n16 & A8  { local tmp_X1indw = *[rom]:1 (X1indw:2 + n16:2); op_lcb(A8, tmp_X1indw); }
:LCB A8, n16[DPinddecw] is op=0xA1 & DPinddecw; op=0xF7; n16 & A8  { local tmp_DPinddecw = *[rom]:1 (DPinddecw:2 + n16:2); op_lcb(A8, tmp_DPinddecw); }
:LCB A8, n16[DPindw] is op=0xA2 & DPindw; op=0xF7; n16 & A8  { local tmp_DPindw = *[rom]:1 (DPindw:2 + n16:2); op_lcb(A8, tmp_DPindw); }
:LCB A8, n16[DPindincw] is op=0xA3 & DPindincw; op=0xF7; n16 & A8  { local tmp_DPindincw = *[rom]:1 (DPindincw:2 + n16:2); op_lcb(A8, tmp_DPindincw); }
:LCB A8, n16[op1fix16] is op=0xA4; op1fix16; op=0xF7; n16 & A8  { local tmp_op1fix16 = *[rom]:1 (op1fix16:2 + n16:2); op_lcb(A8, tmp_op1fix16); }
:LCB A8, n16[op1off16] is op=0xA5; op1off16; op=0xF7; n16 & A8  { local tmp_op1off16 = *[rom]:1 (op1off16:2 + n16:2); op_lcb(A8, tmp_op1off16); }
:LCB A8, n16[op1sfr16] is op=0xA6; op1sfr16; op=0xF7; n16 & A8  { local tmp_op1sfr16 = *[rom]:1 (op1sfr16:2 + n16:2); op_lcb(A8, tmp_op1sfr16); }
:LCB A8, n16[op1n16w] is op=0xA7; op1n16w; op=0xF7; n16 & A8  { local tmp_op1n16w = *[rom]:1 (op1n16w:2 + n16:2); op_lcb(A8, tmp_op1n16w); }
:LCB A8, n16[X1immw] is op=0xA8; X1immw; op=0xF7; n16 & A8  { local tmp_X1immw = *[rom]:1 (X1immw:2 + n16:2); op_lcb(A8, tmp_X1immw); }
:LCB A8, n16[X2immw] is op=0xA9; X2immw; op=0xF7; n16 & A8  { local tmp_X2immw = *[rom]:1 (X2immw:2 + n16:2); op_lcb(A8, tmp_X2immw); }
:LCB A8, n16[X1plusAw] is op=0xAA & X1plusAw; op=0xF7; n16 & A8  { local tmp_X1plusAw = *[rom]:1 (X1plusAw:2 + n16:2); op_lcb(A8, tmp_X1plusAw); }
:LCB A8, n16[X1plusR0w] is op=0xAB & X1plusR0w; op=0xF7; n16 & A8  { local tmp_X1plusR0w = *[rom]:1 (X1plusR0w:2 + n16:2); op_lcb(A8, tmp_X1plusR0w); }
:LCB A8, n16[n7w] is op=0x8B; n7w; op=0xF7; n16 & A8  { local tmp_n7w = *[rom]:1 (n7w:2 + n16:2); op_lcb(A8, tmp_n7w); }
:LCB A8, Tadrb is op=0x8A; op=0xB7; Tadrb & A8  {  op_lcb(A8, Tadrb); }
:LMB C, A8^"."^bit is op=0xBC; bitop0=2 & bit & C & A8  {  op_lmb(C, A8,bit); }
:LMB C, reg8^"."^bit is regop0=0xd & reg8; bitop0=2 & bit & C  {  op_lmb(C, reg8,bit); }
:LMB C, X1indb^"."^bit is op=0xB0 & X1indb; bitop0=2 & bit & C  {  op_lmb(C, X1indb,bit); }
:LMB C, DPinddecb^"."^bit is op=0xB1 & DPinddecb; bitop0=2 & bit & C  {  op_lmb(C, DPinddecb,bit); }
:LMB C, DPindb^"."^bit is op=0xB2 & DPindb; bitop0=2 & bit & C  {  op_lmb(C, DPindb,bit); }
:LMB C, DPindincb^"."^bit is op=0xB3 & DPindincb; bitop0=2 & bit & C  {  op_lmb(C, DPindincb,bit); }
:LMB C, op1fix8^"."^bit is op=0xB4; op1fix8; bitop0=2 & bit & C  {  op_lmb(C, op1fix8,bit); }
:LMB C, op1off8^"."^bit is op=0xB5; op1off8; bitop0=2 & bit & C  {  op_lmb(C, op1off8,bit); }
:LMB C, op1sfr8^"."^bit is op=0xB6; op1sfr8; bitop0=2 & bit & C  {  op_lmb(C, op1sfr8,bit); }
:LMB C, op1n16b^"."^bit is op=0xB7; op1n16b; bitop0=2 & bit & C  {  op_lmb(C, op1n16b,bit); }
:LMB C, X1immb^"."^bit is op=0xB8; X1immb; bitop0=2 & bit & C  {  op_lmb(C, X1immb,bit); }
:LMB C, X2immb^"."^bit is op=0xB9; X2immb; bitop0=2 & bit & C  {  op_lmb(C, X2immb,bit); }
:LMB C, X1plusAb^"."^bit is op=0xBA & X1plusAb; bitop0=2 & bit & C  {  op_lmb(C, X1plusAb,bit); }
:LMB C, X1plusR0b^"."^bit is op=0xBB & X1plusR0b; bitop0=2 & bit & C  {  op_lmb(C, X1plusR0b,bit); }
:LMB C, PSWL^"."^bit is op=0x8A & PSWL; bitop0=2 & bit & C  {  op_lmb(C, PSWL,bit); }
:LMB C, PSWH^"."^bit is op=0x9A & PSWH; bitop0=2 & bit & C  {  op_lmb(C, PSWH,bit); }
:LMB C, n7b^"."^bit is op=0x9B; n7b; bitop0=2 & bit & C  {  op_lmb(C, n7b,bit); }
:SMB A8^"."^bit, C is op=0xBC; bitop0=3 & bit & A8 & C  {  op_smb(A8,bit, C); }
:SMB reg8^"."^bit, C is regop0=0xd & reg8; bitop0=3 & bit & C  {  op_smb(reg8,bit, C); }
:SMB X1indb^"."^bit, C is op=0xB0 & X1indb; bitop0=3 & bit & C  {  op_smb(X1indb,bit, C); }
:SMB DPinddecb^"."^bit, C is op=0xB1 & DPinddecb; bitop0=3 & bit & C  {  op_smb(DPinddecb,bit, C); }
:SMB DPindb^"."^bit, C is op=0xB2 & DPindb; bitop0=3 & bit & C  {  op_smb(DPindb,bit, C); }
:SMB DPindincb^"."^bit, C is op=0xB3 & DPindincb; bitop0=3 & bit & C  {  op_smb(DPindincb,bit, C); }
:SMB op1fix8^"."^bit, C is op=0xB4; op1fix8; bitop0=3 & bit & C  {  op_smb(op1fix8,bit, C); }
:SMB op1off8^"."^bit, C is op=0xB5; op1off8; bitop0=3 & bit & C  {  op_smb(op1off8,bit, C); }
:SMB op1sfr8^"."^bit, C is op=0xB6; op1sfr8; bitop0=3 & bit & C  {  op_smb(op1sfr8,bit, C); }
:SMB op1n16b^"."^bit, C is op=0xB7; op1n16b; bitop0=3 & bit & C  {  op_smb(op1n16b,bit, C); }
:SMB X1immb^"."^bit, C is op=0xB8; X1immb; bitop0=3 & bit & C  {  op_smb(X1immb,bit, C); }
:SMB X2immb^"."^bit, C is op=0xB9; X2immb; bitop0=3 & bit & C  {  op_smb(X2immb,bit, C); }
:SMB X1plusAb^"."^bit, C is op=0xBA & X1plusAb; bitop0=3 & bit & C  {  op_smb(X1plusAb,bit, C); }
:SMB X1plusR0b^"."^bit, C is op=0xBB & X1plusR0b; bitop0=3 & bit & C  {  op_smb(X1plusR0b,bit, C); }
:SMB PSWL^"."^bit, C is op=0x8A & PSWL; bitop0=3 & bit & C  {  op_smb(PSWL,bit, C); }
:SMB PSWH^"."^bit, C is op=0x9A & PSWH; bitop0=3 & bit & C  {  op_smb(PSWH,bit, C); }
:SMB n7b^"."^bit, C is op=0x9B; n7b; bitop0=3 & bit & C  {  op_smb(n7b,bit, C); }
:MBR C, reg8^"."^(AL) is regop0=0xd & reg8; op=0xBA & C & AL  {  op_mbr(C, reg8,(AL)); }
:MBR C, X1indb^"."^(AL) is op=0xB0 & X1indb; op=0xBA & C & AL  {  op_mbr(C, X1indb,(AL)); }
:MBR C, DPinddecb^"."^(AL) is op=0xB1 & DPinddecb; op=0xBA & C & AL  {  op_mbr(C, DPinddecb,(AL)); }
:MBR C, DPindb^"."^(AL) is op=0xB2 & DPindb; op=0xBA & C & AL  {  op_mbr(C, DPindb,(AL)); }
:MBR C, DPindincb^"."^(AL) is op=0xB3 & DPindincb; op=0xBA & C & AL  {  op_mbr(C, DPindincb,(AL)); }
:MBR C, op1fix8^"."^(AL) is op=0xB4; op1fix8; op=0xBA & C & AL  {  op_mbr(C, op1fix8,(AL)); }
:MBR C, op1off8^"."^(AL) is op=0xB5; op1off8; op=0xBA & C & AL  {  op_mbr(C, op1off8,(AL)); }
:MBR C, op1sfr8^"."^(AL) is op=0xB6; op1sfr8; op=0xBA & C & AL  {  op_mbr(C, op1sfr8,(AL)); }
:MBR C, op1n16b^"."^(AL) is op=0xB7; op1n16b; op=0xBA & C & AL  {  op_mbr(C, op1n16b,(AL)); }
:MBR C, X1immb^"."^(AL) is op=0xB8; X1immb; op=0xBA & C & AL  {  op_mbr(C, X1immb,(AL)); }
:MBR C, X2immb^"."^(AL) is op=0xB9; X2immb; op=0xBA & C & AL  {  op_mbr(C, X2immb,(AL)); }
:MBR C, X1plusAb^"."^(AL) is op=0xBA & X1plusAb; op=0xBA & C & AL  {  op_mbr(C, X1plusAb,(AL)); }
:MBR C, X1plusR0b^"."^(AL) is op=0xBB & X1plusR0b; op=0xBA & C & AL  {  op_mbr(C, X1plusR0b,(AL)); }
:MBR C, PSWL^"."^(AL) is op=0x8A & PSWL; op=0xBA & C & AL  {  op_mbr(C, PSWL,(AL)); }
:MBR C, PSWH^"."^(AL) is op=0x9A & PSWH; op=0xBA & C & AL  {  op_mbr(C, PSWH,(AL)); }
:MBR C, n7b^"."^(AL) is op=0x9B; n7b; op=0xBA & C & AL  {  op_mbr(C, n7b,(AL)); }
:MBR reg8^"."^(AL), C is regop0=0xd & reg8; op=0xBB & AL & C  {  op_mbr(reg8,(AL), C); }
:MBR X1indb^"."^(AL), C is op=0xB0 & X1indb; op=0xBB & AL & C  {  op_mbr(X1indb,(AL), C); }
:MBR DPinddecb^"."^(AL), C is op=0xB1 & DPinddecb; op=0xBB & AL & C  {  op_mbr(DPinddecb,(AL), C); }
:MBR DPindb^"."^(AL), C is op=0xB2 & DPindb; op=0xBB & AL & C  {  op_mbr(DPindb,(AL), C); }
:MBR DPindincb^"."^(AL), C is op=0xB3 & DPindincb; op=0xBB & AL & C  {  op_mbr(DPindincb,(AL), C); }
:MBR op1fix8^"."^(AL), C is op=0xB4; op1fix8; op=0xBB & AL & C  {  op_mbr(op1fix8,(AL), C); }
:MBR op1off8^"."^(AL), C is op=0xB5; op1off8; op=0xBB & AL & C  {  op_mbr(op1off8,(AL), C); }
:MBR op1sfr8^"."^(AL), C is op=0xB6; op1sfr8; op=0xBB & AL & C  {  op_mbr(op1sfr8,(AL), C); }
:MBR op1n16b^"."^(AL), C is op=0xB7; op1n16b; op=0xBB & AL & C  {  op_mbr(op1n16b,(AL), C); }
:MBR X1immb^"."^(AL), C is op=0xB8; X1immb; op=0xBB & AL & C  {  op_mbr(X1immb,(AL), C); }
:MBR X2immb^"."^(AL), C is op=0xB9; X2immb; op=0xBB & AL & C  {  op_mbr(X2immb,(AL), C); }
:MBR X1plusAb^"."^(AL), C is op=0xBA & X1plusAb; op=0xBB & AL & C  {  op_mbr(X1plusAb,(AL), C); }
:MBR X1plusR0b^"."^(AL), C is op=0xBB & X1plusR0b; op=0xBB & AL & C  {  op_mbr(X1plusR0b,(AL), C); }
:MBR PSWL^"."^(AL), C is op=0x8A & PSWL; op=0xBB & AL & C  {  op_mbr(PSWL,(AL), C); }
:MBR PSWH^"."^(AL), C is op=0x9A & PSWH; op=0xBB & AL & C  {  op_mbr(PSWH,(AL), C); }
:MBR n7b^"."^(AL), C is op=0x9B; n7b; op=0xBB & AL & C  {  op_mbr(n7b,(AL), C); }
:MOV ERn, #n16 is hregop0=9 & ERn; n16  {  op_mov(ERn, n16:2); }
:MOV PRn, #n16 is hregop0=8 & PRn; n16  {  op_mov(PRn, n16:2); }
:MOV off16, #n16 is op=0xC7; off16; n16  {  op_mov(off16, n16:2); }
:MOV sfr16, #n16 is op=0xC6; sfr16; n16  {  op_mov(sfr16, n16:2); }
:MOV A16, reg16 is regop0=0xc & reg16; op=0x97 & A16  {  op_mov(A16, reg16); }
:MOV A16, X1indw is op=0xA0 & X1indw; op=0x97 & A16  {  op_mov(A16, X1indw); }
:MOV A16, DPinddecw is op=0xA1 & DPinddecw; op=0x97 & A16  {  op_mov(A16, DPinddecw); }
:MOV A16, DPindw is op=0xA2 & DPindw; op=0x97 & A16  {  op_mov(A16, DPindw); }
:MOV A16, DPindincw is op=0xA3 & DPindincw; op=0x97 & A16  {  op_mov(A16, DPindincw); }
:MOV A16, op1fix16 is op=0xA4; op1fix16; op=0x97 & A16  {  op_mov(A16, op1fix16); }
:MOV A16, op1off16 is op=0xA5; op1off16; op=0x97 & A16  {  op_mov(A16, op1off16); }
:MOV A16, op1sfr16 is op=0xA6; op1sfr16; op=0x97 & A16  {  op_mov(A16, op1sfr16); }
:MOV A16, op1n16w is op=0xA7; op1n16w; op=0x97 & A16  {  op_mov(A16, op1n16w); }
:MOV A16, X1immw is op=0xA8; X1immw; op=0x97 & A16  {  op_mov(A16, X1immw); }
:MOV A16, X2immw is op=0xA9; X2immw; op=0x97 & A16  {  op_mov(A16, X2immw); }
:MOV A16, X1plusAw is op=0xAA & X1plusAw; op=0x97 & A16  {  op_mov(A16, X1plusAw); }
:MOV A16, X1plusR0w is op=0xAB & X1plusR0w; op=0x97 & A16  {  op_mov(A16, X1plusR0w); }
:MOV A16, n7w is op=0x8B; n7w; op=0x97 & A16  {  op_mov(A16, n7w); }
:MOV ERn, reg16 is regop0=0xc & reg16; hregop0=28 & ERn  {  op_mov(ERn, reg16); }
:MOV ERn, X1indw is op=0xA0 & X1indw; hregop0=28 & ERn  {  op_mov(ERn, X1indw); }
:MOV ERn, DPinddecw is op=0xA1 & DPinddecw; hregop0=28 & ERn  {  op_mov(ERn, DPinddecw); }
:MOV ERn, DPindw is op=0xA2 & DPindw; hregop0=28 & ERn  {  op_mov(ERn, DPindw); }
:MOV ERn, DPindincw is op=0xA3 & DPindincw; hregop0=28 & ERn  {  op_mov(ERn, DPindincw); }
:MOV ERn, op1fix16 is op=0xA4; op1fix16; hregop0=28 & ERn  {  op_mov(ERn, op1fix16); }
:MOV ERn, op1off16 is op=0xA5; op1off16; hregop0=28 & ERn  {  op_mov(ERn, op1off16); }
:MOV ERn, op1sfr16 is op=0xA6; op1sfr16; hregop0=28 & ERn  {  op_mov(ERn, op1sfr16); }
:MOV ERn, op1n16w is op=0xA7; op1n16w; hregop0=28 & ERn  {  op_mov(ERn, op1n16w); }
:MOV ERn, X1immw is op=0xA8; X1immw; hregop0=28 & ERn  {  op_mov(ERn, X1immw); }
:MOV ERn, X2immw is op=0xA9; X2immw; hregop0=28 & ERn  {  op_mov(ERn, X2immw); }
:MOV ERn, X1plusAw is op=0xAA & X1plusAw; hregop0=28 & ERn  {  op_mov(ERn, X1plusAw); }
:MOV ERn, X1plusR0w is op=0xAB & X1plusR0w; hregop0=28 & ERn  {  op_mov(ERn, X1plusR0w); }
:MOV ERn, n7w is op=0x8B; n7w; hregop0=28 & ERn  {  op_mov(ERn, n7w); }
:MOV PRn, reg16 is regop0=0xc & reg16; hregop0=29 & PRn  {  op_mov(PRn, reg16); }
:MOV PRn, X1indw is op=0xA0 & X1indw; hregop0=29 & PRn  {  op_mov(PRn, X1indw); }
:MOV PRn, DPinddecw is op=0xA1 & DPinddecw; hregop0=29 & PRn  {  op_mov(PRn, DPinddecw); }
:MOV PRn, DPindw is op=0xA2 & DPindw; hregop0=29 & PRn  {  op_mov(PRn, DPindw); }
:MOV PRn, DPindincw is op=0xA3 & DPindincw; hregop0=29 & PRn  {  op_mov(PRn, DPindincw); }
:MOV PRn, op1fix16 is op=0xA4; op1fix16; hregop0=29 & PRn  {  op_mov(PRn, op1fix16); }
:MOV PRn, op1off16 is op=0xA5; op1off16; hregop0=29 & PRn  {  op_mov(PRn, op1off16); }
:MOV PRn, op1sfr16 is op=0xA6; op1sfr16; hregop0=29 & PRn  {  op_mov(PRn, op1sfr16); }
:MOV PRn, op1n16w is op=0xA7; op1n16w; hregop0=29 & PRn  {  op_mov(PRn, op1n16w); }
:MOV PRn, X1immw is op=0xA8; X1immw; hregop0=29 & PRn  {  op_mov(PRn, X1immw); }
:MOV PRn, X2immw is op=0xA9; X2immw; hregop0=29 & PRn  {  op_mov(PRn, X2immw); }
:MOV PRn, X1plusAw is op=0xAA & X1plusAw; hregop0=29 & PRn  {  op_mov(PRn, X1plusAw); }
:MOV PRn, X1plusR0w is op=0xAB & X1plusR0w; hregop0=29 & PRn  {  op_mov(PRn, X1plusR0w); }
:MOV PRn, n7w is op=0x8B; n7w; hregop0=29 & PRn  {  op_mov(PRn, n7w); }
:MOV X1indw2, reg16 is regop0=0xc & reg16; op=0x88 & X1indw2  {  op_mov(X1indw2, reg16); }
:MOV X1indw2, X1indw is op=0xA0 & X1indw; op=0x88 & X1indw2  {  op_mov(X1indw2, X1indw); }
:MOV X1indw2, DPinddecw is op=0xA1 & DPinddecw; op=0x88 & X1indw2  {  op_mov(X1indw2, DPinddecw); }
:MOV X1indw2, DPindw is op=0xA2 & DPindw; op=0x88 & X1indw2  {  op_mov(X1indw2, DPindw); }
:MOV X1indw2, DPindincw is op=0xA3 & DPindincw; op=0x88 & X1indw2  {  op_mov(X1indw2, DPindincw); }
:MOV X1indw2, op1fix16 is op=0xA4; op1fix16; op=0x88 & X1indw2  {  op_mov(X1indw2, op1fix16); }
:MOV X1indw2, op1off16 is op=0xA5; op1off16; op=0x88 & X1indw2  {  op_mov(X1indw2, op1off16); }
:MOV X1indw2, op1sfr16 is op=0xA6; op1sfr16; op=0x88 & X1indw2  {  op_mov(X1indw2, op1sfr16); }
:MOV X1indw2, op1n16w is op=0xA7; op1n16w; op=0x88 & X1indw2  {  op_mov(X1indw2, op1n16w); }
:MOV X1indw2, X1immw is op=0xA8; X1immw; op=0x88 & X1indw2  {  op_mov(X1indw2, X1immw); }
:MOV X1indw2, X2immw is op=0xA9; X2immw; op=0x88 & X1indw2  {  op_mov(X1indw2, X2immw); }
:MOV X1indw2, X1plusAw is op=0xAA & X1plusAw; op=0x88 & X1indw2  {  op_mov(X1indw2, X1plusAw); }
:MOV X1indw2, X1plusR0w is op=0xAB & X1plusR0w; op=0x88 & X1indw2  {  op_mov(X1indw2, X1plusR0w); }
:MOV X1indw2, n7w is op=0x8B; n7w; op=0x88 & X1indw2  {  op_mov(X1indw2, n7w); }
:MOV DPinddecw2, reg16 is regop0=0xc & reg16; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, reg16); }
:MOV DPinddecw2, X1indw is op=0xA0 & X1indw; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, X1indw); }
:MOV DPinddecw2, DPinddecw is op=0xA1 & DPinddecw; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, DPinddecw); }
:MOV DPinddecw2, DPindw is op=0xA2 & DPindw; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, DPindw); }
:MOV DPinddecw2, DPindincw is op=0xA3 & DPindincw; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, DPindincw); }
:MOV DPinddecw2, op1fix16 is op=0xA4; op1fix16; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, op1fix16); }
:MOV DPinddecw2, op1off16 is op=0xA5; op1off16; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, op1off16); }
:MOV DPinddecw2, op1sfr16 is op=0xA6; op1sfr16; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, op1sfr16); }
:MOV DPinddecw2, op1n16w is op=0xA7; op1n16w; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, op1n16w); }
:MOV DPinddecw2, X1immw is op=0xA8; X1immw; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, X1immw); }
:MOV DPinddecw2, X2immw is op=0xA9; X2immw; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, X2immw); }
:MOV DPinddecw2, X1plusAw is op=0xAA & X1plusAw; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, X1plusAw); }
:MOV DPinddecw2, X1plusR0w is op=0xAB & X1plusR0w; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, X1plusR0w); }
:MOV DPinddecw2, n7w is op=0x8B; n7w; op=0x89 & DPinddecw2  {  op_mov(DPinddecw2, n7w); }
:MOV DPindw2, reg16 is regop0=0xc & reg16; op=0x8A & DPindw2  {  op_mov(DPindw2, reg16); }
:MOV DPindw2, X1indw is op=0xA0 & X1indw; op=0x8A & DPindw2  {  op_mov(DPindw2, X1indw); }
:MOV DPindw2, DPinddecw is op=0xA1 & DPinddecw; op=0x8A & DPindw2  {  op_mov(DPindw2, DPinddecw); }
:MOV DPindw2, DPindw is op=0xA2 & DPindw; op=0x8A & DPindw2  {  op_mov(DPindw2, DPindw); }
:MOV DPindw2, DPindincw is op=0xA3 & DPindincw; op=0x8A & DPindw2  {  op_mov(DPindw2, DPindincw); }
:MOV DPindw2, op1fix16 is op=0xA4; op1fix16; op=0x8A & DPindw2  {  op_mov(DPindw2, op1fix16); }
:MOV DPindw2, op1off16 is op=0xA5; op1off16; op=0x8A & DPindw2  {  op_mov(DPindw2, op1off16); }
:MOV DPindw2, op1sfr16 is op=0xA6; op1sfr16; op=0x8A & DPindw2  {  op_mov(DPindw2, op1sfr16); }
:MOV DPindw2, op1n16w is op=0xA7; op1n16w; op=0x8A & DPindw2  {  op_mov(DPindw2, op1n16w); }
:MOV DPindw2, X1immw is op=0xA8; X1immw; op=0x8A & DPindw2  {  op_mov(DPindw2, X1immw); }
:MOV DPindw2, X2immw is op=0xA9; X2immw; op=0x8A & DPindw2  {  op_mov(DPindw2, X2immw); }
:MOV DPindw2, X1plusAw is op=0xAA & X1plusAw; op=0x8A & DPindw2  {  op_mov(DPindw2, X1plusAw); }
:MOV DPindw2, X1plusR0w is op=0xAB & X1plusR0w; op=0x8A & DPindw2  {  op_mov(DPindw2, X1plusR0w); }
:MOV DPindw2, n7w is op=0x8B; n7w; op=0x8A & DPindw2  {  op_mov(DPindw2, n7w); }
:MOV DPindincw2, reg16 is regop0=0xc & reg16; op=0x8B & DPindincw2  {  op_mov(DPindincw2, reg16); }
:MOV DPindincw2, X1indw is op=0xA0 & X1indw; op=0x8B & DPindincw2  {  op_mov(DPindincw2, X1indw); }
:MOV DPindincw2, DPinddecw is op=0xA1 & DPinddecw; op=0x8B & DPindincw2  {  op_mov(DPindincw2, DPinddecw); }
:MOV DPindincw2, DPindw is op=0xA2 & DPindw; op=0x8B & DPindincw2  {  op_mov(DPindincw2, DPindw); }
:MOV DPindincw2, DPindincw is op=0xA3 & DPindincw; op=0x8B & DPindincw2  {  op_mov(DPindincw2, DPindincw); }
:MOV DPindincw2, op1fix16 is op=0xA4; op1fix16; op=0x8B & DPindincw2  {  op_mov(DPindincw2, op1fix16); }
:MOV DPindincw2, op1off16 is op=0xA5; op1off16; op=0x8B & DPindincw2  {  op_mov(DPindincw2, op1off16); }
:MOV DPindincw2, op1sfr16 is op=0xA6; op1sfr16; op=0x8B & DPindincw2  {  op_mov(DPindincw2, op1sfr16); }
:MOV DPindincw2, op1n16w is op=0xA7; op1n16w; op=0x8B & DPindincw2  {  op_mov(DPindincw2, op1n16w); }
:MOV DPindincw2, X1immw is op=0xA8; X1immw; op=0x8B & DPindincw2  {  op_mov(DPindincw2, X1immw); }
:MOV DPindincw2, X2immw is op=0xA9; X2immw; op=0x8B & DPindincw2  {  op_mov(DPindincw2, X2immw); }
:MOV DPindincw2, X1plusAw is op=0xAA & X1plusAw; op=0x8B & DPindincw2  {  op_mov(DPindincw2, X1plusAw); }
:MOV DPindincw2, X1plusR0w is op=0xAB & X1plusR0w; op=0x8B & DPindincw2  {  op_mov(DPindincw2, X1plusR0w); }
:MOV DPindincw2, n7w is op=0x8B; n7w; op=0x8B & DPindincw2  {  op_mov(DPindincw2, n7w); }
:MOV fix16, reg16 is regop0=0xc & reg16; op=0x86; fix16  {  op_mov(fix16, reg16); }
:MOV fix16, X1indw is op=0xA0 & X1indw; op=0x86; fix16  {  op_mov(fix16, X1indw); }
:MOV fix16, DPinddecw is op=0xA1 & DPinddecw; op=0x86; fix16  {  op_mov(fix16, DPinddecw); }
:MOV fix16, DPindw is op=0xA2 & DPindw; op=0x86; fix16  {  op_mov(fix16, DPindw); }
:MOV fix16, DPindincw is op=0xA3 & DPindincw; op=0x86; fix16  {  op_mov(fix16, DPindincw); }
:MOV fix16, op1fix16 is op=0xA4; op1fix16; op=0x86; fix16  {  op_mov(fix16, op1fix16); }
:MOV fix16, op1off16 is op=0xA5; op1off16; op=0x86; fix16  {  op_mov(fix16, op1off16); }
:MOV fix16, op1sfr16 is op=0xA6; op1sfr16; op=0x86; fix16  {  op_mov(fix16, op1sfr16); }
:MOV fix16, op1n16w is op=0xA7; op1n16w; op=0x86; fix16  {  op_mov(fix16, op1n16w); }
:MOV fix16, X1immw is op=0xA8; X1immw; op=0x86; fix16  {  op_mov(fix16, X1immw); }
:MOV fix16, X2immw is op=0xA9; X2immw; op=0x86; fix16  {  op_mov(fix16, X2immw); }
:MOV fix16, X1plusAw is op=0xAA & X1plusAw; op=0x86; fix16  {  op_mov(fix16, X1plusAw); }
:MOV fix16, X1plusR0w is op=0xAB & X1plusR0w; op=0x86; fix16  {  op_mov(fix16, X1plusR0w); }
:MOV fix16, n7w is op=0x8B; n7w; op=0x86; fix16  {  op_mov(fix16, n7w); }
:MOV off16, reg16 is regop0=0xc & reg16; op=0x87; off16  {  op_mov(off16, reg16); }
:MOV off16, X1indw is op=0xA0 & X1indw; op=0x87; off16  {  op_mov(off16, X1indw); }
:MOV off16, DPinddecw is op=0xA1 & DPinddecw; op=0x87; off16  {  op_mov(off16, DPinddecw); }
:MOV off16, DPindw is op=0xA2 & DPindw; op=0x87; off16  {  op_mov(off16, DPindw); }
:MOV off16, DPindincw is op=0xA3 & DPindincw; op=0x87; off16  {  op_mov(off16, DPindincw); }
:MOV off16, op1fix16 is op=0xA4; op1fix16; op=0x87; off16  {  op_mov(off16, op1fix16); }
:MOV off16, op1off16 is op=0xA5; op1off16; op=0x87; off16  {  op_mov(off16, op1off16); }
:MOV off16, op1sfr16 is op=0xA6; op1sfr16; op=0x87; off16  {  op_mov(off16, op1sfr16); }
:MOV off16, op1n16w is op=0xA7; op1n16w; op=0x87; off16  {  op_mov(off16, op1n16w); }
:MOV off16, X1immw is op=0xA8; X1immw; op=0x87; off16  {  op_mov(off16, X1immw); }
:MOV off16, X2immw is op=0xA9; X2immw; op=0x87; off16  {  op_mov(off16, X2immw); }
:MOV off16, X1plusAw is op=0xAA & X1plusAw; op=0x87; off16  {  op_mov(off16, X1plusAw); }
:MOV off16, X1plusR0w is op=0xAB & X1plusR0w; op=0x87; off16  {  op_mov(off16, X1plusR0w); }
:MOV off16, n7w is op=0x8B; n7w; op=0x87; off16  {  op_mov(off16, n7w); }
:MOV sfr16, reg16 is regop0=0xc & reg16; op=0x96; sfr16  {  op_mov(sfr16, reg16); }
:MOV sfr16, X1indw is op=0xA0 & X1indw; op=0x96; sfr16  {  op_mov(sfr16, X1indw); }
:MOV sfr16, DPinddecw is op=0xA1 & DPinddecw; op=0x96; sfr16  {  op_mov(sfr16, DPinddecw); }
:MOV sfr16, DPindw is op=0xA2 & DPindw; op=0x96; sfr16  {  op_mov(sfr16, DPindw); }
:MOV sfr16, DPindincw is op=0xA3 & DPindincw; op=0x96; sfr16  {  op_mov(sfr16, DPindincw); }
:MOV sfr16, op1fix16 is op=0xA4; op1fix16; op=0x96; sfr16  {  op_mov(sfr16, op1fix16); }
:MOV sfr16, op1off16 is op=0xA5; op1off16; op=0x96; sfr16  {  op_mov(sfr16, op1off16); }
:MOV sfr16, op1sfr16 is op=0xA6; op1sfr16; op=0x96; sfr16  {  op_mov(sfr16, op1sfr16); }
:MOV sfr16, op1n16w is op=0xA7; op1n16w; op=0x96; sfr16  {  op_mov(sfr16, op1n16w); }
:MOV sfr16, X1immw is op=0xA8; X1immw; op=0x96; sfr16  {  op_mov(sfr16, X1immw); }
:MOV sfr16, X2immw is op=0xA9; X2immw; op=0x96; sfr16  {  op_mov(sfr16, X2immw); }
:MOV sfr16, X1plusAw is op=0xAA & X1plusAw; op=0x96; sfr16  {  op_mov(sfr16, X1plusAw); }
:MOV sfr16, X1plusR0w is op=0xAB & X1plusR0w; op=0x96; sfr16  {  op_mov(sfr16, X1plusR0w); }
:MOV sfr16, n7w is op=0x8B; n7w; op=0x96; sfr16  {  op_mov(sfr16, n7w); }
:MOV op2n16w, reg16 is regop0=0xc & reg16; op=0x9B; op2n16w  {  op_mov(op2n16w, reg16); }
:MOV op2n16w, X1indw is op=0xA0 & X1indw; op=0x9B; op2n16w  {  op_mov(op2n16w, X1indw); }
:MOV op2n16w, DPinddecw is op=0xA1 & DPinddecw; op=0x9B; op2n16w  {  op_mov(op2n16w, DPinddecw); }
:MOV op2n16w, DPindw is op=0xA2 & DPindw; op=0x9B; op2n16w  {  op_mov(op2n16w, DPindw); }
:MOV op2n16w, DPindincw is op=0xA3 & DPindincw; op=0x9B; op2n16w  {  op_mov(op2n16w, DPindincw); }
:MOV op2n16w, op1fix16 is op=0xA4; op1fix16; op=0x9B; op2n16w  {  op_mov(op2n16w, op1fix16); }
:MOV op2n16w, op1off16 is op=0xA5; op1off16; op=0x9B; op2n16w  {  op_mov(op2n16w, op1off16); }
:MOV op2n16w, op1sfr16 is op=0xA6; op1sfr16; op=0x9B; op2n16w  {  op_mov(op2n16w, op1sfr16); }
:MOV op2n16w, op1n16w is op=0xA7; op1n16w; op=0x9B; op2n16w  {  op_mov(op2n16w, op1n16w); }
:MOV op2n16w, X1immw is op=0xA8; X1immw; op=0x9B; op2n16w  {  op_mov(op2n16w, X1immw); }
:MOV op2n16w, X2immw is op=0xA9; X2immw; op=0x9B; op2n16w  {  op_mov(op2n16w, X2immw); }
:MOV op2n16w, X1plusAw is op=0xAA & X1plusAw; op=0x9B; op2n16w  {  op_mov(op2n16w, X1plusAw); }
:MOV op2n16w, X1plusR0w is op=0xAB & X1plusR0w; op=0x9B; op2n16w  {  op_mov(op2n16w, X1plusR0w); }
:MOV op2n16w, n7w is op=0x8B; n7w; op=0x9B; op2n16w  {  op_mov(op2n16w, n7w); }
:MOV X1immw2, reg16 is regop0=0xc & reg16; op=0x98; X1immw2  {  op_mov(X1immw2, reg16); }
:MOV X1immw2, X1indw is op=0xA0 & X1indw; op=0x98; X1immw2  {  op_mov(X1immw2, X1indw); }
:MOV X1immw2, DPinddecw is op=0xA1 & DPinddecw; op=0x98; X1immw2  {  op_mov(X1immw2, DPinddecw); }
:MOV X1immw2, DPindw is op=0xA2 & DPindw; op=0x98; X1immw2  {  op_mov(X1immw2, DPindw); }
:MOV X1immw2, DPindincw is op=0xA3 & DPindincw; op=0x98; X1immw2  {  op_mov(X1immw2, DPindincw); }
:MOV X1immw2, op1fix16 is op=0xA4; op1fix16; op=0x98; X1immw2  {  op_mov(X1immw2, op1fix16); }
:MOV X1immw2, op1off16 is op=0xA5; op1off16; op=0x98; X1immw2  {  op_mov(X1immw2, op1off16); }
:MOV X1immw2, op1sfr16 is op=0xA6; op1sfr16; op=0x98; X1immw2  {  op_mov(X1immw2, op1sfr16); }
:MOV X1immw2, op1n16w is op=0xA7; op1n16w; op=0x98; X1immw2  {  op_mov(X1immw2, op1n16w); }
:MOV X1immw2, X1immw is op=0xA8; X1immw; op=0x98; X1immw2  {  op_mov(X1immw2, X1immw); }
:MOV X1immw2, X2immw is op=0xA9; X2immw; op=0x98; X1immw2  {  op_mov(X1immw2, X2immw); }
:MOV X1immw2, X1plusAw is op=0xAA & X1plusAw; op=0x98; X1immw2  {  op_mov(X1immw2, X1plusAw); }
:MOV X1immw2, X1plusR0w is op=0xAB & X1plusR0w; op=0x98; X1immw2  {  op_mov(X1immw2, X1plusR0w); }
:MOV X1immw2, n7w is op=0x8B; n7w; op=0x98; X1immw2  {  op_mov(X1immw2, n7w); }
:MOV X2immw2, reg16 is regop0=0xc & reg16; op=0x99; X2immw2  {  op_mov(X2immw2, reg16); }
:MOV X2immw2, X1indw is op=0xA0 & X1indw; op=0x99; X2immw2  {  op_mov(X2immw2, X1indw); }
:MOV X2immw2, DPinddecw is op=0xA1 & DPinddecw; op=0x99; X2immw2  {  op_mov(X2immw2, DPinddecw); }
:MOV X2immw2, DPindw is op=0xA2 & DPindw; op=0x99; X2immw2  {  op_mov(X2immw2, DPindw); }
:MOV X2immw2, DPindincw is op=0xA3 & DPindincw; op=0x99; X2immw2  {  op_mov(X2immw2, DPindincw); }
:MOV X2immw2, op1fix16 is op=0xA4; op1fix16; op=0x99; X2immw2  {  op_mov(X2immw2, op1fix16); }
:MOV X2immw2, op1off16 is op=0xA5; op1off16; op=0x99; X2immw2  {  op_mov(X2immw2, op1off16); }
:MOV X2immw2, op1sfr16 is op=0xA6; op1sfr16; op=0x99; X2immw2  {  op_mov(X2immw2, op1sfr16); }
:MOV X2immw2, op1n16w is op=0xA7; op1n16w; op=0x99; X2immw2  {  op_mov(X2immw2, op1n16w); }
:MOV X2immw2, X1immw is op=0xA8; X1immw; op=0x99; X2immw2  {  op_mov(X2immw2, X1immw); }
:MOV X2immw2, X2immw is op=0xA9; X2immw; op=0x99; X2immw2  {  op_mov(X2immw2, X2immw); }
:MOV X2immw2, X1plusAw is op=0xAA & X1plusAw; op=0x99; X2immw2  {  op_mov(X2immw2, X1plusAw); }
:MOV X2immw2, X1plusR0w is op=0xAB & X1plusR0w; op=0x99; X2immw2  {  op_mov(X2immw2, X1plusR0w); }
:MOV X2immw2, n7w is op=0x8B; n7w; op=0x99; X2immw2  {  op_mov(X2immw2, n7w); }
:MOV n7pw, reg16 is regop0=0xc & reg16; op=0x9A; n7pw  {  op_mov(n7pw, reg16); }
:MOV n7pw, X1indw is op=0xA0 & X1indw; op=0x9A; n7pw  {  op_mov(n7pw, X1indw); }
:MOV n7pw, DPinddecw is op=0xA1 & DPinddecw; op=0x9A; n7pw  {  op_mov(n7pw, DPinddecw); }
:MOV n7pw, DPindw is op=0xA2 & DPindw; op=0x9A; n7pw  {  op_mov(n7pw, DPindw); }
:MOV n7pw, DPindincw is op=0xA3 & DPindincw; op=0x9A; n7pw  {  op_mov(n7pw, DPindincw); }
:MOV n7pw, op1fix16 is op=0xA4; op1fix16; op=0x9A; n7pw  {  op_mov(n7pw, op1fix16); }
:MOV n7pw, op1off16 is op=0xA5; op1off16; op=0x9A; n7pw  {  op_mov(n7pw, op1off16); }
:MOV n7pw, op1sfr16 is op=0xA6; op1sfr16; op=0x9A; n7pw  {  op_mov(n7pw, op1sfr16); }
:MOV n7pw, op1n16w is op=0xA7; op1n16w; op=0x9A; n7pw  {  op_mov(n7pw, op1n16w); }
:MOV n7pw, X1immw is op=0xA8; X1immw; op=0x9A; n7pw  {  op_mov(n7pw, X1immw); }
:MOV n7pw, X2immw is op=0xA9; X2immw; op=0x9A; n7pw  {  op_mov(n7pw, X2immw); }
:MOV n7pw, X1plusAw is op=0xAA & X1plusAw; op=0x9A; n7pw  {  op_mov(n7pw, X1plusAw); }
:MOV n7pw, X1plusR0w is op=0xAB & X1plusR0w; op=0x9A; n7pw  {  op_mov(n7pw, X1plusR0w); }
:MOV n7pw, n7w is op=0x8B; n7w; op=0x9A; n7pw  {  op_mov(n7pw, n7w); }
:MOV X1plusAw2, reg16 is regop0=0xc & reg16; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, reg16); }
:MOV X1plusAw2, X1indw is op=0xA0 & X1indw; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, X1indw); }
:MOV X1plusAw2, DPinddecw is op=0xA1 & DPinddecw; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, DPinddecw); }
:MOV X1plusAw2, DPindw is op=0xA2 & DPindw; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, DPindw); }
:MOV X1plusAw2, DPindincw is op=0xA3 & DPindincw; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, DPindincw); }
:MOV X1plusAw2, op1fix16 is op=0xA4; op1fix16; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, op1fix16); }
:MOV X1plusAw2, op1off16 is op=0xA5; op1off16; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, op1off16); }
:MOV X1plusAw2, op1sfr16 is op=0xA6; op1sfr16; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, op1sfr16); }
:MOV X1plusAw2, op1n16w is op=0xA7; op1n16w; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, op1n16w); }
:MOV X1plusAw2, X1immw is op=0xA8; X1immw; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, X1immw); }
:MOV X1plusAw2, X2immw is op=0xA9; X2immw; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, X2immw); }
:MOV X1plusAw2, X1plusAw is op=0xAA & X1plusAw; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, X1plusAw); }
:MOV X1plusAw2, X1plusR0w is op=0xAB & X1plusR0w; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, X1plusR0w); }
:MOV X1plusAw2, n7w is op=0x8B; n7w; op=0xF8 & X1plusAw2  {  op_mov(X1plusAw2, n7w); }
:MOV X1plusR0w2, reg16 is regop0=0xc & reg16; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, reg16); }
:MOV X1plusR0w2, X1indw is op=0xA0 & X1indw; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, X1indw); }
:MOV X1plusR0w2, DPinddecw is op=0xA1 & DPinddecw; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, DPinddecw); }
:MOV X1plusR0w2, DPindw is op=0xA2 & DPindw; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, DPindw); }
:MOV X1plusR0w2, DPindincw is op=0xA3 & DPindincw; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, DPindincw); }
:MOV X1plusR0w2, op1fix16 is op=0xA4; op1fix16; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, op1fix16); }
:MOV X1plusR0w2, op1off16 is op=0xA5; op1off16; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, op1off16); }
:MOV X1plusR0w2, op1sfr16 is op=0xA6; op1sfr16; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, op1sfr16); }
:MOV X1plusR0w2, op1n16w is op=0xA7; op1n16w; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, op1n16w); }
:MOV X1plusR0w2, X1immw is op=0xA8; X1immw; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, X1immw); }
:MOV X1plusR0w2, X2immw is op=0xA9; X2immw; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, X2immw); }
:MOV X1plusR0w2, X1plusAw is op=0xAA & X1plusAw; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, X1plusAw); }
:MOV X1plusR0w2, X1plusR0w is op=0xAB & X1plusR0w; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, X1plusR0w); }
:MOV X1plusR0w2, n7w is op=0x8B; n7w; op=0xF9 & X1plusR0w2  {  op_mov(X1plusR0w2, n7w); }
:MOV reg16, A16 is regop0=0xc & reg16; op=0xAA & A16  {  op_mov(reg16, A16); }
:MOV X1indw, A16 is op=0xA0 & X1indw; op=0xAA & A16  {  op_mov(X1indw, A16); }
:MOV DPinddecw, A16 is op=0xA1 & DPinddecw; op=0xAA & A16  {  op_mov(DPinddecw, A16); }
:MOV DPindw, A16 is op=0xA2 & DPindw; op=0xAA & A16  {  op_mov(DPindw, A16); }
:MOV DPindincw, A16 is op=0xA3 & DPindincw; op=0xAA & A16  {  op_mov(DPindincw, A16); }
:MOV op1fix16, A16 is op=0xA4; op1fix16; op=0xAA & A16  {  op_mov(op1fix16, A16); }
:MOV op1off16, A16 is op=0xA5; op1off16; op=0xAA & A16  {  op_mov(op1off16, A16); }
:MOV op1sfr16, A16 is op=0xA6; op1sfr16; op=0xAA & A16  {  op_mov(op1sfr16, A16); }
:MOV op1n16w, A16 is op=0xA7; op1n16w; op=0xAA & A16  {  op_mov(op1n16w, A16); }
:MOV X1immw, A16 is op=0xA8; X1immw; op=0xAA & A16  {  op_mov(X1immw, A16); }
:MOV X2immw, A16 is op=0xA9; X2immw; op=0xAA & A16  {  op_mov(X2immw, A16); }
:MOV X1plusAw, A16 is op=0xAA & X1plusAw; op=0xAA & A16  {  op_mov(X1plusAw, A16); }
:MOV X1plusR0w, A16 is op=0xAB & X1plusR0w; op=0xAA & A16  {  op_mov(X1plusR0w, A16); }
:MOV n7w, A16 is op=0x8B; n7w; op=0xAA & A16  {  op_mov(n7w, A16); }
:MOV reg16, #n16 is regop0=0xc & reg16; op=0xAB; n16  {  op_mov(reg16, n16:2); }
:MOV X1indw, #n16 is op=0xA0 & X1indw; op=0xAB; n16  {  op_mov(X1indw, n16:2); }
:MOV DPinddecw, #n16 is op=0xA1 & DPinddecw; op=0xAB; n16  {  op_mov(DPinddecw, n16:2); }
:MOV DPindw, #n16 is op=0xA2 & DPindw; op=0xAB; n16  {  op_mov(DPindw, n16:2); }
:MOV DPindincw, #n16 is op=0xA3 & DPindincw; op=0xAB; n16  {  op_mov(DPindincw, n16:2); }
:MOV op1fix16, #n16 is op=0xA4; op1fix16; op=0xAB; n16  {  op_mov(op1fix16, n16:2); }
:MOV op1off16, #n16 is op=0xA5; op1off16; op=0xAB; n16  {  op_mov(op1off16, n16:2); }
:MOV op1sfr16, #n16 is op=0xA6; op1sfr16; op=0xAB; n16  {  op_mov(op1sfr16, n16:2); }
:MOV op1n16w, #n16 is op=0xA7; op1n16w; op=0xAB; n16  {  op_mov(op1n16w, n16:2); }
:MOV X1immw, #n16 is op=0xA8; X1immw; op=0xAB; n16  {  op_mov(X1immw, n16:2); }
:MOV X2immw, #n16 is op=0xA9; X2immw; op=0xAB; n16  {  op_mov(X2immw, n16:2); }
:MOV X1plusAw, #n16 is op=0xAA & X1plusAw; op=0xAB; n16  {  op_mov(X1plusAw, n16:2); }
:MOV X1plusR0w, #n16 is op=0xAB & X1plusR0w; op=0xAB; n16  {  op_mov(X1plusR0w, n16:2); }
:MOV n7w, #n16 is op=0x8B; n7w; op=0xAB; n16  {  op_mov(n7w, n16:2); }
:MOVB Rn, #n8 is regop0=2 & Rn; n8  {  op_movb(Rn, n8:1); }
:MOVB off8, #n8 is op=0xD7; off8; n8  {  op_movb(off8, n8:1); }
:MOVB sfr8, #n8 is op=0xD6; sfr8; n8  {  op_movb(sfr8, n8:1); }
:MOVB A8, reg8 is regop0=0xd & reg8; op=0x97 & A8  {  op_movb(A8, reg8); }
:MOVB A8, X1indb is op=0xB0 & X1indb; op=0x97 & A8  {  op_movb(A8, X1indb); }
:MOVB A8, DPinddecb is op=0xB1 & DPinddecb; op=0x97 & A8  {  op_movb(A8, DPinddecb); }
:MOVB A8, DPindb is op=0xB2 & DPindb; op=0x97 & A8  {  op_movb(A8, DPindb); }
:MOVB A8, DPindincb is op=0xB3 & DPindincb; op=0x97 & A8  {  op_movb(A8, DPindincb); }
:MOVB A8, op1fix8 is op=0xB4; op1fix8; op=0x97 & A8  {  op_movb(A8, op1fix8); }
:MOVB A8, op1off8 is op=0xB5; op1off8; op=0x97 & A8  {  op_movb(A8, op1off8); }
:MOVB A8, op1sfr8 is op=0xB6; op1sfr8; op=0x97 & A8  {  op_movb(A8, op1sfr8); }
:MOVB A8, op1n16b is op=0xB7; op1n16b; op=0x97 & A8  {  op_movb(A8, op1n16b); }
:MOVB A8, X1immb is op=0xB8; X1immb; op=0x97 & A8  {  op_movb(A8, X1immb); }
:MOVB A8, X2immb is op=0xB9; X2immb; op=0x97 & A8  {  op_movb(A8, X2immb); }
:MOVB A8, X1plusAb is op=0xBA & X1plusAb; op=0x97 & A8  {  op_movb(A8, X1plusAb); }
:MOVB A8, X1plusR0b is op=0xBB & X1plusR0b; op=0x97 & A8  {  op_movb(A8, X1plusR0b); }
:MOVB A8, PSWL is op=0x8A & PSWL; op=0x97 & A8  {  op_movb(A8, PSWL); }
:MOVB A8, PSWH is op=0x9A & PSWH; op=0x97 & A8  {  op_movb(A8, PSWH); }
:MOVB A8, n7b is op=0x9B; n7b; op=0x97 & A8  {  op_movb(A8, n7b); }
:MOVB Rn, reg8 is regop0=0xd & reg8; regop0=14 & Rn  {  op_movb(Rn, reg8); }
:MOVB Rn, X1indb is op=0xB0 & X1indb; regop0=14 & Rn  {  op_movb(Rn, X1indb); }
:MOVB Rn, DPinddecb is op=0xB1 & DPinddecb; regop0=14 & Rn  {  op_movb(Rn, DPinddecb); }
:MOVB Rn, DPindb is op=0xB2 & DPindb; regop0=14 & Rn  {  op_movb(Rn, DPindb); }
:MOVB Rn, DPindincb is op=0xB3 & DPindincb; regop0=14 & Rn  {  op_movb(Rn, DPindincb); }
:MOVB Rn, op1fix8 is op=0xB4; op1fix8; regop0=14 & Rn  {  op_movb(Rn, op1fix8); }
:MOVB Rn, op1off8 is op=0xB5; op1off8; regop0=14 & Rn  {  op_movb(Rn, op1off8); }
:MOVB Rn, op1sfr8 is op=0xB6; op1sfr8; regop0=14 & Rn  {  op_movb(Rn, op1sfr8); }
:MOVB Rn, op1n16b is op=0xB7; op1n16b; regop0=14 & Rn  {  op_movb(Rn, op1n16b); }
:MOVB Rn, X1immb is op=0xB8; X1immb; regop0=14 & Rn  {  op_movb(Rn, X1immb); }
:MOVB Rn, X2immb is op=0xB9; X2immb; regop0=14 & Rn  {  op_movb(Rn, X2immb); }
:MOVB Rn, X1plusAb is op=0xBA & X1plusAb; regop0=14 & Rn  {  op_movb(Rn, X1plusAb); }
:MOVB Rn, X1plusR0b is op=0xBB & X1plusR0b; regop0=14 & Rn  {  op_movb(Rn, X1plusR0b); }
:MOVB Rn, PSWL is op=0x8A & PSWL; regop0=14 & Rn  {  op_movb(Rn, PSWL); }
:MOVB Rn, PSWH is op=0x9A & PSWH; regop0=14 & Rn  {  op_movb(Rn, PSWH); }
:MOVB Rn, n7b is op=0x9B; n7b; regop0=14 & Rn  {  op_movb(Rn, n7b); }
:MOVB X1indb2, reg8 is regop0=0xd & reg8; op=0x88 & X1indb2  {  op_movb(X1indb2, reg8); }
:MOVB X1indb2, X1indb is op=0xB0 & X1indb; op=0x88 & X1indb2  {  op_movb(X1indb2, X1indb); }
:MOVB X1indb2, DPinddecb is op=0xB1 & DPinddecb; op=0x88 & X1indb2  {  op_movb(X1indb2, DPinddecb); }
:MOVB X1indb2, DPindb is op=0xB2 & DPindb; op=0x88 & X1indb2  {  op_movb(X1indb2, DPindb); }
:MOVB X1indb2, DPindincb is op=0xB3 & DPindincb; op=0x88 & X1indb2  {  op_movb(X1indb2, DPindincb); }
:MOVB X1indb2, op1fix8 is op=0xB4; op1fix8; op=0x88 & X1indb2  {  op_movb(X1indb2, op1fix8); }
:MOVB X1indb2, op1off8 is op=0xB5; op1off8; op=0x88 & X1indb2  {  op_movb(X1indb2, op1off8); }
:MOVB X1indb2, op1sfr8 is op=0xB6; op1sfr8; op=0x88 & X1indb2  {  op_movb(X1indb2, op1sfr8); }
:MOVB X1indb2, op1n16b is op=0xB7; op1n16b; op=0x88 & X1indb2  {  op_movb(X1indb2, op1n16b); }
:MOVB X1indb2, X1immb is op=0xB8; X1immb; op=0x88 & X1indb2  {  op_movb(X1indb2, X1immb); }
:MOVB X1indb2, X2immb is op=0xB9; X2immb; op=0x88 & X1indb2  {  op_movb(X1indb2, X2immb); }
:MOVB X1indb2, X1plusAb is op=0xBA & X1plusAb; op=0x88 & X1indb2  {  op_movb(X1indb2, X1plusAb); }
:MOVB X1indb2, X1plusR0b is op=0xBB & X1plusR0b; op=0x88 & X1indb2  {  op_movb(X1indb2, X1plusR0b); }
:MOVB X1indb2, PSWL is op=0x8A & PSWL; op=0x88 & X1indb2  {  op_movb(X1indb2, PSWL); }
:MOVB X1indb2, PSWH is op=0x9A & PSWH; op=0x88 & X1indb2  {  op_movb(X1indb2, PSWH); }
:MOVB X1indb2, n7b is op=0x9B; n7b; op=0x88 & X1indb2  {  op_movb(X1indb2, n7b); }
:MOVB DPinddecb2, reg8 is regop0=0xd & reg8; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, reg8); }
:MOVB DPinddecb2, X1indb is op=0xB0 & X1indb; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, X1indb); }
:MOVB DPinddecb2, DPinddecb is op=0xB1 & DPinddecb; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, DPinddecb); }
:MOVB DPinddecb2, DPindb is op=0xB2 & DPindb; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, DPindb); }
:MOVB DPinddecb2, DPindincb is op=0xB3 & DPindincb; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, DPindincb); }
:MOVB DPinddecb2, op1fix8 is op=0xB4; op1fix8; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, op1fix8); }
:MOVB DPinddecb2, op1off8 is op=0xB5; op1off8; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, op1off8); }
:MOVB DPinddecb2, op1sfr8 is op=0xB6; op1sfr8; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, op1sfr8); }
:MOVB DPinddecb2, op1n16b is op=0xB7; op1n16b; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, op1n16b); }
:MOVB DPinddecb2, X1immb is op=0xB8; X1immb; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, X1immb); }
:MOVB DPinddecb2, X2immb is op=0xB9; X2immb; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, X2immb); }
:MOVB DPinddecb2, X1plusAb is op=0xBA & X1plusAb; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, X1plusAb); }
:MOVB DPinddecb2, X1plusR0b is op=0xBB & X1plusR0b; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, X1plusR0b); }
:MOVB DPinddecb2, PSWL is op=0x8A & PSWL; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, PSWL); }
:MOVB DPinddecb2, PSWH is op=0x9A & PSWH; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, PSWH); }
:MOVB DPinddecb2, n7b is op=0x9B; n7b; op=0x89 & DPinddecb2  {  op_movb(DPinddecb2, n7b); }
:MOVB DPindb2, reg8 is regop0=0xd & reg8; op=0x8A & DPindb2  {  op_movb(DPindb2, reg8); }
:MOVB DPindb2, X1indb is op=0xB0 & X1indb; op=0x8A & DPindb2  {  op_movb(DPindb2, X1indb); }
:MOVB DPindb2, DPinddecb is op=0xB1 & DPinddecb; op=0x8A & DPindb2  {  op_movb(DPindb2, DPinddecb); }
:MOVB DPindb2, DPindb is op=0xB2 & DPindb; op=0x8A & DPindb2  {  op_movb(DPindb2, DPindb); }
:MOVB DPindb2, DPindincb is op=0xB3 & DPindincb; op=0x8A & DPindb2  {  op_movb(DPindb2, DPindincb); }
:MOVB DPindb2, op1fix8 is op=0xB4; op1fix8; op=0x8A & DPindb2  {  op_movb(DPindb2, op1fix8); }
:MOVB DPindb2, op1off8 is op=0xB5; op1off8; op=0x8A & DPindb2  {  op_movb(DPindb2, op1off8); }
:MOVB DPindb2, op1sfr8 is op=0xB6; op1sfr8; op=0x8A & DPindb2  {  op_movb(DPindb2, op1sfr8); }
:MOVB DPindb2, op1n16b is op=0xB7; op1n16b; op=0x8A & DPindb2  {  op_movb(DPindb2, op1n16b); }
:MOVB DPindb2, X1immb is op=0xB8; X1immb; op=0x8A & DPindb2  {  op_movb(DPindb2, X1immb); }
:MOVB DPindb2, X2immb is op=0xB9; X2immb; op=0x8A & DPindb2  {  op_movb(DPindb2, X2immb); }
:MOVB DPindb2, X1plusAb is op=0xBA & X1plusAb; op=0x8A & DPindb2  {  op_movb(DPindb2, X1plusAb); }
:MOVB DPindb2, X1plusR0b is op=0xBB & X1plusR0b; op=0x8A & DPindb2  {  op_movb(DPindb2, X1plusR0b); }
:MOVB DPindb2, PSWL is op=0x8A & PSWL; op=0x8A & DPindb2  {  op_movb(DPindb2, PSWL); }
:MOVB DPindb2, PSWH is op=0x9A & PSWH; op=0x8A & DPindb2  {  op_movb(DPindb2, PSWH); }
:MOVB DPindb2, n7b is op=0x9B; n7b; op=0x8A & DPindb2  {  op_movb(DPindb2, n7b); }
:MOVB DPindincb2, reg8 is regop0=0xd & reg8; op=0x8B & DPindincb2  {  op_movb(DPindincb2, reg8); }
:MOVB DPindincb2, X1indb is op=0xB0 & X1indb; op=0x8B & DPindincb2  {  op_movb(DPindincb2, X1indb); }
:MOVB DPindincb2, DPinddecb is op=0xB1 & DPinddecb; op=0x8B & DPindincb2  {  op_movb(DPindincb2, DPinddecb); }
:MOVB DPindincb2, DPindb is op=0xB2 & DPindb; op=0x8B & DPindincb2  {  op_movb(DPindincb2, DPindb); }
:MOVB DPindincb2, DPindincb is op=0xB3 & DPindincb; op=0x8B & DPindincb2  {  op_movb(DPindincb2, DPindincb); }
:MOVB DPindincb2, op1fix8 is op=0xB4; op1fix8; op=0x8B & DPindincb2  {  op_movb(DPindincb2, op1fix8); }
:MOVB DPindincb2, op1off8 is op=0xB5; op1off8; op=0x8B & DPindincb2  {  op_movb(DPindincb2, op1off8); }
:MOVB DPindincb2, op1sfr8 is op=0xB6; op1sfr8; op=0x8B & DPindincb2  {  op_movb(DPindincb2, op1sfr8); }
:MOVB DPindincb2, op1n16b is op=0xB7; op1n16b; op=0x8B & DPindincb2  {  op_movb(DPindincb2, op1n16b); }
:MOVB DPindincb2, X1immb is op=0xB8; X1immb; op=0x8B & DPindincb2  {  op_movb(DPindincb2, X1immb); }
:MOVB DPindincb2, X2immb is op=0xB9; X2immb; op=0x8B & DPindincb2  {  op_movb(DPindincb2, X2immb); }
:MOVB DPindincb2, X1plusAb is op=0xBA & X1plusAb; op=0x8B & DPindincb2  {  op_movb(DPindincb2, X1plusAb); }
:MOVB DPindincb2, X1plusR0b is op=0xBB & X1plusR0b; op=0x8B & DPindincb2  {  op_movb(DPindincb2, X1plusR0b); }
:MOVB DPindincb2, PSWL is op=0x8A & PSWL; op=0x8B & DPindincb2  {  op_movb(DPindincb2, PSWL); }
:MOVB DPindincb2, PSWH is op=0x9A & PSWH; op=0x8B & DPindincb2  {  op_movb(DPindincb2, PSWH); }
:MOVB DPindincb2, n7b is op=0x9B; n7b; op=0x8B & DPindincb2  {  op_movb(DPindincb2, n7b); }
:MOVB fix8, reg8 is regop0=0xd & reg8; op=0x86; fix8  {  op_movb(fix8, reg8); }
:MOVB fix8, X1indb is op=0xB0 & X1indb; op=0x86; fix8  {  op_movb(fix8, X1indb); }
:MOVB fix8, DPinddecb is op=0xB1 & DPinddecb; op=0x86; fix8  {  op_movb(fix8, DPinddecb); }
:MOVB fix8, DPindb is op=0xB2 & DPindb; op=0x86; fix8  {  op_movb(fix8, DPindb); }
:MOVB fix8, DPindincb is op=0xB3 & DPindincb; op=0x86; fix8  {  op_movb(fix8, DPindincb); }
:MOVB fix8, op1fix8 is op=0xB4; op1fix8; op=0x86; fix8  {  op_movb(fix8, op1fix8); }
:MOVB fix8, op1off8 is op=0xB5; op1off8; op=0x86; fix8  {  op_movb(fix8, op1off8); }
:MOVB fix8, op1sfr8 is op=0xB6; op1sfr8; op=0x86; fix8  {  op_movb(fix8, op1sfr8); }
:MOVB fix8, op1n16b is op=0xB7; op1n16b; op=0x86; fix8  {  op_movb(fix8, op1n16b); }
:MOVB fix8, X1immb is op=0xB8; X1immb; op=0x86; fix8  {  op_movb(fix8, X1immb); }
:MOVB fix8, X2immb is op=0xB9; X2immb; op=0x86; fix8  {  op_movb(fix8, X2immb); }
:MOVB fix8, X1plusAb is op=0xBA & X1plusAb; op=0x86; fix8  {  op_movb(fix8, X1plusAb); }
:MOVB fix8, X1plusR0b is op=0xBB & X1plusR0b; op=0x86; fix8  {  op_movb(fix8, X1plusR0b); }
:MOVB fix8, PSWL is op=0x8A & PSWL; op=0x86; fix8  {  op_movb(fix8, PSWL); }
:MOVB fix8, PSWH is op=0x9A & PSWH; op=0x86; fix8  {  op_movb(fix8, PSWH); }
:MOVB fix8, n7b is op=0x9B; n7b; op=0x86; fix8  {  op_movb(fix8, n7b); }
:MOVB off8, reg8 is regop0=0xd & reg8; op=0x87; off8  {  op_movb(off8, reg8); }
:MOVB off8, X1indb is op=0xB0 & X1indb; op=0x87; off8  {  op_movb(off8, X1indb); }
:MOVB off8, DPinddecb is op=0xB1 & DPinddecb; op=0x87; off8  {  op_movb(off8, DPinddecb); }
:MOVB off8, DPindb is op=0xB2 & DPindb; op=0x87; off8  {  op_movb(off8, DPindb); }
:MOVB off8, DPindincb is op=0xB3 & DPindincb; op=0x87; off8  {  op_movb(off8, DPindincb); }
:MOVB off8, op1fix8 is op=0xB4; op1fix8; op=0x87; off8  {  op_movb(off8, op1fix8); }
:MOVB off8, op1off8 is op=0xB5; op1off8; op=0x87; off8  {  op_movb(off8, op1off8); }
:MOVB off8, op1sfr8 is op=0xB6; op1sfr8; op=0x87; off8  {  op_movb(off8, op1sfr8); }
:MOVB off8, op1n16b is op=0xB7; op1n16b; op=0x87; off8  {  op_movb(off8, op1n16b); }
:MOVB off8, X1immb is op=0xB8; X1immb; op=0x87; off8  {  op_movb(off8, X1immb); }
:MOVB off8, X2immb is op=0xB9; X2immb; op=0x87; off8  {  op_movb(off8, X2immb); }
:MOVB off8, X1plusAb is op=0xBA & X1plusAb; op=0x87; off8  {  op_movb(off8, X1plusAb); }
:MOVB off8, X1plusR0b is op=0xBB & X1plusR0b; op=0x87; off8  {  op_movb(off8, X1plusR0b); }
:MOVB off8, PSWL is op=0x8A & PSWL; op=0x87; off8  {  op_movb(off8, PSWL); }
:MOVB off8, PSWH is op=0x9A & PSWH; op=0x87; off8  {  op_movb(off8, PSWH); }
:MOVB off8, n7b is op=0x9B; n7b; op=0x87; off8  {  op_movb(off8, n7b); }
:MOVB sfr8, reg8 is regop0=0xd & reg8; op=0x96; sfr8  {  op_movb(sfr8, reg8); }
:MOVB sfr8, X1indb is op=0xB0 & X1indb; op=0x96; sfr8  {  op_movb(sfr8, X1indb); }
:MOVB sfr8, DPinddecb is op=0xB1 & DPinddecb; op=0x96; sfr8  {  op_movb(sfr8, DPinddecb); }
:MOVB sfr8, DPindb is op=0xB2 & DPindb; op=0x96; sfr8  {  op_movb(sfr8, DPindb); }
:MOVB sfr8, DPindincb is op=0xB3 & DPindincb; op=0x96; sfr8  {  op_movb(sfr8, DPindincb); }
:MOVB sfr8, op1fix8 is op=0xB4; op1fix8; op=0x96; sfr8  {  op_movb(sfr8, op1fix8); }
:MOVB sfr8, op1off8 is op=0xB5; op1off8; op=0x96; sfr8  {  op_movb(sfr8, op1off8); }
:MOVB sfr8, op1sfr8 is op=0xB6; op1sfr8; op=0x96; sfr8  {  op_movb(sfr8, op1sfr8); }
:MOVB sfr8, op1n16b is op=0xB7; op1n16b; op=0x96; sfr8  {  op_movb(sfr8, op1n16b); }
:MOVB sfr8, X1immb is op=0xB8; X1immb; op=0x96; sfr8  {  op_movb(sfr8, X1immb); }
:MOVB sfr8, X2immb is op=0xB9; X2immb; op=0x96; sfr8  {  op_movb(sfr8, X2immb); }
:MOVB sfr8, X1plusAb is op=0xBA & X1plusAb; op=0x96; sfr8  {  op_movb(sfr8, X1plusAb); }
:MOVB sfr8, X1plusR0b is op=0xBB & X1plusR0b; op=0x96; sfr8  {  op_movb(sfr8, X1plusR0b); }
:MOVB sfr8, PSWL is op=0x8A & PSWL; op=0x96; sfr8  {  op_movb(sfr8, PSWL); }
:MOVB sfr8, PSWH is op=0x9A & PSWH; op=0x96; sfr8  {  op_movb(sfr8, PSWH); }
:MOVB sfr8, n7b is op=0x9B; n7b; op=0x96; sfr8  {  op_movb(sfr8, n7b); }
:MOVB op2n16b, reg8 is regop0=0xd & reg8; op=0x9B; op2n16b  {  op_movb(op2n16b, reg8); }
:MOVB op2n16b, X1indb is op=0xB0 & X1indb; op=0x9B; op2n16b  {  op_movb(op2n16b, X1indb); }
:MOVB op2n16b, DPinddecb is op=0xB1 & DPinddecb; op=0x9B; op2n16b  {  op_movb(op2n16b, DPinddecb); }
:MOVB op2n16b, DPindb is op=0xB2 & DPindb; op=0x9B; op2n16b  {  op_movb(op2n16b, DPindb); }
:MOVB op2n16b, DPindincb is op=0xB3 & DPindincb; op=0x9B; op2n16b  {  op_movb(op2n16b, DPindincb); }
:MOVB op2n16b, op1fix8 is op=0xB4; op1fix8; op=0x9B; op2n16b  {  op_movb(op2n16b, op1fix8); }
:MOVB op2n16b, op1off8 is op=0xB5; op1off8; op=0x9B; op2n16b  {  op_movb(op2n16b, op1off8); }
:MOVB op2n16b, op1sfr8 is op=0xB6; op1sfr8; op=0x9B; op2n16b  {  op_movb(op2n16b, op1sfr8); }
:MOVB op2n16b, op1n16b is op=0xB7; op1n16b; op=0x9B; op2n16b  {  op_movb(op2n16b, op1n16b); }
:MOVB op2n16b, X1immb is op=0xB8; X1immb; op=0x9B; op2n16b  {  op_movb(op2n16b, X1immb); }
:MOVB op2n16b, X2immb is op=0xB9; X2immb; op=0x9B; op2n16b  {  op_movb(op2n16b, X2immb); }
:MOVB op2n16b, X1plusAb is op=0xBA & X1plusAb; op=0x9B; op2n16b  {  op_movb(op2n16b, X1plusAb); }
:MOVB op2n16b, X1plusR0b is op=0xBB & X1plusR0b; op=0x9B; op2n16b  {  op_movb(op2n16b, X1plusR0b); }
:MOVB op2n16b, PSWL is op=0x8A & PSWL; op=0x9B; op2n16b  {  op_movb(op2n16b, PSWL); }
:MOVB op2n16b, PSWH is op=0x9A & PSWH; op=0x9B; op2n16b  {  op_movb(op2n16b, PSWH); }
:MOVB op2n16b, n7b is op=0x9B; n7b; op=0x9B; op2n16b  {  op_movb(op2n16b, n7b); }
:MOVB X1immb2, reg8 is regop0=0xd & reg8; op=0x98; X1immb2  {  op_movb(X1immb2, reg8); }
:MOVB X1immb2, X1indb is op=0xB0 & X1indb; op=0x98; X1immb2  {  op_movb(X1immb2, X1indb); }
:MOVB X1immb2, DPinddecb is op=0xB1 & DPinddecb; op=0x98; X1immb2  {  op_movb(X1immb2, DPinddecb); }
:MOVB X1immb2, DPindb is op=0xB2 & DPindb; op=0x98; X1immb2  {  op_movb(X1immb2, DPindb); }
:MOVB X1immb2, DPindincb is op=0xB3 & DPindincb; op=0x98; X1immb2  {  op_movb(X1immb2, DPindincb); }
:MOVB X1immb2, op1fix8 is op=0xB4; op1fix8; op=0x98; X1immb2  {  op_movb(X1immb2, op1fix8); }
:MOVB X1immb2, op1off8 is op=0xB5; op1off8; op=0x98; X1immb2  {  op_movb(X1immb2, op1off8); }
:MOVB X1immb2, op1sfr8 is op=0xB6; op1sfr8; op=0x98; X1immb2  {  op_movb(X1immb2, op1sfr8); }
:MOVB X1immb2, op1n16b is op=0xB7; op1n16b; op=0x98; X1immb2  {  op_movb(X1immb2, op1n16b); }
:MOVB X1immb2, X1immb is op=0xB8; X1immb; op=0x98; X1immb2  {  op_movb(X1immb2, X1immb); }
:MOVB X1immb2, X2immb is op=0xB9; X2immb; op=0x98; X1immb2  {  op_movb(X1immb2, X2immb); }
:MOVB X1immb2, X1plusAb is op=0xBA & X1plusAb; op=0x98; X1immb2  {  op_movb(X1immb2, X1plusAb); }
:MOVB X1immb2, X1plusR0b is op=0xBB & X1plusR0b; op=0x98; X1immb2  {  op_movb(X1immb2, X1plusR0b); }
:MOVB X1immb2, PSWL is op=0x8A & PSWL; op=0x98; X1immb2  {  op_movb(X1immb2, PSWL); }
:MOVB X1immb2, PSWH is op=0x9A & PSWH; op=0x98; X1immb2  {  op_movb(X1immb2, PSWH); }
:MOVB X1immb2, n7b is op=0x9B; n7b; op=0x98; X1immb2  {  op_movb(X1immb2, n7b); }
:MOVB X2immb2, reg8 is regop0=0xd & reg8; op=0x99; X2immb2  {  op_movb(X2immb2, reg8); }
:MOVB X2immb2, X1indb is op=0xB0 & X1indb; op=0x99; X2immb2  {  op_movb(X2immb2, X1indb); }
:MOVB X2immb2, DPinddecb is op=0xB1 & DPinddecb; op=0x99; X2immb2  {  op_movb(X2immb2, DPinddecb); }
:MOVB X2immb2, DPindb is op=0xB2 & DPindb; op=0x99; X2immb2  {  op_movb(X2immb2, DPindb); }
:MOVB X2immb2, DPindincb is op=0xB3 & DPindincb; op=0x99; X2immb2  {  op_movb(X2immb2, DPindincb); }
:MOVB X2immb2, op1fix8 is op=0xB4; op1fix8; op=0x99; X2immb2  {  op_movb(X2immb2, op1fix8); }
:MOVB X2immb2, op1off8 is op=0xB5; op1off8; op=0x99; X2immb2  {  op_movb(X2immb2, op1off8); }
:MOVB X2immb2, op1sfr8 is op=0xB6; op1sfr8; op=0x99; X2immb2  {  op_movb(X2immb2, op1sfr8); }
:MOVB X2immb2, op1n16b is op=0xB7; op1n16b; op=0x99; X2immb2  {  op_movb(X2immb2, op1n16b); }
:MOVB X2immb2, X1immb is op=0xB8; X1immb; op=0x99; X2immb2  {  op_movb(X2immb2, X1immb); }
:MOVB X2immb2, X2immb is op=0xB9; X2immb; op=0x99; X2immb2  {  op_movb(X2immb2, X2immb); }
:MOVB X2immb2, X1plusAb is op=0xBA & X1plusAb; op=0x99; X2immb2  {  op_movb(X2immb2, X1plusAb); }
:MOVB X2immb2, X1plusR0b is op=0xBB & X1plusR0b; op=0x99; X2immb2  {  op_movb(X2immb2, X1plusR0b); }
:MOVB X2immb2, PSWL is op=0x8A & PSWL; op=0x99; X2immb2  {  op_movb(X2immb2, PSWL); }
:MOVB X2immb2, PSWH is op=0x9A & PSWH; op=0x99; X2immb2  {  op_movb(X2immb2, PSWH); }
:MOVB X2immb2, n7b is op=0x9B; n7b; op=0x99; X2immb2  {  op_movb(X2immb2, n7b); }
:MOVB n7pb, reg8 is regop0=0xd & reg8; op=0x9A; n7pb  {  op_movb(n7pb, reg8); }
:MOVB n7pb, X1indb is op=0xB0 & X1indb; op=0x9A; n7pb  {  op_movb(n7pb, X1indb); }
:MOVB n7pb, DPinddecb is op=0xB1 & DPinddecb; op=0x9A; n7pb  {  op_movb(n7pb, DPinddecb); }
:MOVB n7pb, DPindb is op=0xB2 & DPindb; op=0x9A; n7pb  {  op_movb(n7pb, DPindb); }
:MOVB n7pb, DPindincb is op=0xB3 & DPindincb; op=0x9A; n7pb  {  op_movb(n7pb, DPindincb); }
:MOVB n7pb, op1fix8 is op=0xB4; op1fix8; op=0x9A; n7pb  {  op_movb(n7pb, op1fix8); }
:MOVB n7pb, op1off8 is op=0xB5; op1off8; op=0x9A; n7pb  {  op_movb(n7pb, op1off8); }
:MOVB n7pb, op1sfr8 is op=0xB6; op1sfr8; op=0x9A; n7pb  {  op_movb(n7pb, op1sfr8); }
:MOVB n7pb, op1n16b is op=0xB7; op1n16b; op=0x9A; n7pb  {  op_movb(n7pb, op1n16b); }
:MOVB n7pb, X1immb is op=0xB8; X1immb; op=0x9A; n7pb  {  op_movb(n7pb, X1immb); }
:MOVB n7pb, X2immb is op=0xB9; X2immb; op=0x9A; n7pb  {  op_movb(n7pb, X2immb); }
:MOVB n7pb, X1plusAb is op=0xBA & X1plusAb; op=0x9A; n7pb  {  op_movb(n7pb, X1plusAb); }
:MOVB n7pb, X1plusR0b is op=0xBB & X1plusR0b; op=0x9A; n7pb  {  op_movb(n7pb, X1plusR0b); }
:MOVB n7pb, PSWL is op=0x8A & PSWL; op=0x9A; n7pb  {  op_movb(n7pb, PSWL); }
:MOVB n7pb, PSWH is op=0x9A & PSWH; op=0x9A; n7pb  {  op_movb(n7pb, PSWH); }
:MOVB n7pb, n7b is op=0x9B; n7b; op=0x9A; n7pb  {  op_movb(n7pb, n7b); }
:MOVB X1plusAb2, reg8 is regop0=0xd & reg8; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, reg8); }
:MOVB X1plusAb2, X1indb is op=0xB0 & X1indb; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, X1indb); }
:MOVB X1plusAb2, DPinddecb is op=0xB1 & DPinddecb; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, DPinddecb); }
:MOVB X1plusAb2, DPindb is op=0xB2 & DPindb; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, DPindb); }
:MOVB X1plusAb2, DPindincb is op=0xB3 & DPindincb; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, DPindincb); }
:MOVB X1plusAb2, op1fix8 is op=0xB4; op1fix8; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, op1fix8); }
:MOVB X1plusAb2, op1off8 is op=0xB5; op1off8; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, op1off8); }
:MOVB X1plusAb2, op1sfr8 is op=0xB6; op1sfr8; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, op1sfr8); }
:MOVB X1plusAb2, op1n16b is op=0xB7; op1n16b; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, op1n16b); }
:MOVB X1plusAb2, X1immb is op=0xB8; X1immb; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, X1immb); }
:MOVB X1plusAb2, X2immb is op=0xB9; X2immb; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, X2immb); }
:MOVB X1plusAb2, X1plusAb is op=0xBA & X1plusAb; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, X1plusAb); }
:MOVB X1plusAb2, X1plusR0b is op=0xBB & X1plusR0b; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, X1plusR0b); }
:MOVB X1plusAb2, PSWL is op=0x8A & PSWL; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, PSWL); }
:MOVB X1plusAb2, PSWH is op=0x9A & PSWH; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, PSWH); }
:MOVB X1plusAb2, n7b is op=0x9B; n7b; op=0xF8 & X1plusAb2  {  op_movb(X1plusAb2, n7b); }
:MOVB X1plusR0b2, reg8 is regop0=0xd & reg8; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, reg8); }
:MOVB X1plusR0b2, X1indb is op=0xB0 & X1indb; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, X1indb); }
:MOVB X1plusR0b2, DPinddecb is op=0xB1 & DPinddecb; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, DPinddecb); }
:MOVB X1plusR0b2, DPindb is op=0xB2 & DPindb; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, DPindb); }
:MOVB X1plusR0b2, DPindincb is op=0xB3 & DPindincb; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, DPindincb); }
:MOVB X1plusR0b2, op1fix8 is op=0xB4; op1fix8; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, op1fix8); }
:MOVB X1plusR0b2, op1off8 is op=0xB5; op1off8; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, op1off8); }
:MOVB X1plusR0b2, op1sfr8 is op=0xB6; op1sfr8; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, op1sfr8); }
:MOVB X1plusR0b2, op1n16b is op=0xB7; op1n16b; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, op1n16b); }
:MOVB X1plusR0b2, X1immb is op=0xB8; X1immb; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, X1immb); }
:MOVB X1plusR0b2, X2immb is op=0xB9; X2immb; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, X2immb); }
:MOVB X1plusR0b2, X1plusAb is op=0xBA & X1plusAb; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, X1plusAb); }
:MOVB X1plusR0b2, X1plusR0b is op=0xBB & X1plusR0b; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, X1plusR0b); }
:MOVB X1plusR0b2, PSWL is op=0x8A & PSWL; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, PSWL); }
:MOVB X1plusR0b2, PSWH is op=0x9A & PSWH; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, PSWH); }
:MOVB X1plusR0b2, n7b is op=0x9B; n7b; op=0xF9 & X1plusR0b2  {  op_movb(X1plusR0b2, n7b); }
:MOVB reg8, A8 is regop0=0xd & reg8; op=0xAA & A8  {  op_movb(reg8, A8); }
:MOVB X1indb, A8 is op=0xB0 & X1indb; op=0xAA & A8  {  op_movb(X1indb, A8); }
:MOVB DPinddecb, A8 is op=0xB1 & DPinddecb; op=0xAA & A8  {  op_movb(DPinddecb, A8); }
:MOVB DPindb, A8 is op=0xB2 & DPindb; op=0xAA & A8  {  op_movb(DPindb, A8); }
:MOVB DPindincb, A8 is op=0xB3 & DPindincb; op=0xAA & A8  {  op_movb(DPindincb, A8); }
:MOVB op1fix8, A8 is op=0xB4; op1fix8; op=0xAA & A8  {  op_movb(op1fix8, A8); }
:MOVB op1off8, A8 is op=0xB5; op1off8; op=0xAA & A8  {  op_movb(op1off8, A8); }
:MOVB op1sfr8, A8 is op=0xB6; op1sfr8; op=0xAA & A8  {  op_movb(op1sfr8, A8); }
:MOVB op1n16b, A8 is op=0xB7; op1n16b; op=0xAA & A8  {  op_movb(op1n16b, A8); }
:MOVB X1immb, A8 is op=0xB8; X1immb; op=0xAA & A8  {  op_movb(X1immb, A8); }
:MOVB X2immb, A8 is op=0xB9; X2immb; op=0xAA & A8  {  op_movb(X2immb, A8); }
:MOVB X1plusAb, A8 is op=0xBA & X1plusAb; op=0xAA & A8  {  op_movb(X1plusAb, A8); }
:MOVB X1plusR0b, A8 is op=0xBB & X1plusR0b; op=0xAA & A8  {  op_movb(X1plusR0b, A8); }
:MOVB PSWL, A8 is op=0x8A & PSWL; op=0xAA & A8  {  op_movb(PSWL, A8); }
:MOVB PSWH, A8 is op=0x9A & PSWH; op=0xAA & A8  {  op_movb(PSWH, A8); }
:MOVB n7b, A8 is op=0x9B; n7b; op=0xAA & A8  {  op_movb(n7b, A8); }
:MOVB reg8, #n8 is regop0=0xd & reg8; op=0xAB; n8  {  op_movb(reg8, n8:1); }
:MOVB X1indb, #n8 is op=0xB0 & X1indb; op=0xAB; n8  {  op_movb(X1indb, n8:1); }
:MOVB DPinddecb, #n8 is op=0xB1 & DPinddecb; op=0xAB; n8  {  op_movb(DPinddecb, n8:1); }
:MOVB DPindb, #n8 is op=0xB2 & DPindb; op=0xAB; n8  {  op_movb(DPindb, n8:1); }
:MOVB DPindincb, #n8 is op=0xB3 & DPindincb; op=0xAB; n8  {  op_movb(DPindincb, n8:1); }
:MOVB op1fix8, #n8 is op=0xB4; op1fix8; op=0xAB; n8  {  op_movb(op1fix8, n8:1); }
:MOVB op1off8, #n8 is op=0xB5; op1off8; op=0xAB; n8  {  op_movb(op1off8, n8:1); }
:MOVB op1sfr8, #n8 is op=0xB6; op1sfr8; op=0xAB; n8  {  op_movb(op1sfr8, n8:1); }
:MOVB op1n16b, #n8 is op=0xB7; op1n16b; op=0xAB; n8  {  op_movb(op1n16b, n8:1); }
:MOVB X1immb, #n8 is op=0xB8; X1immb; op=0xAB; n8  {  op_movb(X1immb, n8:1); }
:MOVB X2immb, #n8 is op=0xB9; X2immb; op=0xAB; n8  {  op_movb(X2immb, n8:1); }
:MOVB X1plusAb, #n8 is op=0xBA & X1plusAb; op=0xAB; n8  {  op_movb(X1plusAb, n8:1); }
:MOVB X1plusR0b, #n8 is op=0xBB & X1plusR0b; op=0xAB; n8  {  op_movb(X1plusR0b, n8:1); }
:MOVB PSWL, #n8 is op=0x8A & PSWL; op=0xAB; n8  {  op_movb(PSWL, n8:1); }
:MOVB PSWH, #n8 is op=0x9A & PSWH; op=0xAB; n8  {  op_movb(PSWH, n8:1); }
:MOVB n7b, #n8 is op=0x9B; n7b; op=0xAB; n8  {  op_movb(n7b, n8:1); }
:MUL reg16 is regop0=0xc & reg16; op=0xA9  {  op_mul(reg16); }
:MUL X1indw is op=0xA0 & X1indw; op=0xA9  {  op_mul(X1indw); }
:MUL DPinddecw is op=0xA1 & DPinddecw; op=0xA9  {  op_mul(DPinddecw); }
:MUL DPindw is op=0xA2 & DPindw; op=0xA9  {  op_mul(DPindw); }
:MUL DPindincw is op=0xA3 & DPindincw; op=0xA9  {  op_mul(DPindincw); }
:MUL op1fix16 is op=0xA4; op1fix16; op=0xA9  {  op_mul(op1fix16); }
:MUL op1off16 is op=0xA5; op1off16; op=0xA9  {  op_mul(op1off16); }
:MUL op1sfr16 is op=0xA6; op1sfr16; op=0xA9  {  op_mul(op1sfr16); }
:MUL op1n16w is op=0xA7; op1n16w; op=0xA9  {  op_mul(op1n16w); }
:MUL X1immw is op=0xA8; X1immw; op=0xA9  {  op_mul(X1immw); }
:MUL X2immw is op=0xA9; X2immw; op=0xA9  {  op_mul(X2immw); }
:MUL X1plusAw is op=0xAA & X1plusAw; op=0xA9  {  op_mul(X1plusAw); }
:MUL X1plusR0w is op=0xAB & X1plusR0w; op=0xA9  {  op_mul(X1plusR0w); }
:MUL n7w is op=0x8B; n7w; op=0xA9  {  op_mul(n7w); }
:MULB reg8 is regop0=0xd & reg8; op=0xA9  {  op_mulb(reg8); }
:MULB X1indb is op=0xB0 & X1indb; op=0xA9  {  op_mulb(X1indb); }
:MULB DPinddecb is op=0xB1 & DPinddecb; op=0xA9  {  op_mulb(DPinddecb); }
:MULB DPindb is op=0xB2 & DPindb; op=0xA9  {  op_mulb(DPindb); }
:MULB DPindincb is op=0xB3 & DPindincb; op=0xA9  {  op_mulb(DPindincb); }
:MULB op1fix8 is op=0xB4; op1fix8; op=0xA9  {  op_mulb(op1fix8); }
:MULB op1off8 is op=0xB5; op1off8; op=0xA9  {  op_mulb(op1off8); }
:MULB op1sfr8 is op=0xB6; op1sfr8; op=0xA9  {  op_mulb(op1sfr8); }
:MULB op1n16b is op=0xB7; op1n16b; op=0xA9  {  op_mulb(op1n16b); }
:MULB X1immb is op=0xB8; X1immb; op=0xA9  {  op_mulb(X1immb); }
:MULB X2immb is op=0xB9; X2immb; op=0xA9  {  op_mulb(X2immb); }
:MULB X1plusAb is op=0xBA & X1plusAb; op=0xA9  {  op_mulb(X1plusAb); }
:MULB X1plusR0b is op=0xBB & X1plusR0b; op=0xA9  {  op_mulb(X1plusR0b); }
:MULB PSWL is op=0x8A & PSWL; op=0xA9  {  op_mulb(PSWL); }
:MULB PSWH is op=0x9A & PSWH; op=0xA9  {  op_mulb(PSWH); }
:MULB n7b is op=0x9B; n7b; op=0xA9  {  op_mulb(n7b); }
:NEG A16 is dd=1 & op=0xCF & A16  {  op_neg(A16); }
:NEGB A8 is dd=0 & op=0xCF & A8  {  op_negb(A8); }
:NOP  is op=0x00  {  op_nop(); }
:OR A16, off16 is dd=1 & op=0xCD; off16 & A16  {  op_or(A16, off16); }
:OR A16, #n16 is dd=1 & op=0xCE; n16 & A16  {  op_or(A16, n16:2); }
:OR A16, reg16 is regop0=0xc & reg16; op=0xC5 & A16  {  op_or(A16, reg16); }
:OR A16, X1indw is op=0xA0 & X1indw; op=0xC5 & A16  {  op_or(A16, X1indw); }
:OR A16, DPinddecw is op=0xA1 & DPinddecw; op=0xC5 & A16  {  op_or(A16, DPinddecw); }
:OR A16, DPindw is op=0xA2 & DPindw; op=0xC5 & A16  {  op_or(A16, DPindw); }
:OR A16, DPindincw is op=0xA3 & DPindincw; op=0xC5 & A16  {  op_or(A16, DPindincw); }
:OR A16, op1fix16 is op=0xA4; op1fix16; op=0xC5 & A16  {  op_or(A16, op1fix16); }
:OR A16, op1off16 is op=0xA5; op1off16; op=0xC5 & A16  {  op_or(A16, op1off16); }
:OR A16, op1sfr16 is op=0xA6; op1sfr16; op=0xC5 & A16  {  op_or(A16, op1sfr16); }
:OR A16, op1n16w is op=0xA7; op1n16w; op=0xC5 & A16  {  op_or(A16, op1n16w); }
:OR A16, X1immw is op=0xA8; X1immw; op=0xC5 & A16  {  op_or(A16, X1immw); }
:OR A16, X2immw is op=0xA9; X2immw; op=0xC5 & A16  {  op_or(A16, X2immw); }
:OR A16, X1plusAw is op=0xAA & X1plusAw; op=0xC5 & A16  {  op_or(A16, X1plusAw); }
:OR A16, X1plusR0w is op=0xAB & X1plusR0w; op=0xC5 & A16  {  op_or(A16, X1plusR0w); }
:OR A16, n7w is op=0x8B; n7w; op=0xC5 & A16  {  op_or(A16, n7w); }
:OR reg16, fix16 is regop0=0xc & reg16; op=0xC0; fix16  {  op_or(reg16, fix16); }
:OR X1indw, fix16 is op=0xA0 & X1indw; op=0xC0; fix16  {  op_or(X1indw, fix16); }
:OR DPinddecw, fix16 is op=0xA1 & DPinddecw; op=0xC0; fix16  {  op_or(DPinddecw, fix16); }
:OR DPindw, fix16 is op=0xA2 & DPindw; op=0xC0; fix16  {  op_or(DPindw, fix16); }
:OR DPindincw, fix16 is op=0xA3 & DPindincw; op=0xC0; fix16  {  op_or(DPindincw, fix16); }
:OR op1fix16, fix16 is op=0xA4; op1fix16; op=0xC0; fix16  {  op_or(op1fix16, fix16); }
:OR op1off16, fix16 is op=0xA5; op1off16; op=0xC0; fix16  {  op_or(op1off16, fix16); }
:OR op1sfr16, fix16 is op=0xA6; op1sfr16; op=0xC0; fix16  {  op_or(op1sfr16, fix16); }
:OR op1n16w, fix16 is op=0xA7; op1n16w; op=0xC0; fix16  {  op_or(op1n16w, fix16); }
:OR X1immw, fix16 is op=0xA8; X1immw; op=0xC0; fix16  {  op_or(X1immw, fix16); }
:OR X2immw, fix16 is op=0xA9; X2immw; op=0xC0; fix16  {  op_or(X2immw, fix16); }
:OR X1plusAw, fix16 is op=0xAA & X1plusAw; op=0xC0; fix16  {  op_or(X1plusAw, fix16); }
:OR X1plusR0w, fix16 is op=0xAB & X1plusR0w; op=0xC0; fix16  {  op_or(X1plusR0w, fix16); }
:OR n7w, fix16 is op=0x8B; n7w; op=0xC0; fix16  {  op_or(n7w, fix16); }
:OR reg16, off16 is regop0=0xc & reg16; op=0xC1; off16  {  op_or(reg16, off16); }
:OR X1indw, off16 is op=0xA0 & X1indw; op=0xC1; off16  {  op_or(X1indw, off16); }
:OR DPinddecw, off16 is op=0xA1 & DPinddecw; op=0xC1; off16  {  op_or(DPinddecw, off16); }
:OR DPindw, off16 is op=0xA2 & DPindw; op=0xC1; off16  {  op_or(DPindw, off16); }
:OR DPindincw, off16 is op=0xA3 & DPindincw; op=0xC1; off16  {  op_or(DPindincw, off16); }
:OR op1fix16, off16 is op=0xA4; op1fix16; op=0xC1; off16  {  op_or(op1fix16, off16); }
:OR op1off16, off16 is op=0xA5; op1off16; op=0xC1; off16  {  op_or(op1off16, off16); }
:OR op1sfr16, off16 is op=0xA6; op1sfr16; op=0xC1; off16  {  op_or(op1sfr16, off16); }
:OR op1n16w, off16 is op=0xA7; op1n16w; op=0xC1; off16  {  op_or(op1n16w, off16); }
:OR X1immw, off16 is op=0xA8; X1immw; op=0xC1; off16  {  op_or(X1immw, off16); }
:OR X2immw, off16 is op=0xA9; X2immw; op=0xC1; off16  {  op_or(X2immw, off16); }
:OR X1plusAw, off16 is op=0xAA & X1plusAw; op=0xC1; off16  {  op_or(X1plusAw, off16); }
:OR X1plusR0w, off16 is op=0xAB & X1plusR0w; op=0xC1; off16  {  op_or(X1plusR0w, off16); }
:OR n7w, off16 is op=0x8B; n7w; op=0xC1; off16  {  op_or(n7w, off16); }
:OR reg16, sfr16 is regop0=0xc & reg16; op=0xC2; sfr16  {  op_or(reg16, sfr16); }
:OR X1indw, sfr16 is op=0xA0 & X1indw; op=0xC2; sfr16  {  op_or(X1indw, sfr16); }
:OR DPinddecw, sfr16 is op=0xA1 & DPinddecw; op=0xC2; sfr16  {  op_or(DPinddecw, sfr16); }
:OR DPindw, sfr16 is op=0xA2 & DPindw; op=0xC2; sfr16  {  op_or(DPindw, sfr16); }
:OR DPindincw, sfr16 is op=0xA3 & DPindincw; op=0xC2; sfr16  {  op_or(DPindincw, sfr16); }
:OR op1fix16, sfr16 is op=0xA4; op1fix16; op=0xC2; sfr16  {  op_or(op1fix16, sfr16); }
:OR op1off16, sfr16 is op=0xA5; op1off16; op=0xC2; sfr16  {  op_or(op1off16, sfr16); }
:OR op1sfr16, sfr16 is op=0xA6; op1sfr16; op=0xC2; sfr16  {  op_or(op1sfr16, sfr16); }
:OR op1n16w, sfr16 is op=0xA7; op1n16w; op=0xC2; sfr16  {  op_or(op1n16w, sfr16); }
:OR X1immw, sfr16 is op=0xA8; X1immw; op=0xC2; sfr16  {  op_or(X1immw, sfr16); }
:OR X2immw, sfr16 is op=0xA9; X2immw; op=0xC2; sfr16  {  op_or(X2immw, sfr16); }
:OR X1plusAw, sfr16 is op=0xAA & X1plusAw; op=0xC2; sfr16  {  op_or(X1plusAw, sfr16); }
:OR X1plusR0w, sfr16 is op=0xAB & X1plusR0w; op=0xC2; sfr16  {  op_or(X1plusR0w, sfr16); }
:OR n7w, sfr16 is op=0x8B; n7w; op=0xC2; sfr16  {  op_or(n7w, sfr16); }
:OR reg16, #n16 is regop0=0xc & reg16; op=0xC3; n16  {  op_or(reg16, n16:2); }
:OR X1indw, #n16 is op=0xA0 & X1indw; op=0xC3; n16  {  op_or(X1indw, n16:2); }
:OR DPinddecw, #n16 is op=0xA1 & DPinddecw; op=0xC3; n16  {  op_or(DPinddecw, n16:2); }
:OR DPindw, #n16 is op=0xA2 & DPindw; op=0xC3; n16  {  op_or(DPindw, n16:2); }
:OR DPindincw, #n16 is op=0xA3 & DPindincw; op=0xC3; n16  {  op_or(DPindincw, n16:2); }
:OR op1fix16, #n16 is op=0xA4; op1fix16; op=0xC3; n16  {  op_or(op1fix16, n16:2); }
:OR op1off16, #n16 is op=0xA5; op1off16; op=0xC3; n16  {  op_or(op1off16, n16:2); }
:OR op1sfr16, #n16 is op=0xA6; op1sfr16; op=0xC3; n16  {  op_or(op1sfr16, n16:2); }
:OR op1n16w, #n16 is op=0xA7; op1n16w; op=0xC3; n16  {  op_or(op1n16w, n16:2); }
:OR X1immw, #n16 is op=0xA8; X1immw; op=0xC3; n16  {  op_or(X1immw, n16:2); }
:OR X2immw, #n16 is op=0xA9; X2immw; op=0xC3; n16  {  op_or(X2immw, n16:2); }
:OR X1plusAw, #n16 is op=0xAA & X1plusAw; op=0xC3; n16  {  op_or(X1plusAw, n16:2); }
:OR X1plusR0w, #n16 is op=0xAB & X1plusR0w; op=0xC3; n16  {  op_or(X1plusR0w, n16:2); }
:OR n7w, #n16 is op=0x8B; n7w; op=0xC3; n16  {  op_or(n7w, n16:2); }
:OR reg16, A16 is regop0=0xc & reg16; op=0xC4 & A16  {  op_or(reg16, A16); }
:OR X1indw, A16 is op=0xA0 & X1indw; op=0xC4 & A16  {  op_or(X1indw, A16); }
:OR DPinddecw, A16 is op=0xA1 & DPinddecw; op=0xC4 & A16  {  op_or(DPinddecw, A16); }
:OR DPindw, A16 is op=0xA2 & DPindw; op=0xC4 & A16  {  op_or(DPindw, A16); }
:OR DPindincw, A16 is op=0xA3 & DPindincw; op=0xC4 & A16  {  op_or(DPindincw, A16); }
:OR op1fix16, A16 is op=0xA4; op1fix16; op=0xC4 & A16  {  op_or(op1fix16, A16); }
:OR op1off16, A16 is op=0xA5; op1off16; op=0xC4 & A16  {  op_or(op1off16, A16); }
:OR op1sfr16, A16 is op=0xA6; op1sfr16; op=0xC4 & A16  {  op_or(op1sfr16, A16); }
:OR op1n16w, A16 is op=0xA7; op1n16w; op=0xC4 & A16  {  op_or(op1n16w, A16); }
:OR X1immw, A16 is op=0xA8; X1immw; op=0xC4 & A16  {  op_or(X1immw, A16); }
:OR X2immw, A16 is op=0xA9; X2immw; op=0xC4 & A16  {  op_or(X2immw, A16); }
:OR X1plusAw, A16 is op=0xAA & X1plusAw; op=0xC4 & A16  {  op_or(X1plusAw, A16); }
:OR X1plusR0w, A16 is op=0xAB & X1plusR0w; op=0xC4 & A16  {  op_or(X1plusR0w, A16); }
:OR n7w, A16 is op=0x8B; n7w; op=0xC4 & A16  {  op_or(n7w, A16); }
:ORB A8, off8 is dd=0 & op=0xCD; off8 & A8  {  op_orb(A8, off8); }
:ORB A8, #n8 is dd=0 & op=0xCE; n8 & A8  {  op_orb(A8, n8:1); }
:ORB A8, reg8 is regop0=0xd & reg8; op=0xC5 & A8  {  op_orb(A8, reg8); }
:ORB A8, X1indb is op=0xB0 & X1indb; op=0xC5 & A8  {  op_orb(A8, X1indb); }
:ORB A8, DPinddecb is op=0xB1 & DPinddecb; op=0xC5 & A8  {  op_orb(A8, DPinddecb); }
:ORB A8, DPindb is op=0xB2 & DPindb; op=0xC5 & A8  {  op_orb(A8, DPindb); }
:ORB A8, DPindincb is op=0xB3 & DPindincb; op=0xC5 & A8  {  op_orb(A8, DPindincb); }
:ORB A8, op1fix8 is op=0xB4; op1fix8; op=0xC5 & A8  {  op_orb(A8, op1fix8); }
:ORB A8, op1off8 is op=0xB5; op1off8; op=0xC5 & A8  {  op_orb(A8, op1off8); }
:ORB A8, op1sfr8 is op=0xB6; op1sfr8; op=0xC5 & A8  {  op_orb(A8, op1sfr8); }
:ORB A8, op1n16b is op=0xB7; op1n16b; op=0xC5 & A8  {  op_orb(A8, op1n16b); }
:ORB A8, X1immb is op=0xB8; X1immb; op=0xC5 & A8  {  op_orb(A8, X1immb); }
:ORB A8, X2immb is op=0xB9; X2immb; op=0xC5 & A8  {  op_orb(A8, X2immb); }
:ORB A8, X1plusAb is op=0xBA & X1plusAb; op=0xC5 & A8  {  op_orb(A8, X1plusAb); }
:ORB A8, X1plusR0b is op=0xBB & X1plusR0b; op=0xC5 & A8  {  op_orb(A8, X1plusR0b); }
:ORB A8, PSWL is op=0x8A & PSWL; op=0xC5 & A8  {  op_orb(A8, PSWL); }
:ORB A8, PSWH is op=0x9A & PSWH; op=0xC5 & A8  {  op_orb(A8, PSWH); }
:ORB A8, n7b is op=0x9B; n7b; op=0xC5 & A8  {  op_orb(A8, n7b); }
:OR reg8, fix8 is regop0=0xd & reg8; op=0xC0; fix8  {  op_or(reg8, fix8); }
:OR X1indb, fix8 is op=0xB0 & X1indb; op=0xC0; fix8  {  op_or(X1indb, fix8); }
:OR DPinddecb, fix8 is op=0xB1 & DPinddecb; op=0xC0; fix8  {  op_or(DPinddecb, fix8); }
:OR DPindb, fix8 is op=0xB2 & DPindb; op=0xC0; fix8  {  op_or(DPindb, fix8); }
:OR DPindincb, fix8 is op=0xB3 & DPindincb; op=0xC0; fix8  {  op_or(DPindincb, fix8); }
:OR op1fix8, fix8 is op=0xB4; op1fix8; op=0xC0; fix8  {  op_or(op1fix8, fix8); }
:OR op1off8, fix8 is op=0xB5; op1off8; op=0xC0; fix8  {  op_or(op1off8, fix8); }
:OR op1sfr8, fix8 is op=0xB6; op1sfr8; op=0xC0; fix8  {  op_or(op1sfr8, fix8); }
:OR op1n16b, fix8 is op=0xB7; op1n16b; op=0xC0; fix8  {  op_or(op1n16b, fix8); }
:OR X1immb, fix8 is op=0xB8; X1immb; op=0xC0; fix8  {  op_or(X1immb, fix8); }
:OR X2immb, fix8 is op=0xB9; X2immb; op=0xC0; fix8  {  op_or(X2immb, fix8); }
:OR X1plusAb, fix8 is op=0xBA & X1plusAb; op=0xC0; fix8  {  op_or(X1plusAb, fix8); }
:OR X1plusR0b, fix8 is op=0xBB & X1plusR0b; op=0xC0; fix8  {  op_or(X1plusR0b, fix8); }
:OR PSWL, fix8 is op=0x8A & PSWL; op=0xC0; fix8  {  op_or(PSWL, fix8); }
:OR PSWH, fix8 is op=0x9A & PSWH; op=0xC0; fix8  {  op_or(PSWH, fix8); }
:OR n7b, fix8 is op=0x9B; n7b; op=0xC0; fix8  {  op_or(n7b, fix8); }
:OR reg8, off8 is regop0=0xd & reg8; op=0xC1; off8  {  op_or(reg8, off8); }
:OR X1indb, off8 is op=0xB0 & X1indb; op=0xC1; off8  {  op_or(X1indb, off8); }
:OR DPinddecb, off8 is op=0xB1 & DPinddecb; op=0xC1; off8  {  op_or(DPinddecb, off8); }
:OR DPindb, off8 is op=0xB2 & DPindb; op=0xC1; off8  {  op_or(DPindb, off8); }
:OR DPindincb, off8 is op=0xB3 & DPindincb; op=0xC1; off8  {  op_or(DPindincb, off8); }
:OR op1fix8, off8 is op=0xB4; op1fix8; op=0xC1; off8  {  op_or(op1fix8, off8); }
:OR op1off8, off8 is op=0xB5; op1off8; op=0xC1; off8  {  op_or(op1off8, off8); }
:OR op1sfr8, off8 is op=0xB6; op1sfr8; op=0xC1; off8  {  op_or(op1sfr8, off8); }
:OR op1n16b, off8 is op=0xB7; op1n16b; op=0xC1; off8  {  op_or(op1n16b, off8); }
:OR X1immb, off8 is op=0xB8; X1immb; op=0xC1; off8  {  op_or(X1immb, off8); }
:OR X2immb, off8 is op=0xB9; X2immb; op=0xC1; off8  {  op_or(X2immb, off8); }
:OR X1plusAb, off8 is op=0xBA & X1plusAb; op=0xC1; off8  {  op_or(X1plusAb, off8); }
:OR X1plusR0b, off8 is op=0xBB & X1plusR0b; op=0xC1; off8  {  op_or(X1plusR0b, off8); }
:OR PSWL, off8 is op=0x8A & PSWL; op=0xC1; off8  {  op_or(PSWL, off8); }
:OR PSWH, off8 is op=0x9A & PSWH; op=0xC1; off8  {  op_or(PSWH, off8); }
:OR n7b, off8 is op=0x9B; n7b; op=0xC1; off8  {  op_or(n7b, off8); }
:OR reg8, sfr8 is regop0=0xd & reg8; op=0xC2; sfr8  {  op_or(reg8, sfr8); }
:OR X1indb, sfr8 is op=0xB0 & X1indb; op=0xC2; sfr8  {  op_or(X1indb, sfr8); }
:OR DPinddecb, sfr8 is op=0xB1 & DPinddecb; op=0xC2; sfr8  {  op_or(DPinddecb, sfr8); }
:OR DPindb, sfr8 is op=0xB2 & DPindb; op=0xC2; sfr8  {  op_or(DPindb, sfr8); }
:OR DPindincb, sfr8 is op=0xB3 & DPindincb; op=0xC2; sfr8  {  op_or(DPindincb, sfr8); }
:OR op1fix8, sfr8 is op=0xB4; op1fix8; op=0xC2; sfr8  {  op_or(op1fix8, sfr8); }
:OR op1off8, sfr8 is op=0xB5; op1off8; op=0xC2; sfr8  {  op_or(op1off8, sfr8); }
:OR op1sfr8, sfr8 is op=0xB6; op1sfr8; op=0xC2; sfr8  {  op_or(op1sfr8, sfr8); }
:OR op1n16b, sfr8 is op=0xB7; op1n16b; op=0xC2; sfr8  {  op_or(op1n16b, sfr8); }
:OR X1immb, sfr8 is op=0xB8; X1immb; op=0xC2; sfr8  {  op_or(X1immb, sfr8); }
:OR X2immb, sfr8 is op=0xB9; X2immb; op=0xC2; sfr8  {  op_or(X2immb, sfr8); }
:OR X1plusAb, sfr8 is op=0xBA & X1plusAb; op=0xC2; sfr8  {  op_or(X1plusAb, sfr8); }
:OR X1plusR0b, sfr8 is op=0xBB & X1plusR0b; op=0xC2; sfr8  {  op_or(X1plusR0b, sfr8); }
:OR PSWL, sfr8 is op=0x8A & PSWL; op=0xC2; sfr8  {  op_or(PSWL, sfr8); }
:OR PSWH, sfr8 is op=0x9A & PSWH; op=0xC2; sfr8  {  op_or(PSWH, sfr8); }
:OR n7b, sfr8 is op=0x9B; n7b; op=0xC2; sfr8  {  op_or(n7b, sfr8); }
:OR reg8, #n8 is regop0=0xd & reg8; op=0xC3; n8  {  op_or(reg8, n8:1); }
:OR X1indb, #n8 is op=0xB0 & X1indb; op=0xC3; n8  {  op_or(X1indb, n8:1); }
:OR DPinddecb, #n8 is op=0xB1 & DPinddecb; op=0xC3; n8  {  op_or(DPinddecb, n8:1); }
:OR DPindb, #n8 is op=0xB2 & DPindb; op=0xC3; n8  {  op_or(DPindb, n8:1); }
:OR DPindincb, #n8 is op=0xB3 & DPindincb; op=0xC3; n8  {  op_or(DPindincb, n8:1); }
:OR op1fix8, #n8 is op=0xB4; op1fix8; op=0xC3; n8  {  op_or(op1fix8, n8:1); }
:OR op1off8, #n8 is op=0xB5; op1off8; op=0xC3; n8  {  op_or(op1off8, n8:1); }
:OR op1sfr8, #n8 is op=0xB6; op1sfr8; op=0xC3; n8  {  op_or(op1sfr8, n8:1); }
:OR op1n16b, #n8 is op=0xB7; op1n16b; op=0xC3; n8  {  op_or(op1n16b, n8:1); }
:OR X1immb, #n8 is op=0xB8; X1immb; op=0xC3; n8  {  op_or(X1immb, n8:1); }
:OR X2immb, #n8 is op=0xB9; X2immb; op=0xC3; n8  {  op_or(X2immb, n8:1); }
:OR X1plusAb, #n8 is op=0xBA & X1plusAb; op=0xC3; n8  {  op_or(X1plusAb, n8:1); }
:OR X1plusR0b, #n8 is op=0xBB & X1plusR0b; op=0xC3; n8  {  op_or(X1plusR0b, n8:1); }
:OR PSWL, #n8 is op=0x8A & PSWL; op=0xC3; n8  {  op_or(PSWL, n8:1); }
:OR PSWH, #n8 is op=0x9A & PSWH; op=0xC3; n8  {  op_or(PSWH, n8:1); }
:OR n7b, #n8 is op=0x9B; n7b; op=0xC3; n8  {  op_or(n7b, n8:1); }
:OR reg8, A8 is regop0=0xd & reg8; op=0xC4 & A8  {  op_or(reg8, A8); }
:OR X1indb, A8 is op=0xB0 & X1indb; op=0xC4 & A8  {  op_or(X1indb, A8); }
:OR DPinddecb, A8 is op=0xB1 & DPinddecb; op=0xC4 & A8  {  op_or(DPinddecb, A8); }
:OR DPindb, A8 is op=0xB2 & DPindb; op=0xC4 & A8  {  op_or(DPindb, A8); }
:OR DPindincb, A8 is op=0xB3 & DPindincb; op=0xC4 & A8  {  op_or(DPindincb, A8); }
:OR op1fix8, A8 is op=0xB4; op1fix8; op=0xC4 & A8  {  op_or(op1fix8, A8); }
:OR op1off8, A8 is op=0xB5; op1off8; op=0xC4 & A8  {  op_or(op1off8, A8); }
:OR op1sfr8, A8 is op=0xB6; op1sfr8; op=0xC4 & A8  {  op_or(op1sfr8, A8); }
:OR op1n16b, A8 is op=0xB7; op1n16b; op=0xC4 & A8  {  op_or(op1n16b, A8); }
:OR X1immb, A8 is op=0xB8; X1immb; op=0xC4 & A8  {  op_or(X1immb, A8); }
:OR X2immb, A8 is op=0xB9; X2immb; op=0xC4 & A8  {  op_or(X2immb, A8); }
:OR X1plusAb, A8 is op=0xBA & X1plusAb; op=0xC4 & A8  {  op_or(X1plusAb, A8); }
:OR X1plusR0b, A8 is op=0xBB & X1plusR0b; op=0xC4 & A8  {  op_or(X1plusR0b, A8); }
:OR PSWL, A8 is op=0x8A & PSWL; op=0xC4 & A8  {  op_or(PSWL, A8); }
:OR PSWH, A8 is op=0x9A & PSWH; op=0xC4 & A8  {  op_or(PSWH, A8); }
:OR n7b, A8 is op=0x9B; n7b; op=0xC4 & A8  {  op_or(n7b, A8); }
:PUSHS A16 is op=0x07 & A16  {  op_pushs(A16); }
:RB sbafix^"."^bit is bitop0=11 & bit; sbaop=1 & sbafix  {  op_rb(sbafix,bit); }
:RB sbaoff^"."^bit is bitop0=9 & bit; sbaop=1 & sbaoff  {  op_rb(sbaoff,bit); }
:RB A8^"."^bit is op=0xBC; bitop0=0 & bit & A8  {  op_rb(A8,bit); }
:RB reg8^"."^bit is regop0=0xd & reg8; bitop0=0 & bit  {  op_rb(reg8,bit); }
:RB X1indb^"."^bit is op=0xB0 & X1indb; bitop0=0 & bit  {  op_rb(X1indb,bit); }
:RB DPinddecb^"."^bit is op=0xB1 & DPinddecb; bitop0=0 & bit  {  op_rb(DPinddecb,bit); }
:RB DPindb^"."^bit is op=0xB2 & DPindb; bitop0=0 & bit  {  op_rb(DPindb,bit); }
:RB DPindincb^"."^bit is op=0xB3 & DPindincb; bitop0=0 & bit  {  op_rb(DPindincb,bit); }
:RB op1fix8^"."^bit is op=0xB4; op1fix8; bitop0=0 & bit  {  op_rb(op1fix8,bit); }
:RB op1off8^"."^bit is op=0xB5; op1off8; bitop0=0 & bit  {  op_rb(op1off8,bit); }
:RB op1sfr8^"."^bit is op=0xB6; op1sfr8; bitop0=0 & bit  {  op_rb(op1sfr8,bit); }
:RB op1n16b^"."^bit is op=0xB7; op1n16b; bitop0=0 & bit  {  op_rb(op1n16b,bit); }
:RB X1immb^"."^bit is op=0xB8; X1immb; bitop0=0 & bit  {  op_rb(X1immb,bit); }
:RB X2immb^"."^bit is op=0xB9; X2immb; bitop0=0 & bit  {  op_rb(X2immb,bit); }
:RB X1plusAb^"."^bit is op=0xBA & X1plusAb; bitop0=0 & bit  {  op_rb(X1plusAb,bit); }
:RB X1plusR0b^"."^bit is op=0xBB & X1plusR0b; bitop0=0 & bit  {  op_rb(X1plusR0b,bit); }
:RB PSWL^"."^bit is op=0x8A & PSWL; bitop0=0 & bit  {  op_rb(PSWL,bit); }
:RB PSWH^"."^bit is op=0x9A & PSWH; bitop0=0 & bit  {  op_rb(PSWH,bit); }
:RB n7b^"."^bit is op=0x9B; n7b; bitop0=0 & bit  {  op_rb(n7b,bit); }
:RBR reg8^"."^(AL) is regop0=0xd & reg8; op=0xB9 & AL  {  op_rbr(reg8,(AL)); }
:RBR X1indb^"."^(AL) is op=0xB0 & X1indb; op=0xB9 & AL  {  op_rbr(X1indb,(AL)); }
:RBR DPinddecb^"."^(AL) is op=0xB1 & DPinddecb; op=0xB9 & AL  {  op_rbr(DPinddecb,(AL)); }
:RBR DPindb^"."^(AL) is op=0xB2 & DPindb; op=0xB9 & AL  {  op_rbr(DPindb,(AL)); }
:RBR DPindincb^"."^(AL) is op=0xB3 & DPindincb; op=0xB9 & AL  {  op_rbr(DPindincb,(AL)); }
:RBR op1fix8^"."^(AL) is op=0xB4; op1fix8; op=0xB9 & AL  {  op_rbr(op1fix8,(AL)); }
:RBR op1off8^"."^(AL) is op=0xB5; op1off8; op=0xB9 & AL  {  op_rbr(op1off8,(AL)); }
:RBR op1sfr8^"."^(AL) is op=0xB6; op1sfr8; op=0xB9 & AL  {  op_rbr(op1sfr8,(AL)); }
:RBR op1n16b^"."^(AL) is op=0xB7; op1n16b; op=0xB9 & AL  {  op_rbr(op1n16b,(AL)); }
:RBR X1immb^"."^(AL) is op=0xB8; X1immb; op=0xB9 & AL  {  op_rbr(X1immb,(AL)); }
:RBR X2immb^"."^(AL) is op=0xB9; X2immb; op=0xB9 & AL  {  op_rbr(X2immb,(AL)); }
:RBR X1plusAb^"."^(AL) is op=0xBA & X1plusAb; op=0xB9 & AL  {  op_rbr(X1plusAb,(AL)); }
:RBR X1plusR0b^"."^(AL) is op=0xBB & X1plusR0b; op=0xB9 & AL  {  op_rbr(X1plusR0b,(AL)); }
:RBR PSWL^"."^(AL) is op=0x8A & PSWL; op=0xB9 & AL  {  op_rbr(PSWL,(AL)); }
:RBR PSWH^"."^(AL) is op=0x9A & PSWH; op=0xB9 & AL  {  op_rbr(PSWH,(AL)); }
:RBR n7b^"."^(AL) is op=0x9B; n7b; op=0xB9 & AL  {  op_rbr(n7b,(AL)); }
:RC  is op=0xCA  {  op_rc(); }
:RDD  is op=0xD8 [ dd=0; globalset(inst_next, dd); ] {  op_rdd(); }
:ROL A16, 1 is dd=1 & op=0xAF & A16  {  op_rol(A16, 1); }
:ROL A16, width is dd=1 & op=0xBC; hregop0=43 & width & A16  {  op_rol(A16, width); }
:ROL reg16, width is regop0=0xc & reg16; hregop0=43 & width  {  op_rol(reg16, width); }
:ROL X1indw, width is op=0xA0 & X1indw; hregop0=43 & width  {  op_rol(X1indw, width); }
:ROL DPinddecw, width is op=0xA1 & DPinddecw; hregop0=43 & width  {  op_rol(DPinddecw, width); }
:ROL DPindw, width is op=0xA2 & DPindw; hregop0=43 & width  {  op_rol(DPindw, width); }
:ROL DPindincw, width is op=0xA3 & DPindincw; hregop0=43 & width  {  op_rol(DPindincw, width); }
:ROL op1fix16, width is op=0xA4; op1fix16; hregop0=43 & width  {  op_rol(op1fix16, width); }
:ROL op1off16, width is op=0xA5; op1off16; hregop0=43 & width  {  op_rol(op1off16, width); }
:ROL op1sfr16, width is op=0xA6; op1sfr16; hregop0=43 & width  {  op_rol(op1sfr16, width); }
:ROL op1n16w, width is op=0xA7; op1n16w; hregop0=43 & width  {  op_rol(op1n16w, width); }
:ROL X1immw, width is op=0xA8; X1immw; hregop0=43 & width  {  op_rol(X1immw, width); }
:ROL X2immw, width is op=0xA9; X2immw; hregop0=43 & width  {  op_rol(X2immw, width); }
:ROL X1plusAw, width is op=0xAA & X1plusAw; hregop0=43 & width  {  op_rol(X1plusAw, width); }
:ROL X1plusR0w, width is op=0xAB & X1plusR0w; hregop0=43 & width  {  op_rol(X1plusR0w, width); }
:ROL n7w, width is op=0x8B; n7w; hregop0=43 & width  {  op_rol(n7w, width); }
:ROLB A8, 1 is dd=0 & op=0xAF & A8  {  op_rolb(A8, 1); }
:ROLB A8, width is dd=0 & op=0xBC; hregop0=43 & width & A8  {  op_rolb(A8, width); }
:ROLB reg8, width is regop0=0xd & reg8; hregop0=43 & width  {  op_rolb(reg8, width); }
:ROLB X1indb, width is op=0xB0 & X1indb; hregop0=43 & width  {  op_rolb(X1indb, width); }
:ROLB DPinddecb, width is op=0xB1 & DPinddecb; hregop0=43 & width  {  op_rolb(DPinddecb, width); }
:ROLB DPindb, width is op=0xB2 & DPindb; hregop0=43 & width  {  op_rolb(DPindb, width); }
:ROLB DPindincb, width is op=0xB3 & DPindincb; hregop0=43 & width  {  op_rolb(DPindincb, width); }
:ROLB op1fix8, width is op=0xB4; op1fix8; hregop0=43 & width  {  op_rolb(op1fix8, width); }
:ROLB op1off8, width is op=0xB5; op1off8; hregop0=43 & width  {  op_rolb(op1off8, width); }
:ROLB op1sfr8, width is op=0xB6; op1sfr8; hregop0=43 & width  {  op_rolb(op1sfr8, width); }
:ROLB op1n16b, width is op=0xB7; op1n16b; hregop0=43 & width  {  op_rolb(op1n16b, width); }
:ROLB X1immb, width is op=0xB8; X1immb; hregop0=43 & width  {  op_rolb(X1immb, width); }
:ROLB X2immb, width is op=0xB9; X2immb; hregop0=43 & width  {  op_rolb(X2immb, width); }
:ROLB X1plusAb, width is op=0xBA & X1plusAb; hregop0=43 & width  {  op_rolb(X1plusAb, width); }
:ROLB X1plusR0b, width is op=0xBB & X1plusR0b; hregop0=43 & width  {  op_rolb(X1plusR0b, width); }
:ROLB PSWL, width is op=0x8A & PSWL; hregop0=43 & width  {  op_rolb(PSWL, width); }
:ROLB PSWH, width is op=0x9A & PSWH; hregop0=43 & width  {  op_rolb(PSWH, width); }
:ROLB n7b, width is op=0x9B; n7b; hregop0=43 & width  {  op_rolb(n7b, width); }
:ROR A16, 1 is dd=1 & op=0xBF & A16  {  op_ror(A16, 1); }
:ROR A16, width is dd=1 & op=0xBC; hregop0=47 & width & A16  {  op_ror(A16, width); }
:ROR reg16, width is regop0=0xc & reg16; hregop0=47 & width  {  op_ror(reg16, width); }
:ROR X1indw, width is op=0xA0 & X1indw; hregop0=47 & width  {  op_ror(X1indw, width); }
:ROR DPinddecw, width is op=0xA1 & DPinddecw; hregop0=47 & width  {  op_ror(DPinddecw, width); }
:ROR DPindw, width is op=0xA2 & DPindw; hregop0=47 & width  {  op_ror(DPindw, width); }
:ROR DPindincw, width is op=0xA3 & DPindincw; hregop0=47 & width  {  op_ror(DPindincw, width); }
:ROR op1fix16, width is op=0xA4; op1fix16; hregop0=47 & width  {  op_ror(op1fix16, width); }
:ROR op1off16, width is op=0xA5; op1off16; hregop0=47 & width  {  op_ror(op1off16, width); }
:ROR op1sfr16, width is op=0xA6; op1sfr16; hregop0=47 & width  {  op_ror(op1sfr16, width); }
:ROR op1n16w, width is op=0xA7; op1n16w; hregop0=47 & width  {  op_ror(op1n16w, width); }
:ROR X1immw, width is op=0xA8; X1immw; hregop0=47 & width  {  op_ror(X1immw, width); }
:ROR X2immw, width is op=0xA9; X2immw; hregop0=47 & width  {  op_ror(X2immw, width); }
:ROR X1plusAw, width is op=0xAA & X1plusAw; hregop0=47 & width  {  op_ror(X1plusAw, width); }
:ROR X1plusR0w, width is op=0xAB & X1plusR0w; hregop0=47 & width  {  op_ror(X1plusR0w, width); }
:ROR n7w, width is op=0x8B; n7w; hregop0=47 & width  {  op_ror(n7w, width); }
:RORB A8, 1 is dd=0 & op=0xBF & A8  {  op_rorb(A8, 1); }
:RORB A8, width is dd=0 & op=0xBC; hregop0=47 & width & A8  {  op_rorb(A8, width); }
:RORB reg8, width is regop0=0xd & reg8; hregop0=47 & width  {  op_rorb(reg8, width); }
:RORB X1indb, width is op=0xB0 & X1indb; hregop0=47 & width  {  op_rorb(X1indb, width); }
:RORB DPinddecb, width is op=0xB1 & DPinddecb; hregop0=47 & width  {  op_rorb(DPinddecb, width); }
:RORB DPindb, width is op=0xB2 & DPindb; hregop0=47 & width  {  op_rorb(DPindb, width); }
:RORB DPindincb, width is op=0xB3 & DPindincb; hregop0=47 & width  {  op_rorb(DPindincb, width); }
:RORB op1fix8, width is op=0xB4; op1fix8; hregop0=47 & width  {  op_rorb(op1fix8, width); }
:RORB op1off8, width is op=0xB5; op1off8; hregop0=47 & width  {  op_rorb(op1off8, width); }
:RORB op1sfr8, width is op=0xB6; op1sfr8; hregop0=47 & width  {  op_rorb(op1sfr8, width); }
:RORB op1n16b, width is op=0xB7; op1n16b; hregop0=47 & width  {  op_rorb(op1n16b, width); }
:RORB X1immb, width is op=0xB8; X1immb; hregop0=47 & width  {  op_rorb(X1immb, width); }
:RORB X2immb, width is op=0xB9; X2immb; hregop0=47 & width  {  op_rorb(X2immb, width); }
:RORB X1plusAb, width is op=0xBA & X1plusAb; hregop0=47 & width  {  op_rorb(X1plusAb, width); }
:RORB X1plusR0b, width is op=0xBB & X1plusR0b; hregop0=47 & width  {  op_rorb(X1plusR0b, width); }
:RORB PSWL, width is op=0x8A & PSWL; hregop0=47 & width  {  op_rorb(PSWL, width); }
:RORB PSWH, width is op=0x9A & PSWH; hregop0=47 & width  {  op_rorb(PSWH, width); }
:RORB n7b, width is op=0x9B; n7b; hregop0=47 & width  {  op_rorb(n7b, width); }
:RT  is op=0x01  {  op_rt(); }
:RTI  is op=0x02  {  op_rti(); }
:SB sbafix^"."^bit is bitop0=11 & bit; sbaop=0 & sbafix  {  op_sb(sbafix,bit); }
:SB sbaoff^"."^bit is bitop0=9 & bit; sbaop=0 & sbaoff  {  op_sb(sbaoff,bit); }
:SB A8^"."^bit is op=0xBC; bitop0=1 & bit & A8  {  op_sb(A8,bit); }
:SB reg8^"."^bit is regop0=0xd & reg8; bitop0=1 & bit  {  op_sb(reg8,bit); }
:SB X1indb^"."^bit is op=0xB0 & X1indb; bitop0=1 & bit  {  op_sb(X1indb,bit); }
:SB DPinddecb^"."^bit is op=0xB1 & DPinddecb; bitop0=1 & bit  {  op_sb(DPinddecb,bit); }
:SB DPindb^"."^bit is op=0xB2 & DPindb; bitop0=1 & bit  {  op_sb(DPindb,bit); }
:SB DPindincb^"."^bit is op=0xB3 & DPindincb; bitop0=1 & bit  {  op_sb(DPindincb,bit); }
:SB op1fix8^"."^bit is op=0xB4; op1fix8; bitop0=1 & bit  {  op_sb(op1fix8,bit); }
:SB op1off8^"."^bit is op=0xB5; op1off8; bitop0=1 & bit  {  op_sb(op1off8,bit); }
:SB op1sfr8^"."^bit is op=0xB6; op1sfr8; bitop0=1 & bit  {  op_sb(op1sfr8,bit); }
:SB op1n16b^"."^bit is op=0xB7; op1n16b; bitop0=1 & bit  {  op_sb(op1n16b,bit); }
:SB X1immb^"."^bit is op=0xB8; X1immb; bitop0=1 & bit  {  op_sb(X1immb,bit); }
:SB X2immb^"."^bit is op=0xB9; X2immb; bitop0=1 & bit  {  op_sb(X2immb,bit); }
:SB X1plusAb^"."^bit is op=0xBA & X1plusAb; bitop0=1 & bit  {  op_sb(X1plusAb,bit); }
:SB X1plusR0b^"."^bit is op=0xBB & X1plusR0b; bitop0=1 & bit  {  op_sb(X1plusR0b,bit); }
:SB PSWL^"."^bit is op=0x8A & PSWL; bitop0=1 & bit  {  op_sb(PSWL,bit); }
:SB PSWH^"."^bit is op=0x9A & PSWH; bitop0=1 & bit  {  op_sb(PSWH,bit); }
:SB n7b^"."^bit is op=0x9B; n7b; bitop0=1 & bit  {  op_sb(n7b,bit); }
:SBC A16, #n16 is dd=1 & op=0xBC; op=0xE3; n16 & A16  {  op_sbc(A16, n16:2); }
:SBC A16, reg16 is regop0=0xc & reg16; op=0xE5 & A16  {  op_sbc(A16, reg16); }
:SBC A16, X1indw is op=0xA0 & X1indw; op=0xE5 & A16  {  op_sbc(A16, X1indw); }
:SBC A16, DPinddecw is op=0xA1 & DPinddecw; op=0xE5 & A16  {  op_sbc(A16, DPinddecw); }
:SBC A16, DPindw is op=0xA2 & DPindw; op=0xE5 & A16  {  op_sbc(A16, DPindw); }
:SBC A16, DPindincw is op=0xA3 & DPindincw; op=0xE5 & A16  {  op_sbc(A16, DPindincw); }
:SBC A16, op1fix16 is op=0xA4; op1fix16; op=0xE5 & A16  {  op_sbc(A16, op1fix16); }
:SBC A16, op1off16 is op=0xA5; op1off16; op=0xE5 & A16  {  op_sbc(A16, op1off16); }
:SBC A16, op1sfr16 is op=0xA6; op1sfr16; op=0xE5 & A16  {  op_sbc(A16, op1sfr16); }
:SBC A16, op1n16w is op=0xA7; op1n16w; op=0xE5 & A16  {  op_sbc(A16, op1n16w); }
:SBC A16, X1immw is op=0xA8; X1immw; op=0xE5 & A16  {  op_sbc(A16, X1immw); }
:SBC A16, X2immw is op=0xA9; X2immw; op=0xE5 & A16  {  op_sbc(A16, X2immw); }
:SBC A16, X1plusAw is op=0xAA & X1plusAw; op=0xE5 & A16  {  op_sbc(A16, X1plusAw); }
:SBC A16, X1plusR0w is op=0xAB & X1plusR0w; op=0xE5 & A16  {  op_sbc(A16, X1plusR0w); }
:SBC A16, n7w is op=0x8B; n7w; op=0xE5 & A16  {  op_sbc(A16, n7w); }
:SBC reg16, fix16 is regop0=0xc & reg16; op=0xE0; fix16  {  op_sbc(reg16, fix16); }
:SBC X1indw, fix16 is op=0xA0 & X1indw; op=0xE0; fix16  {  op_sbc(X1indw, fix16); }
:SBC DPinddecw, fix16 is op=0xA1 & DPinddecw; op=0xE0; fix16  {  op_sbc(DPinddecw, fix16); }
:SBC DPindw, fix16 is op=0xA2 & DPindw; op=0xE0; fix16  {  op_sbc(DPindw, fix16); }
:SBC DPindincw, fix16 is op=0xA3 & DPindincw; op=0xE0; fix16  {  op_sbc(DPindincw, fix16); }
:SBC op1fix16, fix16 is op=0xA4; op1fix16; op=0xE0; fix16  {  op_sbc(op1fix16, fix16); }
:SBC op1off16, fix16 is op=0xA5; op1off16; op=0xE0; fix16  {  op_sbc(op1off16, fix16); }
:SBC op1sfr16, fix16 is op=0xA6; op1sfr16; op=0xE0; fix16  {  op_sbc(op1sfr16, fix16); }
:SBC op1n16w, fix16 is op=0xA7; op1n16w; op=0xE0; fix16  {  op_sbc(op1n16w, fix16); }
:SBC X1immw, fix16 is op=0xA8; X1immw; op=0xE0; fix16  {  op_sbc(X1immw, fix16); }
:SBC X2immw, fix16 is op=0xA9; X2immw; op=0xE0; fix16  {  op_sbc(X2immw, fix16); }
:SBC X1plusAw, fix16 is op=0xAA & X1plusAw; op=0xE0; fix16  {  op_sbc(X1plusAw, fix16); }
:SBC X1plusR0w, fix16 is op=0xAB & X1plusR0w; op=0xE0; fix16  {  op_sbc(X1plusR0w, fix16); }
:SBC n7w, fix16 is op=0x8B; n7w; op=0xE0; fix16  {  op_sbc(n7w, fix16); }
:SBC reg16, off16 is regop0=0xc & reg16; op=0xE1; off16  {  op_sbc(reg16, off16); }
:SBC X1indw, off16 is op=0xA0 & X1indw; op=0xE1; off16  {  op_sbc(X1indw, off16); }
:SBC DPinddecw, off16 is op=0xA1 & DPinddecw; op=0xE1; off16  {  op_sbc(DPinddecw, off16); }
:SBC DPindw, off16 is op=0xA2 & DPindw; op=0xE1; off16  {  op_sbc(DPindw, off16); }
:SBC DPindincw, off16 is op=0xA3 & DPindincw; op=0xE1; off16  {  op_sbc(DPindincw, off16); }
:SBC op1fix16, off16 is op=0xA4; op1fix16; op=0xE1; off16  {  op_sbc(op1fix16, off16); }
:SBC op1off16, off16 is op=0xA5; op1off16; op=0xE1; off16  {  op_sbc(op1off16, off16); }
:SBC op1sfr16, off16 is op=0xA6; op1sfr16; op=0xE1; off16  {  op_sbc(op1sfr16, off16); }
:SBC op1n16w, off16 is op=0xA7; op1n16w; op=0xE1; off16  {  op_sbc(op1n16w, off16); }
:SBC X1immw, off16 is op=0xA8; X1immw; op=0xE1; off16  {  op_sbc(X1immw, off16); }
:SBC X2immw, off16 is op=0xA9; X2immw; op=0xE1; off16  {  op_sbc(X2immw, off16); }
:SBC X1plusAw, off16 is op=0xAA & X1plusAw; op=0xE1; off16  {  op_sbc(X1plusAw, off16); }
:SBC X1plusR0w, off16 is op=0xAB & X1plusR0w; op=0xE1; off16  {  op_sbc(X1plusR0w, off16); }
:SBC n7w, off16 is op=0x8B; n7w; op=0xE1; off16  {  op_sbc(n7w, off16); }
:SBC reg16, sfr16 is regop0=0xc & reg16; op=0xE2; sfr16  {  op_sbc(reg16, sfr16); }
:SBC X1indw, sfr16 is op=0xA0 & X1indw; op=0xE2; sfr16  {  op_sbc(X1indw, sfr16); }
:SBC DPinddecw, sfr16 is op=0xA1 & DPinddecw; op=0xE2; sfr16  {  op_sbc(DPinddecw, sfr16); }
:SBC DPindw, sfr16 is op=0xA2 & DPindw; op=0xE2; sfr16  {  op_sbc(DPindw, sfr16); }
:SBC DPindincw, sfr16 is op=0xA3 & DPindincw; op=0xE2; sfr16  {  op_sbc(DPindincw, sfr16); }
:SBC op1fix16, sfr16 is op=0xA4; op1fix16; op=0xE2; sfr16  {  op_sbc(op1fix16, sfr16); }
:SBC op1off16, sfr16 is op=0xA5; op1off16; op=0xE2; sfr16  {  op_sbc(op1off16, sfr16); }
:SBC op1sfr16, sfr16 is op=0xA6; op1sfr16; op=0xE2; sfr16  {  op_sbc(op1sfr16, sfr16); }
:SBC op1n16w, sfr16 is op=0xA7; op1n16w; op=0xE2; sfr16  {  op_sbc(op1n16w, sfr16); }
:SBC X1immw, sfr16 is op=0xA8; X1immw; op=0xE2; sfr16  {  op_sbc(X1immw, sfr16); }
:SBC X2immw, sfr16 is op=0xA9; X2immw; op=0xE2; sfr16  {  op_sbc(X2immw, sfr16); }
:SBC X1plusAw, sfr16 is op=0xAA & X1plusAw; op=0xE2; sfr16  {  op_sbc(X1plusAw, sfr16); }
:SBC X1plusR0w, sfr16 is op=0xAB & X1plusR0w; op=0xE2; sfr16  {  op_sbc(X1plusR0w, sfr16); }
:SBC n7w, sfr16 is op=0x8B; n7w; op=0xE2; sfr16  {  op_sbc(n7w, sfr16); }
:SBC reg16, #n16 is regop0=0xc & reg16; op=0xE3; n16  {  op_sbc(reg16, n16:2); }
:SBC X1indw, #n16 is op=0xA0 & X1indw; op=0xE3; n16  {  op_sbc(X1indw, n16:2); }
:SBC DPinddecw, #n16 is op=0xA1 & DPinddecw; op=0xE3; n16  {  op_sbc(DPinddecw, n16:2); }
:SBC DPindw, #n16 is op=0xA2 & DPindw; op=0xE3; n16  {  op_sbc(DPindw, n16:2); }
:SBC DPindincw, #n16 is op=0xA3 & DPindincw; op=0xE3; n16  {  op_sbc(DPindincw, n16:2); }
:SBC op1fix16, #n16 is op=0xA4; op1fix16; op=0xE3; n16  {  op_sbc(op1fix16, n16:2); }
:SBC op1off16, #n16 is op=0xA5; op1off16; op=0xE3; n16  {  op_sbc(op1off16, n16:2); }
:SBC op1sfr16, #n16 is op=0xA6; op1sfr16; op=0xE3; n16  {  op_sbc(op1sfr16, n16:2); }
:SBC op1n16w, #n16 is op=0xA7; op1n16w; op=0xE3; n16  {  op_sbc(op1n16w, n16:2); }
:SBC X1immw, #n16 is op=0xA8; X1immw; op=0xE3; n16  {  op_sbc(X1immw, n16:2); }
:SBC X2immw, #n16 is op=0xA9; X2immw; op=0xE3; n16  {  op_sbc(X2immw, n16:2); }
:SBC X1plusAw, #n16 is op=0xAA & X1plusAw; op=0xE3; n16  {  op_sbc(X1plusAw, n16:2); }
:SBC X1plusR0w, #n16 is op=0xAB & X1plusR0w; op=0xE3; n16  {  op_sbc(X1plusR0w, n16:2); }
:SBC n7w, #n16 is op=0x8B; n7w; op=0xE3; n16  {  op_sbc(n7w, n16:2); }
:SBC reg16, A16 is regop0=0xc & reg16; op=0xE4 & A16  {  op_sbc(reg16, A16); }
:SBC X1indw, A16 is op=0xA0 & X1indw; op=0xE4 & A16  {  op_sbc(X1indw, A16); }
:SBC DPinddecw, A16 is op=0xA1 & DPinddecw; op=0xE4 & A16  {  op_sbc(DPinddecw, A16); }
:SBC DPindw, A16 is op=0xA2 & DPindw; op=0xE4 & A16  {  op_sbc(DPindw, A16); }
:SBC DPindincw, A16 is op=0xA3 & DPindincw; op=0xE4 & A16  {  op_sbc(DPindincw, A16); }
:SBC op1fix16, A16 is op=0xA4; op1fix16; op=0xE4 & A16  {  op_sbc(op1fix16, A16); }
:SBC op1off16, A16 is op=0xA5; op1off16; op=0xE4 & A16  {  op_sbc(op1off16, A16); }
:SBC op1sfr16, A16 is op=0xA6; op1sfr16; op=0xE4 & A16  {  op_sbc(op1sfr16, A16); }
:SBC op1n16w, A16 is op=0xA7; op1n16w; op=0xE4 & A16  {  op_sbc(op1n16w, A16); }
:SBC X1immw, A16 is op=0xA8; X1immw; op=0xE4 & A16  {  op_sbc(X1immw, A16); }
:SBC X2immw, A16 is op=0xA9; X2immw; op=0xE4 & A16  {  op_sbc(X2immw, A16); }
:SBC X1plusAw, A16 is op=0xAA & X1plusAw; op=0xE4 & A16  {  op_sbc(X1plusAw, A16); }
:SBC X1plusR0w, A16 is op=0xAB & X1plusR0w; op=0xE4 & A16  {  op_sbc(X1plusR0w, A16); }
:SBC n7w, A16 is op=0x8B; n7w; op=0xE4 & A16  {  op_sbc(n7w, A16); }
:SBCB A8, #n8 is dd=0 & op=0xBC; op=0xE3; n8 & A8  {  op_sbcb(A8, n8:1); }
:SBCB A8, reg8 is regop0=0xd & reg8; op=0xE5 & A8  {  op_sbcb(A8, reg8); }
:SBCB A8, X1indb is op=0xB0 & X1indb; op=0xE5 & A8  {  op_sbcb(A8, X1indb); }
:SBCB A8, DPinddecb is op=0xB1 & DPinddecb; op=0xE5 & A8  {  op_sbcb(A8, DPinddecb); }
:SBCB A8, DPindb is op=0xB2 & DPindb; op=0xE5 & A8  {  op_sbcb(A8, DPindb); }
:SBCB A8, DPindincb is op=0xB3 & DPindincb; op=0xE5 & A8  {  op_sbcb(A8, DPindincb); }
:SBCB A8, op1fix8 is op=0xB4; op1fix8; op=0xE5 & A8  {  op_sbcb(A8, op1fix8); }
:SBCB A8, op1off8 is op=0xB5; op1off8; op=0xE5 & A8  {  op_sbcb(A8, op1off8); }
:SBCB A8, op1sfr8 is op=0xB6; op1sfr8; op=0xE5 & A8  {  op_sbcb(A8, op1sfr8); }
:SBCB A8, op1n16b is op=0xB7; op1n16b; op=0xE5 & A8  {  op_sbcb(A8, op1n16b); }
:SBCB A8, X1immb is op=0xB8; X1immb; op=0xE5 & A8  {  op_sbcb(A8, X1immb); }
:SBCB A8, X2immb is op=0xB9; X2immb; op=0xE5 & A8  {  op_sbcb(A8, X2immb); }
:SBCB A8, X1plusAb is op=0xBA & X1plusAb; op=0xE5 & A8  {  op_sbcb(A8, X1plusAb); }
:SBCB A8, X1plusR0b is op=0xBB & X1plusR0b; op=0xE5 & A8  {  op_sbcb(A8, X1plusR0b); }
:SBCB A8, PSWL is op=0x8A & PSWL; op=0xE5 & A8  {  op_sbcb(A8, PSWL); }
:SBCB A8, PSWH is op=0x9A & PSWH; op=0xE5 & A8  {  op_sbcb(A8, PSWH); }
:SBCB A8, n7b is op=0x9B; n7b; op=0xE5 & A8  {  op_sbcb(A8, n7b); }
:SBCB reg8, fix8 is regop0=0xd & reg8; op=0xE0; fix8  {  op_sbcb(reg8, fix8); }
:SBCB X1indb, fix8 is op=0xB0 & X1indb; op=0xE0; fix8  {  op_sbcb(X1indb, fix8); }
:SBCB DPinddecb, fix8 is op=0xB1 & DPinddecb; op=0xE0; fix8  {  op_sbcb(DPinddecb, fix8); }
:SBCB DPindb, fix8 is op=0xB2 & DPindb; op=0xE0; fix8  {  op_sbcb(DPindb, fix8); }
:SBCB DPindincb, fix8 is op=0xB3 & DPindincb; op=0xE0; fix8  {  op_sbcb(DPindincb, fix8); }
:SBCB op1fix8, fix8 is op=0xB4; op1fix8; op=0xE0; fix8  {  op_sbcb(op1fix8, fix8); }
:SBCB op1off8, fix8 is op=0xB5; op1off8; op=0xE0; fix8  {  op_sbcb(op1off8, fix8); }
:SBCB op1sfr8, fix8 is op=0xB6; op1sfr8; op=0xE0; fix8  {  op_sbcb(op1sfr8, fix8); }
:SBCB op1n16b, fix8 is op=0xB7; op1n16b; op=0xE0; fix8  {  op_sbcb(op1n16b, fix8); }
:SBCB X1immb, fix8 is op=0xB8; X1immb; op=0xE0; fix8  {  op_sbcb(X1immb, fix8); }
:SBCB X2immb, fix8 is op=0xB9; X2immb; op=0xE0; fix8  {  op_sbcb(X2immb, fix8); }
:SBCB X1plusAb, fix8 is op=0xBA & X1plusAb; op=0xE0; fix8  {  op_sbcb(X1plusAb, fix8); }
:SBCB X1plusR0b, fix8 is op=0xBB & X1plusR0b; op=0xE0; fix8  {  op_sbcb(X1plusR0b, fix8); }
:SBCB PSWL, fix8 is op=0x8A & PSWL; op=0xE0; fix8  {  op_sbcb(PSWL, fix8); }
:SBCB PSWH, fix8 is op=0x9A & PSWH; op=0xE0; fix8  {  op_sbcb(PSWH, fix8); }
:SBCB n7b, fix8 is op=0x9B; n7b; op=0xE0; fix8  {  op_sbcb(n7b, fix8); }
:SBCB reg8, off8 is regop0=0xd & reg8; op=0xE1; off8  {  op_sbcb(reg8, off8); }
:SBCB X1indb, off8 is op=0xB0 & X1indb; op=0xE1; off8  {  op_sbcb(X1indb, off8); }
:SBCB DPinddecb, off8 is op=0xB1 & DPinddecb; op=0xE1; off8  {  op_sbcb(DPinddecb, off8); }
:SBCB DPindb, off8 is op=0xB2 & DPindb; op=0xE1; off8  {  op_sbcb(DPindb, off8); }
:SBCB DPindincb, off8 is op=0xB3 & DPindincb; op=0xE1; off8  {  op_sbcb(DPindincb, off8); }
:SBCB op1fix8, off8 is op=0xB4; op1fix8; op=0xE1; off8  {  op_sbcb(op1fix8, off8); }
:SBCB op1off8, off8 is op=0xB5; op1off8; op=0xE1; off8  {  op_sbcb(op1off8, off8); }
:SBCB op1sfr8, off8 is op=0xB6; op1sfr8; op=0xE1; off8  {  op_sbcb(op1sfr8, off8); }
:SBCB op1n16b, off8 is op=0xB7; op1n16b; op=0xE1; off8  {  op_sbcb(op1n16b, off8); }
:SBCB X1immb, off8 is op=0xB8; X1immb; op=0xE1; off8  {  op_sbcb(X1immb, off8); }
:SBCB X2immb, off8 is op=0xB9; X2immb; op=0xE1; off8  {  op_sbcb(X2immb, off8); }
:SBCB X1plusAb, off8 is op=0xBA & X1plusAb; op=0xE1; off8  {  op_sbcb(X1plusAb, off8); }
:SBCB X1plusR0b, off8 is op=0xBB & X1plusR0b; op=0xE1; off8  {  op_sbcb(X1plusR0b, off8); }
:SBCB PSWL, off8 is op=0x8A & PSWL; op=0xE1; off8  {  op_sbcb(PSWL, off8); }
:SBCB PSWH, off8 is op=0x9A & PSWH; op=0xE1; off8  {  op_sbcb(PSWH, off8); }
:SBCB n7b, off8 is op=0x9B; n7b; op=0xE1; off8  {  op_sbcb(n7b, off8); }
:SBCB reg8, sfr8 is regop0=0xd & reg8; op=0xE2; sfr8  {  op_sbcb(reg8, sfr8); }
:SBCB X1indb, sfr8 is op=0xB0 & X1indb; op=0xE2; sfr8  {  op_sbcb(X1indb, sfr8); }
:SBCB DPinddecb, sfr8 is op=0xB1 & DPinddecb; op=0xE2; sfr8  {  op_sbcb(DPinddecb, sfr8); }
:SBCB DPindb, sfr8 is op=0xB2 & DPindb; op=0xE2; sfr8  {  op_sbcb(DPindb, sfr8); }
:SBCB DPindincb, sfr8 is op=0xB3 & DPindincb; op=0xE2; sfr8  {  op_sbcb(DPindincb, sfr8); }
:SBCB op1fix8, sfr8 is op=0xB4; op1fix8; op=0xE2; sfr8  {  op_sbcb(op1fix8, sfr8); }
:SBCB op1off8, sfr8 is op=0xB5; op1off8; op=0xE2; sfr8  {  op_sbcb(op1off8, sfr8); }
:SBCB op1sfr8, sfr8 is op=0xB6; op1sfr8; op=0xE2; sfr8  {  op_sbcb(op1sfr8, sfr8); }
:SBCB op1n16b, sfr8 is op=0xB7; op1n16b; op=0xE2; sfr8  {  op_sbcb(op1n16b, sfr8); }
:SBCB X1immb, sfr8 is op=0xB8; X1immb; op=0xE2; sfr8  {  op_sbcb(X1immb, sfr8); }
:SBCB X2immb, sfr8 is op=0xB9; X2immb; op=0xE2; sfr8  {  op_sbcb(X2immb, sfr8); }
:SBCB X1plusAb, sfr8 is op=0xBA & X1plusAb; op=0xE2; sfr8  {  op_sbcb(X1plusAb, sfr8); }
:SBCB X1plusR0b, sfr8 is op=0xBB & X1plusR0b; op=0xE2; sfr8  {  op_sbcb(X1plusR0b, sfr8); }
:SBCB PSWL, sfr8 is op=0x8A & PSWL; op=0xE2; sfr8  {  op_sbcb(PSWL, sfr8); }
:SBCB PSWH, sfr8 is op=0x9A & PSWH; op=0xE2; sfr8  {  op_sbcb(PSWH, sfr8); }
:SBCB n7b, sfr8 is op=0x9B; n7b; op=0xE2; sfr8  {  op_sbcb(n7b, sfr8); }
:SBCB reg8, #n8 is regop0=0xd & reg8; op=0xE3; n8  {  op_sbcb(reg8, n8:1); }
:SBCB X1indb, #n8 is op=0xB0 & X1indb; op=0xE3; n8  {  op_sbcb(X1indb, n8:1); }
:SBCB DPinddecb, #n8 is op=0xB1 & DPinddecb; op=0xE3; n8  {  op_sbcb(DPinddecb, n8:1); }
:SBCB DPindb, #n8 is op=0xB2 & DPindb; op=0xE3; n8  {  op_sbcb(DPindb, n8:1); }
:SBCB DPindincb, #n8 is op=0xB3 & DPindincb; op=0xE3; n8  {  op_sbcb(DPindincb, n8:1); }
:SBCB op1fix8, #n8 is op=0xB4; op1fix8; op=0xE3; n8  {  op_sbcb(op1fix8, n8:1); }
:SBCB op1off8, #n8 is op=0xB5; op1off8; op=0xE3; n8  {  op_sbcb(op1off8, n8:1); }
:SBCB op1sfr8, #n8 is op=0xB6; op1sfr8; op=0xE3; n8  {  op_sbcb(op1sfr8, n8:1); }
:SBCB op1n16b, #n8 is op=0xB7; op1n16b; op=0xE3; n8  {  op_sbcb(op1n16b, n8:1); }
:SBCB X1immb, #n8 is op=0xB8; X1immb; op=0xE3; n8  {  op_sbcb(X1immb, n8:1); }
:SBCB X2immb, #n8 is op=0xB9; X2immb; op=0xE3; n8  {  op_sbcb(X2immb, n8:1); }
:SBCB X1plusAb, #n8 is op=0xBA & X1plusAb; op=0xE3; n8  {  op_sbcb(X1plusAb, n8:1); }
:SBCB X1plusR0b, #n8 is op=0xBB & X1plusR0b; op=0xE3; n8  {  op_sbcb(X1plusR0b, n8:1); }
:SBCB PSWL, #n8 is op=0x8A & PSWL; op=0xE3; n8  {  op_sbcb(PSWL, n8:1); }
:SBCB PSWH, #n8 is op=0x9A & PSWH; op=0xE3; n8  {  op_sbcb(PSWH, n8:1); }
:SBCB n7b, #n8 is op=0x9B; n7b; op=0xE3; n8  {  op_sbcb(n7b, n8:1); }
:SBCB reg8, A8 is regop0=0xd & reg8; op=0xE4 & A8  {  op_sbcb(reg8, A8); }
:SBCB X1indb, A8 is op=0xB0 & X1indb; op=0xE4 & A8  {  op_sbcb(X1indb, A8); }
:SBCB DPinddecb, A8 is op=0xB1 & DPinddecb; op=0xE4 & A8  {  op_sbcb(DPinddecb, A8); }
:SBCB DPindb, A8 is op=0xB2 & DPindb; op=0xE4 & A8  {  op_sbcb(DPindb, A8); }
:SBCB DPindincb, A8 is op=0xB3 & DPindincb; op=0xE4 & A8  {  op_sbcb(DPindincb, A8); }
:SBCB op1fix8, A8 is op=0xB4; op1fix8; op=0xE4 & A8  {  op_sbcb(op1fix8, A8); }
:SBCB op1off8, A8 is op=0xB5; op1off8; op=0xE4 & A8  {  op_sbcb(op1off8, A8); }
:SBCB op1sfr8, A8 is op=0xB6; op1sfr8; op=0xE4 & A8  {  op_sbcb(op1sfr8, A8); }
:SBCB op1n16b, A8 is op=0xB7; op1n16b; op=0xE4 & A8  {  op_sbcb(op1n16b, A8); }
:SBCB X1immb, A8 is op=0xB8; X1immb; op=0xE4 & A8  {  op_sbcb(X1immb, A8); }
:SBCB X2immb, A8 is op=0xB9; X2immb; op=0xE4 & A8  {  op_sbcb(X2immb, A8); }
:SBCB X1plusAb, A8 is op=0xBA & X1plusAb; op=0xE4 & A8  {  op_sbcb(X1plusAb, A8); }
:SBCB X1plusR0b, A8 is op=0xBB & X1plusR0b; op=0xE4 & A8  {  op_sbcb(X1plusR0b, A8); }
:SBCB PSWL, A8 is op=0x8A & PSWL; op=0xE4 & A8  {  op_sbcb(PSWL, A8); }
:SBCB PSWH, A8 is op=0x9A & PSWH; op=0xE4 & A8  {  op_sbcb(PSWH, A8); }
:SBCB n7b, A8 is op=0x9B; n7b; op=0xE4 & A8  {  op_sbcb(n7b, A8); }
:SBR reg8^"."^(AL) is regop0=0xd & reg8; op=0xB8 & AL  {  op_sbr(reg8,(AL)); }
:SBR X1indb^"."^(AL) is op=0xB0 & X1indb; op=0xB8 & AL  {  op_sbr(X1indb,(AL)); }
:SBR DPinddecb^"."^(AL) is op=0xB1 & DPinddecb; op=0xB8 & AL  {  op_sbr(DPinddecb,(AL)); }
:SBR DPindb^"."^(AL) is op=0xB2 & DPindb; op=0xB8 & AL  {  op_sbr(DPindb,(AL)); }
:SBR DPindincb^"."^(AL) is op=0xB3 & DPindincb; op=0xB8 & AL  {  op_sbr(DPindincb,(AL)); }
:SBR op1fix8^"."^(AL) is op=0xB4; op1fix8; op=0xB8 & AL  {  op_sbr(op1fix8,(AL)); }
:SBR op1off8^"."^(AL) is op=0xB5; op1off8; op=0xB8 & AL  {  op_sbr(op1off8,(AL)); }
:SBR op1sfr8^"."^(AL) is op=0xB6; op1sfr8; op=0xB8 & AL  {  op_sbr(op1sfr8,(AL)); }
:SBR op1n16b^"."^(AL) is op=0xB7; op1n16b; op=0xB8 & AL  {  op_sbr(op1n16b,(AL)); }
:SBR X1immb^"."^(AL) is op=0xB8; X1immb; op=0xB8 & AL  {  op_sbr(X1immb,(AL)); }
:SBR X2immb^"."^(AL) is op=0xB9; X2immb; op=0xB8 & AL  {  op_sbr(X2immb,(AL)); }
:SBR X1plusAb^"."^(AL) is op=0xBA & X1plusAb; op=0xB8 & AL  {  op_sbr(X1plusAb,(AL)); }
:SBR X1plusR0b^"."^(AL) is op=0xBB & X1plusR0b; op=0xB8 & AL  {  op_sbr(X1plusR0b,(AL)); }
:SBR PSWL^"."^(AL) is op=0x8A & PSWL; op=0xB8 & AL  {  op_sbr(PSWL,(AL)); }
:SBR PSWH^"."^(AL) is op=0x9A & PSWH; op=0xB8 & AL  {  op_sbr(PSWH,(AL)); }
:SBR n7b^"."^(AL) is op=0x9B; n7b; op=0xB8 & AL  {  op_sbr(n7b,(AL)); }
:SC  is op=0xCB  {  op_sc(); }
:SDD  is op=0xD9 [ dd=1; globalset(inst_next, dd); ] {  op_sdd(); }
:SJ rel8 is op=0x04; rel8  {  op_sj(rel8); }
:SLL A16, 1 is dd=1 & op=0x8F & A16  {  op_sll(A16, 1); }
:SLL A16, width is dd=1 & op=0xBC; hregop0=35 & width & A16  {  op_sll(A16, width); }
:SLL reg16, width is regop0=0xc & reg16; hregop0=35 & width  {  op_sll(reg16, width); }
:SLL X1indw, width is op=0xA0 & X1indw; hregop0=35 & width  {  op_sll(X1indw, width); }
:SLL DPinddecw, width is op=0xA1 & DPinddecw; hregop0=35 & width  {  op_sll(DPinddecw, width); }
:SLL DPindw, width is op=0xA2 & DPindw; hregop0=35 & width  {  op_sll(DPindw, width); }
:SLL DPindincw, width is op=0xA3 & DPindincw; hregop0=35 & width  {  op_sll(DPindincw, width); }
:SLL op1fix16, width is op=0xA4; op1fix16; hregop0=35 & width  {  op_sll(op1fix16, width); }
:SLL op1off16, width is op=0xA5; op1off16; hregop0=35 & width  {  op_sll(op1off16, width); }
:SLL op1sfr16, width is op=0xA6; op1sfr16; hregop0=35 & width  {  op_sll(op1sfr16, width); }
:SLL op1n16w, width is op=0xA7; op1n16w; hregop0=35 & width  {  op_sll(op1n16w, width); }
:SLL X1immw, width is op=0xA8; X1immw; hregop0=35 & width  {  op_sll(X1immw, width); }
:SLL X2immw, width is op=0xA9; X2immw; hregop0=35 & width  {  op_sll(X2immw, width); }
:SLL X1plusAw, width is op=0xAA & X1plusAw; hregop0=35 & width  {  op_sll(X1plusAw, width); }
:SLL X1plusR0w, width is op=0xAB & X1plusR0w; hregop0=35 & width  {  op_sll(X1plusR0w, width); }
:SLL n7w, width is op=0x8B; n7w; hregop0=35 & width  {  op_sll(n7w, width); }
:SLLB A8, 1 is dd=0 & op=0x8F & A8  {  op_sllb(A8, 1); }
:SLLB A8, width is dd=0 & op=0xBC; hregop0=35 & width & A8  {  op_sllb(A8, width); }
:SLLB reg8, width is regop0=0xd & reg8; hregop0=35 & width  {  op_sllb(reg8, width); }
:SLLB X1indb, width is op=0xB0 & X1indb; hregop0=35 & width  {  op_sllb(X1indb, width); }
:SLLB DPinddecb, width is op=0xB1 & DPinddecb; hregop0=35 & width  {  op_sllb(DPinddecb, width); }
:SLLB DPindb, width is op=0xB2 & DPindb; hregop0=35 & width  {  op_sllb(DPindb, width); }
:SLLB DPindincb, width is op=0xB3 & DPindincb; hregop0=35 & width  {  op_sllb(DPindincb, width); }
:SLLB op1fix8, width is op=0xB4; op1fix8; hregop0=35 & width  {  op_sllb(op1fix8, width); }
:SLLB op1off8, width is op=0xB5; op1off8; hregop0=35 & width  {  op_sllb(op1off8, width); }
:SLLB op1sfr8, width is op=0xB6; op1sfr8; hregop0=35 & width  {  op_sllb(op1sfr8, width); }
:SLLB op1n16b, width is op=0xB7; op1n16b; hregop0=35 & width  {  op_sllb(op1n16b, width); }
:SLLB X1immb, width is op=0xB8; X1immb; hregop0=35 & width  {  op_sllb(X1immb, width); }
:SLLB X2immb, width is op=0xB9; X2immb; hregop0=35 & width  {  op_sllb(X2immb, width); }
:SLLB X1plusAb, width is op=0xBA & X1plusAb; hregop0=35 & width  {  op_sllb(X1plusAb, width); }
:SLLB X1plusR0b, width is op=0xBB & X1plusR0b; hregop0=35 & width  {  op_sllb(X1plusR0b, width); }
:SLLB PSWL, width is op=0x8A & PSWL; hregop0=35 & width  {  op_sllb(PSWL, width); }
:SLLB PSWH, width is op=0x9A & PSWH; hregop0=35 & width  {  op_sllb(PSWH, width); }
:SLLB n7b, width is op=0x9B; n7b; hregop0=35 & width  {  op_sllb(n7b, width); }
:SQR A16 is dd=1 & op=0xBC; op=0xA9 & A16  {  op_sqr(A16); }
:SQRB A8 is dd=0 & op=0xBC; op=0xA9 & A8  {  op_sqrb(A8); }
:SRA A16, width is dd=1 & op=0xBC; hregop0=59 & width & A16  {  op_sra(A16, width); }
:SRA reg16, width is regop0=0xc & reg16; hregop0=59 & width  {  op_sra(reg16, width); }
:SRA X1indw, width is op=0xA0 & X1indw; hregop0=59 & width  {  op_sra(X1indw, width); }
:SRA DPinddecw, width is op=0xA1 & DPinddecw; hregop0=59 & width  {  op_sra(DPinddecw, width); }
:SRA DPindw, width is op=0xA2 & DPindw; hregop0=59 & width  {  op_sra(DPindw, width); }
:SRA DPindincw, width is op=0xA3 & DPindincw; hregop0=59 & width  {  op_sra(DPindincw, width); }
:SRA op1fix16, width is op=0xA4; op1fix16; hregop0=59 & width  {  op_sra(op1fix16, width); }
:SRA op1off16, width is op=0xA5; op1off16; hregop0=59 & width  {  op_sra(op1off16, width); }
:SRA op1sfr16, width is op=0xA6; op1sfr16; hregop0=59 & width  {  op_sra(op1sfr16, width); }
:SRA op1n16w, width is op=0xA7; op1n16w; hregop0=59 & width  {  op_sra(op1n16w, width); }
:SRA X1immw, width is op=0xA8; X1immw; hregop0=59 & width  {  op_sra(X1immw, width); }
:SRA X2immw, width is op=0xA9; X2immw; hregop0=59 & width  {  op_sra(X2immw, width); }
:SRA X1plusAw, width is op=0xAA & X1plusAw; hregop0=59 & width  {  op_sra(X1plusAw, width); }
:SRA X1plusR0w, width is op=0xAB & X1plusR0w; hregop0=59 & width  {  op_sra(X1plusR0w, width); }
:SRA n7w, width is op=0x8B; n7w; hregop0=59 & width  {  op_sra(n7w, width); }
:SRAB A8, width is dd=0 & op=0xBC; hregop0=59 & width & A8  {  op_srab(A8, width); }
:SRAB reg8, width is regop0=0xd & reg8; hregop0=59 & width  {  op_srab(reg8, width); }
:SRAB X1indb, width is op=0xB0 & X1indb; hregop0=59 & width  {  op_srab(X1indb, width); }
:SRAB DPinddecb, width is op=0xB1 & DPinddecb; hregop0=59 & width  {  op_srab(DPinddecb, width); }
:SRAB DPindb, width is op=0xB2 & DPindb; hregop0=59 & width  {  op_srab(DPindb, width); }
:SRAB DPindincb, width is op=0xB3 & DPindincb; hregop0=59 & width  {  op_srab(DPindincb, width); }
:SRAB op1fix8, width is op=0xB4; op1fix8; hregop0=59 & width  {  op_srab(op1fix8, width); }
:SRAB op1off8, width is op=0xB5; op1off8; hregop0=59 & width  {  op_srab(op1off8, width); }
:SRAB op1sfr8, width is op=0xB6; op1sfr8; hregop0=59 & width  {  op_srab(op1sfr8, width); }
:SRAB op1n16b, width is op=0xB7; op1n16b; hregop0=59 & width  {  op_srab(op1n16b, width); }
:SRAB X1immb, width is op=0xB8; X1immb; hregop0=59 & width  {  op_srab(X1immb, width); }
:SRAB X2immb, width is op=0xB9; X2immb; hregop0=59 & width  {  op_srab(X2immb, width); }
:SRAB X1plusAb, width is op=0xBA & X1plusAb; hregop0=59 & width  {  op_srab(X1plusAb, width); }
:SRAB X1plusR0b, width is op=0xBB & X1plusR0b; hregop0=59 & width  {  op_srab(X1plusR0b, width); }
:SRAB PSWL, width is op=0x8A & PSWL; hregop0=59 & width  {  op_srab(PSWL, width); }
:SRAB PSWH, width is op=0x9A & PSWH; hregop0=59 & width  {  op_srab(PSWH, width); }
:SRAB n7b, width is op=0x9B; n7b; hregop0=59 & width  {  op_srab(n7b, width); }
:SRL A16, 1 is dd=1 & op=0x9F & A16  {  op_srl(A16, 1); }
:SRL A16, width is dd=1 & op=0xBC; hregop0=39 & width & A16  {  op_srl(A16, width); }
:SRL reg16, width is regop0=0xc & reg16; hregop0=39 & width  {  op_srl(reg16, width); }
:SRL X1indw, width is op=0xA0 & X1indw; hregop0=39 & width  {  op_srl(X1indw, width); }
:SRL DPinddecw, width is op=0xA1 & DPinddecw; hregop0=39 & width  {  op_srl(DPinddecw, width); }
:SRL DPindw, width is op=0xA2 & DPindw; hregop0=39 & width  {  op_srl(DPindw, width); }
:SRL DPindincw, width is op=0xA3 & DPindincw; hregop0=39 & width  {  op_srl(DPindincw, width); }
:SRL op1fix16, width is op=0xA4; op1fix16; hregop0=39 & width  {  op_srl(op1fix16, width); }
:SRL op1off16, width is op=0xA5; op1off16; hregop0=39 & width  {  op_srl(op1off16, width); }
:SRL op1sfr16, width is op=0xA6; op1sfr16; hregop0=39 & width  {  op_srl(op1sfr16, width); }
:SRL op1n16w, width is op=0xA7; op1n16w; hregop0=39 & width  {  op_srl(op1n16w, width); }
:SRL X1immw, width is op=0xA8; X1immw; hregop0=39 & width  {  op_srl(X1immw, width); }
:SRL X2immw, width is op=0xA9; X2immw; hregop0=39 & width  {  op_srl(X2immw, width); }
:SRL X1plusAw, width is op=0xAA & X1plusAw; hregop0=39 & width  {  op_srl(X1plusAw, width); }
:SRL X1plusR0w, width is op=0xAB & X1plusR0w; hregop0=39 & width  {  op_srl(X1plusR0w, width); }
:SRL n7w, width is op=0x8B; n7w; hregop0=39 & width  {  op_srl(n7w, width); }
:SRLB A8, 1 is dd=0 & op=0x9F & A8  {  op_srlb(A8, 1); }
:SRLB A8, width is dd=0 & op=0xBC; hregop0=39 & width & A8  {  op_srlb(A8, width); }
:SRLB reg8, width is regop0=0xd & reg8; hregop0=39 & width  {  op_srlb(reg8, width); }
:SRLB X1indb, width is op=0xB0 & X1indb; hregop0=39 & width  {  op_srlb(X1indb, width); }
:SRLB DPinddecb, width is op=0xB1 & DPinddecb; hregop0=39 & width  {  op_srlb(DPinddecb, width); }
:SRLB DPindb, width is op=0xB2 & DPindb; hregop0=39 & width  {  op_srlb(DPindb, width); }
:SRLB DPindincb, width is op=0xB3 & DPindincb; hregop0=39 & width  {  op_srlb(DPindincb, width); }
:SRLB op1fix8, width is op=0xB4; op1fix8; hregop0=39 & width  {  op_srlb(op1fix8, width); }
:SRLB op1off8, width is op=0xB5; op1off8; hregop0=39 & width  {  op_srlb(op1off8, width); }
:SRLB op1sfr8, width is op=0xB6; op1sfr8; hregop0=39 & width  {  op_srlb(op1sfr8, width); }
:SRLB op1n16b, width is op=0xB7; op1n16b; hregop0=39 & width  {  op_srlb(op1n16b, width); }
:SRLB X1immb, width is op=0xB8; X1immb; hregop0=39 & width  {  op_srlb(X1immb, width); }
:SRLB X2immb, width is op=0xB9; X2immb; hregop0=39 & width  {  op_srlb(X2immb, width); }
:SRLB X1plusAb, width is op=0xBA & X1plusAb; hregop0=39 & width  {  op_srlb(X1plusAb, width); }
:SRLB X1plusR0b, width is op=0xBB & X1plusR0b; hregop0=39 & width  {  op_srlb(X1plusR0b, width); }
:SRLB PSWL, width is op=0x8A & PSWL; hregop0=39 & width  {  op_srlb(PSWL, width); }
:SRLB PSWH, width is op=0x9A & PSWH; hregop0=39 & width  {  op_srlb(PSWH, width); }
:SRLB n7b, width is op=0x9B; n7b; hregop0=39 & width  {  op_srlb(n7b, width); }
:ST A16, ERn is dd=1 & hregop0=14 & ERn & A16  {  op_st(A16, ERn); }
:ST A16, PRn is dd=1 & hregop0=15 & PRn & A16  {  op_st(A16, PRn); }
:ST A16, X1indw2 is dd=1 & op=0x30 & A16 & X1indw2  {  op_st(A16, X1indw2); }
:ST A16, DPinddecw2 is dd=1 & op=0x31 & A16 & DPinddecw2  {  op_st(A16, DPinddecw2); }
:ST A16, DPindw2 is dd=1 & op=0x32 & A16 & DPindw2  {  op_st(A16, DPindw2); }
:ST A16, DPindincw2 is dd=1 & op=0x33 & A16 & DPindincw2  {  op_st(A16, DPindincw2); }
:ST A16, fix16 is dd=1 & op=0x34; fix16 & A16  {  op_st(A16, fix16); }
:ST A16, off16 is dd=1 & op=0x35; off16 & A16  {  op_st(A16, off16); }
:ST A16, sfr16 is dd=1 & op=0x36; sfr16 & A16  {  op_st(A16, sfr16); }
:ST A16, op2n16w is dd=1 & op=0x37; op2n16w & A16  {  op_st(A16, op2n16w); }
:ST A16, X1immw2 is dd=1 & op=0xC8; X1immw2 & A16  {  op_st(A16, X1immw2); }
:ST A16, X2immw2 is dd=1 & op=0xBC; op=0x99; X2immw2 & A16  {  op_st(A16, X2immw2); }
:ST A16, n7pw is dd=1 & op=0xC9; n7pw & A16  {  op_st(A16, n7pw); }
:STB A8, Rn is dd=0 & regop0=7 & Rn & A8  {  op_stb(A8, Rn); }
:STB A8, X1indb2 is dd=0 & op=0x30 & A8 & X1indb2  {  op_stb(A8, X1indb2); }
:STB A8, DPinddecb2 is dd=0 & op=0x31 & A8 & DPinddecb2  {  op_stb(A8, DPinddecb2); }
:STB A8, DPindb2 is dd=0 & op=0x32 & A8 & DPindb2  {  op_stb(A8, DPindb2); }
:STB A8, DPindincb2 is dd=0 & op=0x33 & A8 & DPindincb2  {  op_stb(A8, DPindincb2); }
:STB A8, fix8 is dd=0 & op=0x34; fix8 & A8  {  op_stb(A8, fix8); }
:STB A8, off8 is dd=0 & op=0x35; off8 & A8  {  op_stb(A8, off8); }
:STB A8, sfr8 is dd=0 & op=0x36; sfr8 & A8  {  op_stb(A8, sfr8); }
:STB A8, op2n16b is dd=0 & op=0x37; op2n16b & A8  {  op_stb(A8, op2n16b); }
:STB A8, X1immb2 is dd=0 & op=0xC8; X1immb2 & A8  {  op_stb(A8, X1immb2); }
:STB A8, X2immb2 is dd=0 & op=0xBC; op=0x99; X2immb2 & A8  {  op_stb(A8, X2immb2); }
:STB A8, n7pb is dd=0 & op=0xC9; n7pb & A8  {  op_stb(A8, n7pb); }
:SUB A16, ERn is dd=1 & hregop0=2 & ERn & A16  {  op_sub(A16, ERn); }
:SUB A16, PRn is dd=1 & hregop0=3 & PRn & A16  {  op_sub(A16, PRn); }
:SUB A16, #n16 is dd=1 & op=0x8E; n16 & A16  {  op_sub(A16, n16:2); }
:SUB A16, fix16 is dd=1 & op=0x8C; fix16 & A16  {  op_sub(A16, fix16); }
:SUB A16, off16 is dd=1 & op=0x8D; off16 & A16  {  op_sub(A16, off16); }
:SUB A16, reg16 is regop0=0xc & reg16; op=0x85 & A16  {  op_sub(A16, reg16); }
:SUB A16, X1indw is op=0xA0 & X1indw; op=0x85 & A16  {  op_sub(A16, X1indw); }
:SUB A16, DPinddecw is op=0xA1 & DPinddecw; op=0x85 & A16  {  op_sub(A16, DPinddecw); }
:SUB A16, DPindw is op=0xA2 & DPindw; op=0x85 & A16  {  op_sub(A16, DPindw); }
:SUB A16, DPindincw is op=0xA3 & DPindincw; op=0x85 & A16  {  op_sub(A16, DPindincw); }
:SUB A16, op1fix16 is op=0xA4; op1fix16; op=0x85 & A16  {  op_sub(A16, op1fix16); }
:SUB A16, op1off16 is op=0xA5; op1off16; op=0x85 & A16  {  op_sub(A16, op1off16); }
:SUB A16, op1sfr16 is op=0xA6; op1sfr16; op=0x85 & A16  {  op_sub(A16, op1sfr16); }
:SUB A16, op1n16w is op=0xA7; op1n16w; op=0x85 & A16  {  op_sub(A16, op1n16w); }
:SUB A16, X1immw is op=0xA8; X1immw; op=0x85 & A16  {  op_sub(A16, X1immw); }
:SUB A16, X2immw is op=0xA9; X2immw; op=0x85 & A16  {  op_sub(A16, X2immw); }
:SUB A16, X1plusAw is op=0xAA & X1plusAw; op=0x85 & A16  {  op_sub(A16, X1plusAw); }
:SUB A16, X1plusR0w is op=0xAB & X1plusR0w; op=0x85 & A16  {  op_sub(A16, X1plusR0w); }
:SUB A16, n7w is op=0x8B; n7w; op=0x85 & A16  {  op_sub(A16, n7w); }
:SUB reg16, fix16 is regop0=0xc & reg16; op=0x80; fix16  {  op_sub(reg16, fix16); }
:SUB X1indw, fix16 is op=0xA0 & X1indw; op=0x80; fix16  {  op_sub(X1indw, fix16); }
:SUB DPinddecw, fix16 is op=0xA1 & DPinddecw; op=0x80; fix16  {  op_sub(DPinddecw, fix16); }
:SUB DPindw, fix16 is op=0xA2 & DPindw; op=0x80; fix16  {  op_sub(DPindw, fix16); }
:SUB DPindincw, fix16 is op=0xA3 & DPindincw; op=0x80; fix16  {  op_sub(DPindincw, fix16); }
:SUB op1fix16, fix16 is op=0xA4; op1fix16; op=0x80; fix16  {  op_sub(op1fix16, fix16); }
:SUB op1off16, fix16 is op=0xA5; op1off16; op=0x80; fix16  {  op_sub(op1off16, fix16); }
:SUB op1sfr16, fix16 is op=0xA6; op1sfr16; op=0x80; fix16  {  op_sub(op1sfr16, fix16); }
:SUB op1n16w, fix16 is op=0xA7; op1n16w; op=0x80; fix16  {  op_sub(op1n16w, fix16); }
:SUB X1immw, fix16 is op=0xA8; X1immw; op=0x80; fix16  {  op_sub(X1immw, fix16); }
:SUB X2immw, fix16 is op=0xA9; X2immw; op=0x80; fix16  {  op_sub(X2immw, fix16); }
:SUB X1plusAw, fix16 is op=0xAA & X1plusAw; op=0x80; fix16  {  op_sub(X1plusAw, fix16); }
:SUB X1plusR0w, fix16 is op=0xAB & X1plusR0w; op=0x80; fix16  {  op_sub(X1plusR0w, fix16); }
:SUB n7w, fix16 is op=0x8B; n7w; op=0x80; fix16  {  op_sub(n7w, fix16); }
:SUB reg16, off16 is regop0=0xc & reg16; op=0x81; off16  {  op_sub(reg16, off16); }
:SUB X1indw, off16 is op=0xA0 & X1indw; op=0x81; off16  {  op_sub(X1indw, off16); }
:SUB DPinddecw, off16 is op=0xA1 & DPinddecw; op=0x81; off16  {  op_sub(DPinddecw, off16); }
:SUB DPindw, off16 is op=0xA2 & DPindw; op=0x81; off16  {  op_sub(DPindw, off16); }
:SUB DPindincw, off16 is op=0xA3 & DPindincw; op=0x81; off16  {  op_sub(DPindincw, off16); }
:SUB op1fix16, off16 is op=0xA4; op1fix16; op=0x81; off16  {  op_sub(op1fix16, off16); }
:SUB op1off16, off16 is op=0xA5; op1off16; op=0x81; off16  {  op_sub(op1off16, off16); }
:SUB op1sfr16, off16 is op=0xA6; op1sfr16; op=0x81; off16  {  op_sub(op1sfr16, off16); }
:SUB op1n16w, off16 is op=0xA7; op1n16w; op=0x81; off16  {  op_sub(op1n16w, off16); }
:SUB X1immw, off16 is op=0xA8; X1immw; op=0x81; off16  {  op_sub(X1immw, off16); }
:SUB X2immw, off16 is op=0xA9; X2immw; op=0x81; off16  {  op_sub(X2immw, off16); }
:SUB X1plusAw, off16 is op=0xAA & X1plusAw; op=0x81; off16  {  op_sub(X1plusAw, off16); }
:SUB X1plusR0w, off16 is op=0xAB & X1plusR0w; op=0x81; off16  {  op_sub(X1plusR0w, off16); }
:SUB n7w, off16 is op=0x8B; n7w; op=0x81; off16  {  op_sub(n7w, off16); }
:SUB reg16, sfr16 is regop0=0xc & reg16; op=0x82; sfr16  {  op_sub(reg16, sfr16); }
:SUB X1indw, sfr16 is op=0xA0 & X1indw; op=0x82; sfr16  {  op_sub(X1indw, sfr16); }
:SUB DPinddecw, sfr16 is op=0xA1 & DPinddecw; op=0x82; sfr16  {  op_sub(DPinddecw, sfr16); }
:SUB DPindw, sfr16 is op=0xA2 & DPindw; op=0x82; sfr16  {  op_sub(DPindw, sfr16); }
:SUB DPindincw, sfr16 is op=0xA3 & DPindincw; op=0x82; sfr16  {  op_sub(DPindincw, sfr16); }
:SUB op1fix16, sfr16 is op=0xA4; op1fix16; op=0x82; sfr16  {  op_sub(op1fix16, sfr16); }
:SUB op1off16, sfr16 is op=0xA5; op1off16; op=0x82; sfr16  {  op_sub(op1off16, sfr16); }
:SUB op1sfr16, sfr16 is op=0xA6; op1sfr16; op=0x82; sfr16  {  op_sub(op1sfr16, sfr16); }
:SUB op1n16w, sfr16 is op=0xA7; op1n16w; op=0x82; sfr16  {  op_sub(op1n16w, sfr16); }
:SUB X1immw, sfr16 is op=0xA8; X1immw; op=0x82; sfr16  {  op_sub(X1immw, sfr16); }
:SUB X2immw, sfr16 is op=0xA9; X2immw; op=0x82; sfr16  {  op_sub(X2immw, sfr16); }
:SUB X1plusAw, sfr16 is op=0xAA & X1plusAw; op=0x82; sfr16  {  op_sub(X1plusAw, sfr16); }
:SUB X1plusR0w, sfr16 is op=0xAB & X1plusR0w; op=0x82; sfr16  {  op_sub(X1plusR0w, sfr16); }
:SUB n7w, sfr16 is op=0x8B; n7w; op=0x82; sfr16  {  op_sub(n7w, sfr16); }
:SUB reg16, #n16 is regop0=0xc & reg16; op=0x83; n16  {  op_sub(reg16, n16:2); }
:SUB X1indw, #n16 is op=0xA0 & X1indw; op=0x83; n16  {  op_sub(X1indw, n16:2); }
:SUB DPinddecw, #n16 is op=0xA1 & DPinddecw; op=0x83; n16  {  op_sub(DPinddecw, n16:2); }
:SUB DPindw, #n16 is op=0xA2 & DPindw; op=0x83; n16  {  op_sub(DPindw, n16:2); }
:SUB DPindincw, #n16 is op=0xA3 & DPindincw; op=0x83; n16  {  op_sub(DPindincw, n16:2); }
:SUB op1fix16, #n16 is op=0xA4; op1fix16; op=0x83; n16  {  op_sub(op1fix16, n16:2); }
:SUB op1off16, #n16 is op=0xA5; op1off16; op=0x83; n16  {  op_sub(op1off16, n16:2); }
:SUB op1sfr16, #n16 is op=0xA6; op1sfr16; op=0x83; n16  {  op_sub(op1sfr16, n16:2); }
:SUB op1n16w, #n16 is op=0xA7; op1n16w; op=0x83; n16  {  op_sub(op1n16w, n16:2); }
:SUB X1immw, #n16 is op=0xA8; X1immw; op=0x83; n16  {  op_sub(X1immw, n16:2); }
:SUB X2immw, #n16 is op=0xA9; X2immw; op=0x83; n16  {  op_sub(X2immw, n16:2); }
:SUB X1plusAw, #n16 is op=0xAA & X1plusAw; op=0x83; n16  {  op_sub(X1plusAw, n16:2); }
:SUB X1plusR0w, #n16 is op=0xAB & X1plusR0w; op=0x83; n16  {  op_sub(X1plusR0w, n16:2); }
:SUB n7w, #n16 is op=0x8B; n7w; op=0x83; n16  {  op_sub(n7w, n16:2); }
:SUB reg16, A16 is regop0=0xc & reg16; op=0x84 & A16  {  op_sub(reg16, A16); }
:SUB X1indw, A16 is op=0xA0 & X1indw; op=0x84 & A16  {  op_sub(X1indw, A16); }
:SUB DPinddecw, A16 is op=0xA1 & DPinddecw; op=0x84 & A16  {  op_sub(DPinddecw, A16); }
:SUB DPindw, A16 is op=0xA2 & DPindw; op=0x84 & A16  {  op_sub(DPindw, A16); }
:SUB DPindincw, A16 is op=0xA3 & DPindincw; op=0x84 & A16  {  op_sub(DPindincw, A16); }
:SUB op1fix16, A16 is op=0xA4; op1fix16; op=0x84 & A16  {  op_sub(op1fix16, A16); }
:SUB op1off16, A16 is op=0xA5; op1off16; op=0x84 & A16  {  op_sub(op1off16, A16); }
:SUB op1sfr16, A16 is op=0xA6; op1sfr16; op=0x84 & A16  {  op_sub(op1sfr16, A16); }
:SUB op1n16w, A16 is op=0xA7; op1n16w; op=0x84 & A16  {  op_sub(op1n16w, A16); }
:SUB X1immw, A16 is op=0xA8; X1immw; op=0x84 & A16  {  op_sub(X1immw, A16); }
:SUB X2immw, A16 is op=0xA9; X2immw; op=0x84 & A16  {  op_sub(X2immw, A16); }
:SUB X1plusAw, A16 is op=0xAA & X1plusAw; op=0x84 & A16  {  op_sub(X1plusAw, A16); }
:SUB X1plusR0w, A16 is op=0xAB & X1plusR0w; op=0x84 & A16  {  op_sub(X1plusR0w, A16); }
:SUB n7w, A16 is op=0x8B; n7w; op=0x84 & A16  {  op_sub(n7w, A16); }
:SUBB A8, Rn is dd=0 & regop0=1 & Rn & A8  {  op_subb(A8, Rn); }
:SUBB A8, #n8 is dd=0 & op=0x8E; n8 & A8  {  op_subb(A8, n8:1); }
:SUBB A8, fix8 is dd=0 & op=0x8C; fix8 & A8  {  op_subb(A8, fix8); }
:SUBB A8, off8 is dd=0 & op=0x8D; off8 & A8  {  op_subb(A8, off8); }
:SUBB A8, reg8 is regop0=0xd & reg8; op=0x85 & A8  {  op_subb(A8, reg8); }
:SUBB A8, X1indb is op=0xB0 & X1indb; op=0x85 & A8  {  op_subb(A8, X1indb); }
:SUBB A8, DPinddecb is op=0xB1 & DPinddecb; op=0x85 & A8  {  op_subb(A8, DPinddecb); }
:SUBB A8, DPindb is op=0xB2 & DPindb; op=0x85 & A8  {  op_subb(A8, DPindb); }
:SUBB A8, DPindincb is op=0xB3 & DPindincb; op=0x85 & A8  {  op_subb(A8, DPindincb); }
:SUBB A8, op1fix8 is op=0xB4; op1fix8; op=0x85 & A8  {  op_subb(A8, op1fix8); }
:SUBB A8, op1off8 is op=0xB5; op1off8; op=0x85 & A8  {  op_subb(A8, op1off8); }
:SUBB A8, op1sfr8 is op=0xB6; op1sfr8; op=0x85 & A8  {  op_subb(A8, op1sfr8); }
:SUBB A8, op1n16b is op=0xB7; op1n16b; op=0x85 & A8  {  op_subb(A8, op1n16b); }
:SUBB A8, X1immb is op=0xB8; X1immb; op=0x85 & A8  {  op_subb(A8, X1immb); }
:SUBB A8, X2immb is op=0xB9; X2immb; op=0x85 & A8  {  op_subb(A8, X2immb); }
:SUBB A8, X1plusAb is op=0xBA & X1plusAb; op=0x85 & A8  {  op_subb(A8, X1plusAb); }
:SUBB A8, X1plusR0b is op=0xBB & X1plusR0b; op=0x85 & A8  {  op_subb(A8, X1plusR0b); }
:SUBB A8, PSWL is op=0x8A & PSWL; op=0x85 & A8  {  op_subb(A8, PSWL); }
:SUBB A8, PSWH is op=0x9A & PSWH; op=0x85 & A8  {  op_subb(A8, PSWH); }
:SUBB A8, n7b is op=0x9B; n7b; op=0x85 & A8  {  op_subb(A8, n7b); }
:SUBB reg8, fix8 is regop0=0xd & reg8; op=0x80; fix8  {  op_subb(reg8, fix8); }
:SUBB X1indb, fix8 is op=0xB0 & X1indb; op=0x80; fix8  {  op_subb(X1indb, fix8); }
:SUBB DPinddecb, fix8 is op=0xB1 & DPinddecb; op=0x80; fix8  {  op_subb(DPinddecb, fix8); }
:SUBB DPindb, fix8 is op=0xB2 & DPindb; op=0x80; fix8  {  op_subb(DPindb, fix8); }
:SUBB DPindincb, fix8 is op=0xB3 & DPindincb; op=0x80; fix8  {  op_subb(DPindincb, fix8); }
:SUBB op1fix8, fix8 is op=0xB4; op1fix8; op=0x80; fix8  {  op_subb(op1fix8, fix8); }
:SUBB op1off8, fix8 is op=0xB5; op1off8; op=0x80; fix8  {  op_subb(op1off8, fix8); }
:SUBB op1sfr8, fix8 is op=0xB6; op1sfr8; op=0x80; fix8  {  op_subb(op1sfr8, fix8); }
:SUBB op1n16b, fix8 is op=0xB7; op1n16b; op=0x80; fix8  {  op_subb(op1n16b, fix8); }
:SUBB X1immb, fix8 is op=0xB8; X1immb; op=0x80; fix8  {  op_subb(X1immb, fix8); }
:SUBB X2immb, fix8 is op=0xB9; X2immb; op=0x80; fix8  {  op_subb(X2immb, fix8); }
:SUBB X1plusAb, fix8 is op=0xBA & X1plusAb; op=0x80; fix8  {  op_subb(X1plusAb, fix8); }
:SUBB X1plusR0b, fix8 is op=0xBB & X1plusR0b; op=0x80; fix8  {  op_subb(X1plusR0b, fix8); }
:SUBB PSWL, fix8 is op=0x8A & PSWL; op=0x80; fix8  {  op_subb(PSWL, fix8); }
:SUBB PSWH, fix8 is op=0x9A & PSWH; op=0x80; fix8  {  op_subb(PSWH, fix8); }
:SUBB n7b, fix8 is op=0x9B; n7b; op=0x80; fix8  {  op_subb(n7b, fix8); }
:SUBB reg8, off8 is regop0=0xd & reg8; op=0x81; off8  {  op_subb(reg8, off8); }
:SUBB X1indb, off8 is op=0xB0 & X1indb; op=0x81; off8  {  op_subb(X1indb, off8); }
:SUBB DPinddecb, off8 is op=0xB1 & DPinddecb; op=0x81; off8  {  op_subb(DPinddecb, off8); }
:SUBB DPindb, off8 is op=0xB2 & DPindb; op=0x81; off8  {  op_subb(DPindb, off8); }
:SUBB DPindincb, off8 is op=0xB3 & DPindincb; op=0x81; off8  {  op_subb(DPindincb, off8); }
:SUBB op1fix8, off8 is op=0xB4; op1fix8; op=0x81; off8  {  op_subb(op1fix8, off8); }
:SUBB op1off8, off8 is op=0xB5; op1off8; op=0x81; off8  {  op_subb(op1off8, off8); }
:SUBB op1sfr8, off8 is op=0xB6; op1sfr8; op=0x81; off8  {  op_subb(op1sfr8, off8); }
:SUBB op1n16b, off8 is op=0xB7; op1n16b; op=0x81; off8  {  op_subb(op1n16b, off8); }
:SUBB X1immb, off8 is op=0xB8; X1immb; op=0x81; off8  {  op_subb(X1immb, off8); }
:SUBB X2immb, off8 is op=0xB9; X2immb; op=0x81; off8  {  op_subb(X2immb, off8); }
:SUBB X1plusAb, off8 is op=0xBA & X1plusAb; op=0x81; off8  {  op_subb(X1plusAb, off8); }
:SUBB X1plusR0b, off8 is op=0xBB & X1plusR0b; op=0x81; off8  {  op_subb(X1plusR0b, off8); }
:SUBB PSWL, off8 is op=0x8A & PSWL; op=0x81; off8  {  op_subb(PSWL, off8); }
:SUBB PSWH, off8 is op=0x9A & PSWH; op=0x81; off8  {  op_subb(PSWH, off8); }
:SUBB n7b, off8 is op=0x9B; n7b; op=0x81; off8  {  op_subb(n7b, off8); }
:SUBB reg8, sfr8 is regop0=0xd & reg8; op=0x82; sfr8  {  op_subb(reg8, sfr8); }
:SUBB X1indb, sfr8 is op=0xB0 & X1indb; op=0x82; sfr8  {  op_subb(X1indb, sfr8); }
:SUBB DPinddecb, sfr8 is op=0xB1 & DPinddecb; op=0x82; sfr8  {  op_subb(DPinddecb, sfr8); }
:SUBB DPindb, sfr8 is op=0xB2 & DPindb; op=0x82; sfr8  {  op_subb(DPindb, sfr8); }
:SUBB DPindincb, sfr8 is op=0xB3 & DPindincb; op=0x82; sfr8  {  op_subb(DPindincb, sfr8); }
:SUBB op1fix8, sfr8 is op=0xB4; op1fix8; op=0x82; sfr8  {  op_subb(op1fix8, sfr8); }
:SUBB op1off8, sfr8 is op=0xB5; op1off8; op=0x82; sfr8  {  op_subb(op1off8, sfr8); }
:SUBB op1sfr8, sfr8 is op=0xB6; op1sfr8; op=0x82; sfr8  {  op_subb(op1sfr8, sfr8); }
:SUBB op1n16b, sfr8 is op=0xB7; op1n16b; op=0x82; sfr8  {  op_subb(op1n16b, sfr8); }
:SUBB X1immb, sfr8 is op=0xB8; X1immb; op=0x82; sfr8  {  op_subb(X1immb, sfr8); }
:SUBB X2immb, sfr8 is op=0xB9; X2immb; op=0x82; sfr8  {  op_subb(X2immb, sfr8); }
:SUBB X1plusAb, sfr8 is op=0xBA & X1plusAb; op=0x82; sfr8  {  op_subb(X1plusAb, sfr8); }
:SUBB X1plusR0b, sfr8 is op=0xBB & X1plusR0b; op=0x82; sfr8  {  op_subb(X1plusR0b, sfr8); }
:SUBB PSWL, sfr8 is op=0x8A & PSWL; op=0x82; sfr8  {  op_subb(PSWL, sfr8); }
:SUBB PSWH, sfr8 is op=0x9A & PSWH; op=0x82; sfr8  {  op_subb(PSWH, sfr8); }
:SUBB n7b, sfr8 is op=0x9B; n7b; op=0x82; sfr8  {  op_subb(n7b, sfr8); }
:SUBB reg8, #n8 is regop0=0xd & reg8; op=0x83; n8  {  op_subb(reg8, n8:1); }
:SUBB X1indb, #n8 is op=0xB0 & X1indb; op=0x83; n8  {  op_subb(X1indb, n8:1); }
:SUBB DPinddecb, #n8 is op=0xB1 & DPinddecb; op=0x83; n8  {  op_subb(DPinddecb, n8:1); }
:SUBB DPindb, #n8 is op=0xB2 & DPindb; op=0x83; n8  {  op_subb(DPindb, n8:1); }
:SUBB DPindincb, #n8 is op=0xB3 & DPindincb; op=0x83; n8  {  op_subb(DPindincb, n8:1); }
:SUBB op1fix8, #n8 is op=0xB4; op1fix8; op=0x83; n8  {  op_subb(op1fix8, n8:1); }
:SUBB op1off8, #n8 is op=0xB5; op1off8; op=0x83; n8  {  op_subb(op1off8, n8:1); }
:SUBB op1sfr8, #n8 is op=0xB6; op1sfr8; op=0x83; n8  {  op_subb(op1sfr8, n8:1); }
:SUBB op1n16b, #n8 is op=0xB7; op1n16b; op=0x83; n8  {  op_subb(op1n16b, n8:1); }
:SUBB X1immb, #n8 is op=0xB8; X1immb; op=0x83; n8  {  op_subb(X1immb, n8:1); }
:SUBB X2immb, #n8 is op=0xB9; X2immb; op=0x83; n8  {  op_subb(X2immb, n8:1); }
:SUBB X1plusAb, #n8 is op=0xBA & X1plusAb; op=0x83; n8  {  op_subb(X1plusAb, n8:1); }
:SUBB X1plusR0b, #n8 is op=0xBB & X1plusR0b; op=0x83; n8  {  op_subb(X1plusR0b, n8:1); }
:SUBB PSWL, #n8 is op=0x8A & PSWL; op=0x83; n8  {  op_subb(PSWL, n8:1); }
:SUBB PSWH, #n8 is op=0x9A & PSWH; op=0x83; n8  {  op_subb(PSWH, n8:1); }
:SUBB n7b, #n8 is op=0x9B; n7b; op=0x83; n8  {  op_subb(n7b, n8:1); }
:SUBB reg8, A8 is regop0=0xd & reg8; op=0x84 & A8  {  op_subb(reg8, A8); }
:SUBB X1indb, A8 is op=0xB0 & X1indb; op=0x84 & A8  {  op_subb(X1indb, A8); }
:SUBB DPinddecb, A8 is op=0xB1 & DPinddecb; op=0x84 & A8  {  op_subb(DPinddecb, A8); }
:SUBB DPindb, A8 is op=0xB2 & DPindb; op=0x84 & A8  {  op_subb(DPindb, A8); }
:SUBB DPindincb, A8 is op=0xB3 & DPindincb; op=0x84 & A8  {  op_subb(DPindincb, A8); }
:SUBB op1fix8, A8 is op=0xB4; op1fix8; op=0x84 & A8  {  op_subb(op1fix8, A8); }
:SUBB op1off8, A8 is op=0xB5; op1off8; op=0x84 & A8  {  op_subb(op1off8, A8); }
:SUBB op1sfr8, A8 is op=0xB6; op1sfr8; op=0x84 & A8  {  op_subb(op1sfr8, A8); }
:SUBB op1n16b, A8 is op=0xB7; op1n16b; op=0x84 & A8  {  op_subb(op1n16b, A8); }
:SUBB X1immb, A8 is op=0xB8; X1immb; op=0x84 & A8  {  op_subb(X1immb, A8); }
:SUBB X2immb, A8 is op=0xB9; X2immb; op=0x84 & A8  {  op_subb(X2immb, A8); }
:SUBB X1plusAb, A8 is op=0xBA & X1plusAb; op=0x84 & A8  {  op_subb(X1plusAb, A8); }
:SUBB X1plusR0b, A8 is op=0xBB & X1plusR0b; op=0x84 & A8  {  op_subb(X1plusR0b, A8); }
:SUBB PSWL, A8 is op=0x8A & PSWL; op=0x84 & A8  {  op_subb(PSWL, A8); }
:SUBB PSWH, A8 is op=0x9A & PSWH; op=0x84 & A8  {  op_subb(PSWH, A8); }
:SUBB n7b, A8 is op=0x9B; n7b; op=0x84 & A8  {  op_subb(n7b, A8); }
:SWAP  is op=0xDF  {  op_swap(); }
:TBR reg8^"."^(AL) is regop0=0xd & reg8; op=0xCA & AL  {  op_tbr(reg8,(AL)); }
:TBR X1indb^"."^(AL) is op=0xB0 & X1indb; op=0xCA & AL  {  op_tbr(X1indb,(AL)); }
:TBR DPinddecb^"."^(AL) is op=0xB1 & DPinddecb; op=0xCA & AL  {  op_tbr(DPinddecb,(AL)); }
:TBR DPindb^"."^(AL) is op=0xB2 & DPindb; op=0xCA & AL  {  op_tbr(DPindb,(AL)); }
:TBR DPindincb^"."^(AL) is op=0xB3 & DPindincb; op=0xCA & AL  {  op_tbr(DPindincb,(AL)); }
:TBR op1fix8^"."^(AL) is op=0xB4; op1fix8; op=0xCA & AL  {  op_tbr(op1fix8,(AL)); }
:TBR op1off8^"."^(AL) is op=0xB5; op1off8; op=0xCA & AL  {  op_tbr(op1off8,(AL)); }
:TBR op1sfr8^"."^(AL) is op=0xB6; op1sfr8; op=0xCA & AL  {  op_tbr(op1sfr8,(AL)); }
:TBR op1n16b^"."^(AL) is op=0xB7; op1n16b; op=0xCA & AL  {  op_tbr(op1n16b,(AL)); }
:TBR X1immb^"."^(AL) is op=0xB8; X1immb; op=0xCA & AL  {  op_tbr(X1immb,(AL)); }
:TBR X2immb^"."^(AL) is op=0xB9; X2immb; op=0xCA & AL  {  op_tbr(X2immb,(AL)); }
:TBR X1plusAb^"."^(AL) is op=0xBA & X1plusAb; op=0xCA & AL  {  op_tbr(X1plusAb,(AL)); }
:TBR X1plusR0b^"."^(AL) is op=0xBB & X1plusR0b; op=0xCA & AL  {  op_tbr(X1plusR0b,(AL)); }
:TBR PSWL^"."^(AL) is op=0x8A & PSWL; op=0xCA & AL  {  op_tbr(PSWL,(AL)); }
:TBR PSWH^"."^(AL) is op=0x9A & PSWH; op=0xCA & AL  {  op_tbr(PSWH,(AL)); }
:TBR n7b^"."^(AL) is op=0x9B; n7b; op=0xCA & AL  {  op_tbr(n7b,(AL)); }
:TJNZ A16, rel8 is dd=1 & op=0xBC; op=0xA6; rel8 & A16  {  op_tjnz(A16, rel8); }
:TJNZ reg16, rel8 is regop0=0xc & reg16; op=0xA6; rel8  {  op_tjnz(reg16, rel8); }
:TJNZ X1indw, rel8 is op=0xA0 & X1indw; op=0xA6; rel8  {  op_tjnz(X1indw, rel8); }
:TJNZ DPinddecw, rel8 is op=0xA1 & DPinddecw; op=0xA6; rel8  {  op_tjnz(DPinddecw, rel8); }
:TJNZ DPindw, rel8 is op=0xA2 & DPindw; op=0xA6; rel8  {  op_tjnz(DPindw, rel8); }
:TJNZ DPindincw, rel8 is op=0xA3 & DPindincw; op=0xA6; rel8  {  op_tjnz(DPindincw, rel8); }
:TJNZ op1fix16, rel8 is op=0xA4; op1fix16; op=0xA6; rel8  {  op_tjnz(op1fix16, rel8); }
:TJNZ op1off16, rel8 is op=0xA5; op1off16; op=0xA6; rel8  {  op_tjnz(op1off16, rel8); }
:TJNZ op1sfr16, rel8 is op=0xA6; op1sfr16; op=0xA6; rel8  {  op_tjnz(op1sfr16, rel8); }
:TJNZ op1n16w, rel8 is op=0xA7; op1n16w; op=0xA6; rel8  {  op_tjnz(op1n16w, rel8); }
:TJNZ X1immw, rel8 is op=0xA8; X1immw; op=0xA6; rel8  {  op_tjnz(X1immw, rel8); }
:TJNZ X2immw, rel8 is op=0xA9; X2immw; op=0xA6; rel8  {  op_tjnz(X2immw, rel8); }
:TJNZ X1plusAw, rel8 is op=0xAA & X1plusAw; op=0xA6; rel8  {  op_tjnz(X1plusAw, rel8); }
:TJNZ X1plusR0w, rel8 is op=0xAB & X1plusR0w; op=0xA6; rel8  {  op_tjnz(X1plusR0w, rel8); }
:TJNZ n7w, rel8 is op=0x8B; n7w; op=0xA6; rel8  {  op_tjnz(n7w, rel8); }
:TJNZB A8, rel8 is dd=0 & op=0xBC; op=0xA6; rel8 & A8  {  op_tjnzb(A8, rel8); }
:TJNZB reg8, rel8 is regop0=0xd & reg8; op=0xA6; rel8  {  op_tjnzb(reg8, rel8); }
:TJNZB X1indb, rel8 is op=0xB0 & X1indb; op=0xA6; rel8  {  op_tjnzb(X1indb, rel8); }
:TJNZB DPinddecb, rel8 is op=0xB1 & DPinddecb; op=0xA6; rel8  {  op_tjnzb(DPinddecb, rel8); }
:TJNZB DPindb, rel8 is op=0xB2 & DPindb; op=0xA6; rel8  {  op_tjnzb(DPindb, rel8); }
:TJNZB DPindincb, rel8 is op=0xB3 & DPindincb; op=0xA6; rel8  {  op_tjnzb(DPindincb, rel8); }
:TJNZB op1fix8, rel8 is op=0xB4; op1fix8; op=0xA6; rel8  {  op_tjnzb(op1fix8, rel8); }
:TJNZB op1off8, rel8 is op=0xB5; op1off8; op=0xA6; rel8  {  op_tjnzb(op1off8, rel8); }
:TJNZB op1sfr8, rel8 is op=0xB6; op1sfr8; op=0xA6; rel8  {  op_tjnzb(op1sfr8, rel8); }
:TJNZB op1n16b, rel8 is op=0xB7; op1n16b; op=0xA6; rel8  {  op_tjnzb(op1n16b, rel8); }
:TJNZB X1immb, rel8 is op=0xB8; X1immb; op=0xA6; rel8  {  op_tjnzb(X1immb, rel8); }
:TJNZB X2immb, rel8 is op=0xB9; X2immb; op=0xA6; rel8  {  op_tjnzb(X2immb, rel8); }
:TJNZB X1plusAb, rel8 is op=0xBA & X1plusAb; op=0xA6; rel8  {  op_tjnzb(X1plusAb, rel8); }
:TJNZB X1plusR0b, rel8 is op=0xBB & X1plusR0b; op=0xA6; rel8  {  op_tjnzb(X1plusR0b, rel8); }
:TJNZB PSWL, rel8 is op=0x8A & PSWL; op=0xA6; rel8  {  op_tjnzb(PSWL, rel8); }
:TJNZB PSWH, rel8 is op=0x9A & PSWH; op=0xA6; rel8  {  op_tjnzb(PSWH, rel8); }
:TJNZB n7b, rel8 is op=0x9B; n7b; op=0xA6; rel8  {  op_tjnzb(n7b, rel8); }
:TJZ A16, rel8 is dd=1 & op=0xBC; op=0xA7; rel8 & A16  {  op_tjz(A16, rel8); }
:TJZ reg16, rel8 is regop0=0xc & reg16; op=0xA7; rel8  {  op_tjz(reg16, rel8); }
:TJZ X1indw, rel8 is op=0xA0 & X1indw; op=0xA7; rel8  {  op_tjz(X1indw, rel8); }
:TJZ DPinddecw, rel8 is op=0xA1 & DPinddecw; op=0xA7; rel8  {  op_tjz(DPinddecw, rel8); }
:TJZ DPindw, rel8 is op=0xA2 & DPindw; op=0xA7; rel8  {  op_tjz(DPindw, rel8); }
:TJZ DPindincw, rel8 is op=0xA3 & DPindincw; op=0xA7; rel8  {  op_tjz(DPindincw, rel8); }
:TJZ op1fix16, rel8 is op=0xA4; op1fix16; op=0xA7; rel8  {  op_tjz(op1fix16, rel8); }
:TJZ op1off16, rel8 is op=0xA5; op1off16; op=0xA7; rel8  {  op_tjz(op1off16, rel8); }
:TJZ op1sfr16, rel8 is op=0xA6; op1sfr16; op=0xA7; rel8  {  op_tjz(op1sfr16, rel8); }
:TJZ op1n16w, rel8 is op=0xA7; op1n16w; op=0xA7; rel8  {  op_tjz(op1n16w, rel8); }
:TJZ X1immw, rel8 is op=0xA8; X1immw; op=0xA7; rel8  {  op_tjz(X1immw, rel8); }
:TJZ X2immw, rel8 is op=0xA9; X2immw; op=0xA7; rel8  {  op_tjz(X2immw, rel8); }
:TJZ X1plusAw, rel8 is op=0xAA & X1plusAw; op=0xA7; rel8  {  op_tjz(X1plusAw, rel8); }
:TJZ X1plusR0w, rel8 is op=0xAB & X1plusR0w; op=0xA7; rel8  {  op_tjz(X1plusR0w, rel8); }
:TJZ n7w, rel8 is op=0x8B; n7w; op=0xA7; rel8  {  op_tjz(n7w, rel8); }
:TJZB A8, rel8 is dd=0 & op=0xBC; op=0xA7; rel8 & A8  {  op_tjzb(A8, rel8); }
:TJZB reg8, rel8 is regop0=0xd & reg8; op=0xA7; rel8  {  op_tjzb(reg8, rel8); }
:TJZB X1indb, rel8 is op=0xB0 & X1indb; op=0xA7; rel8  {  op_tjzb(X1indb, rel8); }
:TJZB DPinddecb, rel8 is op=0xB1 & DPinddecb; op=0xA7; rel8  {  op_tjzb(DPinddecb, rel8); }
:TJZB DPindb, rel8 is op=0xB2 & DPindb; op=0xA7; rel8  {  op_tjzb(DPindb, rel8); }
:TJZB DPindincb, rel8 is op=0xB3 & DPindincb; op=0xA7; rel8  {  op_tjzb(DPindincb, rel8); }
:TJZB op1fix8, rel8 is op=0xB4; op1fix8; op=0xA7; rel8  {  op_tjzb(op1fix8, rel8); }
:TJZB op1off8, rel8 is op=0xB5; op1off8; op=0xA7; rel8  {  op_tjzb(op1off8, rel8); }
:TJZB op1sfr8, rel8 is op=0xB6; op1sfr8; op=0xA7; rel8  {  op_tjzb(op1sfr8, rel8); }
:TJZB op1n16b, rel8 is op=0xB7; op1n16b; op=0xA7; rel8  {  op_tjzb(op1n16b, rel8); }
:TJZB X1immb, rel8 is op=0xB8; X1immb; op=0xA7; rel8  {  op_tjzb(X1immb, rel8); }
:TJZB X2immb, rel8 is op=0xB9; X2immb; op=0xA7; rel8  {  op_tjzb(X2immb, rel8); }
:TJZB X1plusAb, rel8 is op=0xBA & X1plusAb; op=0xA7; rel8  {  op_tjzb(X1plusAb, rel8); }
:TJZB X1plusR0b, rel8 is op=0xBB & X1plusR0b; op=0xA7; rel8  {  op_tjzb(X1plusR0b, rel8); }
:TJZB PSWL, rel8 is op=0x8A & PSWL; op=0xA7; rel8  {  op_tjzb(PSWL, rel8); }
:TJZB PSWH, rel8 is op=0x9A & PSWH; op=0xA7; rel8  {  op_tjzb(PSWH, rel8); }
:TJZB n7b, rel8 is op=0x9B; n7b; op=0xA7; rel8  {  op_tjzb(n7b, rel8); }
:VCAL Vadr is op4=14 & Vadr  {  op_vcal(Vadr); }
:XCHG A16, reg16 is regop0=0xc & reg16; op=0xC8 & A16  {  op_xchg(A16, reg16); }
:XCHG A16, X1indw is op=0xA0 & X1indw; op=0xC8 & A16  {  op_xchg(A16, X1indw); }
:XCHG A16, DPinddecw is op=0xA1 & DPinddecw; op=0xC8 & A16  {  op_xchg(A16, DPinddecw); }
:XCHG A16, DPindw is op=0xA2 & DPindw; op=0xC8 & A16  {  op_xchg(A16, DPindw); }
:XCHG A16, DPindincw is op=0xA3 & DPindincw; op=0xC8 & A16  {  op_xchg(A16, DPindincw); }
:XCHG A16, op1fix16 is op=0xA4; op1fix16; op=0xC8 & A16  {  op_xchg(A16, op1fix16); }
:XCHG A16, op1off16 is op=0xA5; op1off16; op=0xC8 & A16  {  op_xchg(A16, op1off16); }
:XCHG A16, op1sfr16 is op=0xA6; op1sfr16; op=0xC8 & A16  {  op_xchg(A16, op1sfr16); }
:XCHG A16, op1n16w is op=0xA7; op1n16w; op=0xC8 & A16  {  op_xchg(A16, op1n16w); }
:XCHG A16, X1immw is op=0xA8; X1immw; op=0xC8 & A16  {  op_xchg(A16, X1immw); }
:XCHG A16, X2immw is op=0xA9; X2immw; op=0xC8 & A16  {  op_xchg(A16, X2immw); }
:XCHG A16, X1plusAw is op=0xAA & X1plusAw; op=0xC8 & A16  {  op_xchg(A16, X1plusAw); }
:XCHG A16, X1plusR0w is op=0xAB & X1plusR0w; op=0xC8 & A16  {  op_xchg(A16, X1plusR0w); }
:XCHG A16, n7w is op=0x8B; n7w; op=0xC8 & A16  {  op_xchg(A16, n7w); }
:XCHGB A8, reg8 is regop0=0xd & reg8; op=0xC8 & A8  {  op_xchgb(A8, reg8); }
:XCHGB A8, X1indb is op=0xB0 & X1indb; op=0xC8 & A8  {  op_xchgb(A8, X1indb); }
:XCHGB A8, DPinddecb is op=0xB1 & DPinddecb; op=0xC8 & A8  {  op_xchgb(A8, DPinddecb); }
:XCHGB A8, DPindb is op=0xB2 & DPindb; op=0xC8 & A8  {  op_xchgb(A8, DPindb); }
:XCHGB A8, DPindincb is op=0xB3 & DPindincb; op=0xC8 & A8  {  op_xchgb(A8, DPindincb); }
:XCHGB A8, op1fix8 is op=0xB4; op1fix8; op=0xC8 & A8  {  op_xchgb(A8, op1fix8); }
:XCHGB A8, op1off8 is op=0xB5; op1off8; op=0xC8 & A8  {  op_xchgb(A8, op1off8); }
:XCHGB A8, op1sfr8 is op=0xB6; op1sfr8; op=0xC8 & A8  {  op_xchgb(A8, op1sfr8); }
:XCHGB A8, op1n16b is op=0xB7; op1n16b; op=0xC8 & A8  {  op_xchgb(A8, op1n16b); }
:XCHGB A8, X1immb is op=0xB8; X1immb; op=0xC8 & A8  {  op_xchgb(A8, X1immb); }
:XCHGB A8, X2immb is op=0xB9; X2immb; op=0xC8 & A8  {  op_xchgb(A8, X2immb); }
:XCHGB A8, X1plusAb is op=0xBA & X1plusAb; op=0xC8 & A8  {  op_xchgb(A8, X1plusAb); }
:XCHGB A8, X1plusR0b is op=0xBB & X1plusR0b; op=0xC8 & A8  {  op_xchgb(A8, X1plusR0b); }
:XCHGB A8, PSWL is op=0x8A & PSWL; op=0xC8 & A8  {  op_xchgb(A8, PSWL); }
:XCHGB A8, PSWH is op=0x9A & PSWH; op=0xC8 & A8  {  op_xchgb(A8, PSWH); }
:XCHGB A8, n7b is op=0x9B; n7b; op=0xC8 & A8  {  op_xchgb(A8, n7b); }
:XOR A16, off16 is dd=1 & op=0xDD; off16 & A16  {  op_xor(A16, off16); }
:XOR A16, #n16 is dd=1 & op=0xDE; n16 & A16  {  op_xor(A16, n16:2); }
:XOR A16, reg16 is regop0=0xc & reg16; op=0xD5 & A16  {  op_xor(A16, reg16); }
:XOR A16, X1indw is op=0xA0 & X1indw; op=0xD5 & A16  {  op_xor(A16, X1indw); }
:XOR A16, DPinddecw is op=0xA1 & DPinddecw; op=0xD5 & A16  {  op_xor(A16, DPinddecw); }
:XOR A16, DPindw is op=0xA2 & DPindw; op=0xD5 & A16  {  op_xor(A16, DPindw); }
:XOR A16, DPindincw is op=0xA3 & DPindincw; op=0xD5 & A16  {  op_xor(A16, DPindincw); }
:XOR A16, op1fix16 is op=0xA4; op1fix16; op=0xD5 & A16  {  op_xor(A16, op1fix16); }
:XOR A16, op1off16 is op=0xA5; op1off16; op=0xD5 & A16  {  op_xor(A16, op1off16); }
:XOR A16, op1sfr16 is op=0xA6; op1sfr16; op=0xD5 & A16  {  op_xor(A16, op1sfr16); }
:XOR A16, op1n16w is op=0xA7; op1n16w; op=0xD5 & A16  {  op_xor(A16, op1n16w); }
:XOR A16, X1immw is op=0xA8; X1immw; op=0xD5 & A16  {  op_xor(A16, X1immw); }
:XOR A16, X2immw is op=0xA9; X2immw; op=0xD5 & A16  {  op_xor(A16, X2immw); }
:XOR A16, X1plusAw is op=0xAA & X1plusAw; op=0xD5 & A16  {  op_xor(A16, X1plusAw); }
:XOR A16, X1plusR0w is op=0xAB & X1plusR0w; op=0xD5 & A16  {  op_xor(A16, X1plusR0w); }
:XOR A16, n7w is op=0x8B; n7w; op=0xD5 & A16  {  op_xor(A16, n7w); }
:XOR reg16, fix16 is regop0=0xc & reg16; op=0xD0; fix16  {  op_xor(reg16, fix16); }
:XOR X1indw, fix16 is op=0xA0 & X1indw; op=0xD0; fix16  {  op_xor(X1indw, fix16); }
:XOR DPinddecw, fix16 is op=0xA1 & DPinddecw; op=0xD0; fix16  {  op_xor(DPinddecw, fix16); }
:XOR DPindw, fix16 is op=0xA2 & DPindw; op=0xD0; fix16  {  op_xor(DPindw, fix16); }
:XOR DPindincw, fix16 is op=0xA3 & DPindincw; op=0xD0; fix16  {  op_xor(DPindincw, fix16); }
:XOR op1fix16, fix16 is op=0xA4; op1fix16; op=0xD0; fix16  {  op_xor(op1fix16, fix16); }
:XOR op1off16, fix16 is op=0xA5; op1off16; op=0xD0; fix16  {  op_xor(op1off16, fix16); }
:XOR op1sfr16, fix16 is op=0xA6; op1sfr16; op=0xD0; fix16  {  op_xor(op1sfr16, fix16); }
:XOR op1n16w, fix16 is op=0xA7; op1n16w; op=0xD0; fix16  {  op_xor(op1n16w, fix16); }
:XOR X1immw, fix16 is op=0xA8; X1immw; op=0xD0; fix16  {  op_xor(X1immw, fix16); }
:XOR X2immw, fix16 is op=0xA9; X2immw; op=0xD0; fix16  {  op_xor(X2immw, fix16); }
:XOR X1plusAw, fix16 is op=0xAA & X1plusAw; op=0xD0; fix16  {  op_xor(X1plusAw, fix16); }
:XOR X1plusR0w, fix16 is op=0xAB & X1plusR0w; op=0xD0; fix16  {  op_xor(X1plusR0w, fix16); }
:XOR n7w, fix16 is op=0x8B; n7w; op=0xD0; fix16  {  op_xor(n7w, fix16); }
:XOR reg16, off16 is regop0=0xc & reg16; op=0xD1; off16  {  op_xor(reg16, off16); }
:XOR X1indw, off16 is op=0xA0 & X1indw; op=0xD1; off16  {  op_xor(X1indw, off16); }
:XOR DPinddecw, off16 is op=0xA1 & DPinddecw; op=0xD1; off16  {  op_xor(DPinddecw, off16); }
:XOR DPindw, off16 is op=0xA2 & DPindw; op=0xD1; off16  {  op_xor(DPindw, off16); }
:XOR DPindincw, off16 is op=0xA3 & DPindincw; op=0xD1; off16  {  op_xor(DPindincw, off16); }
:XOR op1fix16, off16 is op=0xA4; op1fix16; op=0xD1; off16  {  op_xor(op1fix16, off16); }
:XOR op1off16, off16 is op=0xA5; op1off16; op=0xD1; off16  {  op_xor(op1off16, off16); }
:XOR op1sfr16, off16 is op=0xA6; op1sfr16; op=0xD1; off16  {  op_xor(op1sfr16, off16); }
:XOR op1n16w, off16 is op=0xA7; op1n16w; op=0xD1; off16  {  op_xor(op1n16w, off16); }
:XOR X1immw, off16 is op=0xA8; X1immw; op=0xD1; off16  {  op_xor(X1immw, off16); }
:XOR X2immw, off16 is op=0xA9; X2immw; op=0xD1; off16  {  op_xor(X2immw, off16); }
:XOR X1plusAw, off16 is op=0xAA & X1plusAw; op=0xD1; off16  {  op_xor(X1plusAw, off16); }
:XOR X1plusR0w, off16 is op=0xAB & X1plusR0w; op=0xD1; off16  {  op_xor(X1plusR0w, off16); }
:XOR n7w, off16 is op=0x8B; n7w; op=0xD1; off16  {  op_xor(n7w, off16); }
:XOR reg16, sfr16 is regop0=0xc & reg16; op=0xD2; sfr16  {  op_xor(reg16, sfr16); }
:XOR X1indw, sfr16 is op=0xA0 & X1indw; op=0xD2; sfr16  {  op_xor(X1indw, sfr16); }
:XOR DPinddecw, sfr16 is op=0xA1 & DPinddecw; op=0xD2; sfr16  {  op_xor(DPinddecw, sfr16); }
:XOR DPindw, sfr16 is op=0xA2 & DPindw; op=0xD2; sfr16  {  op_xor(DPindw, sfr16); }
:XOR DPindincw, sfr16 is op=0xA3 & DPindincw; op=0xD2; sfr16  {  op_xor(DPindincw, sfr16); }
:XOR op1fix16, sfr16 is op=0xA4; op1fix16; op=0xD2; sfr16  {  op_xor(op1fix16, sfr16); }
:XOR op1off16, sfr16 is op=0xA5; op1off16; op=0xD2; sfr16  {  op_xor(op1off16, sfr16); }
:XOR op1sfr16, sfr16 is op=0xA6; op1sfr16; op=0xD2; sfr16  {  op_xor(op1sfr16, sfr16); }
:XOR op1n16w, sfr16 is op=0xA7; op1n16w; op=0xD2; sfr16  {  op_xor(op1n16w, sfr16); }
:XOR X1immw, sfr16 is op=0xA8; X1immw; op=0xD2; sfr16  {  op_xor(X1immw, sfr16); }
:XOR X2immw, sfr16 is op=0xA9; X2immw; op=0xD2; sfr16  {  op_xor(X2immw, sfr16); }
:XOR X1plusAw, sfr16 is op=0xAA & X1plusAw; op=0xD2; sfr16  {  op_xor(X1plusAw, sfr16); }
:XOR X1plusR0w, sfr16 is op=0xAB & X1plusR0w; op=0xD2; sfr16  {  op_xor(X1plusR0w, sfr16); }
:XOR n7w, sfr16 is op=0x8B; n7w; op=0xD2; sfr16  {  op_xor(n7w, sfr16); }
:XOR reg16, #n16 is regop0=0xc & reg16; op=0xD3; n16  {  op_xor(reg16, n16:2); }
:XOR X1indw, #n16 is op=0xA0 & X1indw; op=0xD3; n16  {  op_xor(X1indw, n16:2); }
:XOR DPinddecw, #n16 is op=0xA1 & DPinddecw; op=0xD3; n16  {  op_xor(DPinddecw, n16:2); }
:XOR DPindw, #n16 is op=0xA2 & DPindw; op=0xD3; n16  {  op_xor(DPindw, n16:2); }
:XOR DPindincw, #n16 is op=0xA3 & DPindincw; op=0xD3; n16  {  op_xor(DPindincw, n16:2); }
:XOR op1fix16, #n16 is op=0xA4; op1fix16; op=0xD3; n16  {  op_xor(op1fix16, n16:2); }
:XOR op1off16, #n16 is op=0xA5; op1off16; op=0xD3; n16  {  op_xor(op1off16, n16:2); }
:XOR op1sfr16, #n16 is op=0xA6; op1sfr16; op=0xD3; n16  {  op_xor(op1sfr16, n16:2); }
:XOR op1n16w, #n16 is op=0xA7; op1n16w; op=0xD3; n16  {  op_xor(op1n16w, n16:2); }
:XOR X1immw, #n16 is op=0xA8; X1immw; op=0xD3; n16  {  op_xor(X1immw, n16:2); }
:XOR X2immw, #n16 is op=0xA9; X2immw; op=0xD3; n16  {  op_xor(X2immw, n16:2); }
:XOR X1plusAw, #n16 is op=0xAA & X1plusAw; op=0xD3; n16  {  op_xor(X1plusAw, n16:2); }
:XOR X1plusR0w, #n16 is op=0xAB & X1plusR0w; op=0xD3; n16  {  op_xor(X1plusR0w, n16:2); }
:XOR n7w, #n16 is op=0x8B; n7w; op=0xD3; n16  {  op_xor(n7w, n16:2); }
:XOR reg16, A16 is regop0=0xc & reg16; op=0xD4 & A16  {  op_xor(reg16, A16); }
:XOR X1indw, A16 is op=0xA0 & X1indw; op=0xD4 & A16  {  op_xor(X1indw, A16); }
:XOR DPinddecw, A16 is op=0xA1 & DPinddecw; op=0xD4 & A16  {  op_xor(DPinddecw, A16); }
:XOR DPindw, A16 is op=0xA2 & DPindw; op=0xD4 & A16  {  op_xor(DPindw, A16); }
:XOR DPindincw, A16 is op=0xA3 & DPindincw; op=0xD4 & A16  {  op_xor(DPindincw, A16); }
:XOR op1fix16, A16 is op=0xA4; op1fix16; op=0xD4 & A16  {  op_xor(op1fix16, A16); }
:XOR op1off16, A16 is op=0xA5; op1off16; op=0xD4 & A16  {  op_xor(op1off16, A16); }
:XOR op1sfr16, A16 is op=0xA6; op1sfr16; op=0xD4 & A16  {  op_xor(op1sfr16, A16); }
:XOR op1n16w, A16 is op=0xA7; op1n16w; op=0xD4 & A16  {  op_xor(op1n16w, A16); }
:XOR X1immw, A16 is op=0xA8; X1immw; op=0xD4 & A16  {  op_xor(X1immw, A16); }
:XOR X2immw, A16 is op=0xA9; X2immw; op=0xD4 & A16  {  op_xor(X2immw, A16); }
:XOR X1plusAw, A16 is op=0xAA & X1plusAw; op=0xD4 & A16  {  op_xor(X1plusAw, A16); }
:XOR X1plusR0w, A16 is op=0xAB & X1plusR0w; op=0xD4 & A16  {  op_xor(X1plusR0w, A16); }
:XOR n7w, A16 is op=0x8B; n7w; op=0xD4 & A16  {  op_xor(n7w, A16); }
:XORB A8, off8 is dd=0 & op=0xDD; off8 & A8  {  op_xorb(A8, off8); }
:XORB A8, #n8 is dd=0 & op=0xDE; n8 & A8  {  op_xorb(A8, n8:1); }
:XORB A8, reg8 is regop0=0xd & reg8; op=0xD5 & A8  {  op_xorb(A8, reg8); }
:XORB A8, X1indb is op=0xB0 & X1indb; op=0xD5 & A8  {  op_xorb(A8, X1indb); }
:XORB A8, DPinddecb is op=0xB1 & DPinddecb; op=0xD5 & A8  {  op_xorb(A8, DPinddecb); }
:XORB A8, DPindb is op=0xB2 & DPindb; op=0xD5 & A8  {  op_xorb(A8, DPindb); }
:XORB A8, DPindincb is op=0xB3 & DPindincb; op=0xD5 & A8  {  op_xorb(A8, DPindincb); }
:XORB A8, op1fix8 is op=0xB4; op1fix8; op=0xD5 & A8  {  op_xorb(A8, op1fix8); }
:XORB A8, op1off8 is op=0xB5; op1off8; op=0xD5 & A8  {  op_xorb(A8, op1off8); }
:XORB A8, op1sfr8 is op=0xB6; op1sfr8; op=0xD5 & A8  {  op_xorb(A8, op1sfr8); }
:XORB A8, op1n16b is op=0xB7; op1n16b; op=0xD5 & A8  {  op_xorb(A8, op1n16b); }
:XORB A8, X1immb is op=0xB8; X1immb; op=0xD5 & A8  {  op_xorb(A8, X1immb); }
:XORB A8, X2immb is op=0xB9; X2immb; op=0xD5 & A8  {  op_xorb(A8, X2immb); }
:XORB A8, X1plusAb is op=0xBA & X1plusAb; op=0xD5 & A8  {  op_xorb(A8, X1plusAb); }
:XORB A8, X1plusR0b is op=0xBB & X1plusR0b; op=0xD5 & A8  {  op_xorb(A8, X1plusR0b); }
:XORB A8, PSWL is op=0x8A & PSWL; op=0xD5 & A8  {  op_xorb(A8, PSWL); }
:XORB A8, PSWH is op=0x9A & PSWH; op=0xD5 & A8  {  op_xorb(A8, PSWH); }
:XORB A8, n7b is op=0x9B; n7b; op=0xD5 & A8  {  op_xorb(A8, n7b); }
:XORB reg8, fix8 is regop0=0xd & reg8; op=0xD0; fix8  {  op_xorb(reg8, fix8); }
:XORB X1indb, fix8 is op=0xB0 & X1indb; op=0xD0; fix8  {  op_xorb(X1indb, fix8); }
:XORB DPinddecb, fix8 is op=0xB1 & DPinddecb; op=0xD0; fix8  {  op_xorb(DPinddecb, fix8); }
:XORB DPindb, fix8 is op=0xB2 & DPindb; op=0xD0; fix8  {  op_xorb(DPindb, fix8); }
:XORB DPindincb, fix8 is op=0xB3 & DPindincb; op=0xD0; fix8  {  op_xorb(DPindincb, fix8); }
:XORB op1fix8, fix8 is op=0xB4; op1fix8; op=0xD0; fix8  {  op_xorb(op1fix8, fix8); }
:XORB op1off8, fix8 is op=0xB5; op1off8; op=0xD0; fix8  {  op_xorb(op1off8, fix8); }
:XORB op1sfr8, fix8 is op=0xB6; op1sfr8; op=0xD0; fix8  {  op_xorb(op1sfr8, fix8); }
:XORB op1n16b, fix8 is op=0xB7; op1n16b; op=0xD0; fix8  {  op_xorb(op1n16b, fix8); }
:XORB X1immb, fix8 is op=0xB8; X1immb; op=0xD0; fix8  {  op_xorb(X1immb, fix8); }
:XORB X2immb, fix8 is op=0xB9; X2immb; op=0xD0; fix8  {  op_xorb(X2immb, fix8); }
:XORB X1plusAb, fix8 is op=0xBA & X1plusAb; op=0xD0; fix8  {  op_xorb(X1plusAb, fix8); }
:XORB X1plusR0b, fix8 is op=0xBB & X1plusR0b; op=0xD0; fix8  {  op_xorb(X1plusR0b, fix8); }
:XORB PSWL, fix8 is op=0x8A & PSWL; op=0xD0; fix8  {  op_xorb(PSWL, fix8); }
:XORB PSWH, fix8 is op=0x9A & PSWH; op=0xD0; fix8  {  op_xorb(PSWH, fix8); }
:XORB n7b, fix8 is op=0x9B; n7b; op=0xD0; fix8  {  op_xorb(n7b, fix8); }
:XORB reg8, off8 is regop0=0xd & reg8; op=0xD1; off8  {  op_xorb(reg8, off8); }
:XORB X1indb, off8 is op=0xB0 & X1indb; op=0xD1; off8  {  op_xorb(X1indb, off8); }
:XORB DPinddecb, off8 is op=0xB1 & DPinddecb; op=0xD1; off8  {  op_xorb(DPinddecb, off8); }
:XORB DPindb, off8 is op=0xB2 & DPindb; op=0xD1; off8  {  op_xorb(DPindb, off8); }
:XORB DPindincb, off8 is op=0xB3 & DPindincb; op=0xD1; off8  {  op_xorb(DPindincb, off8); }
:XORB op1fix8, off8 is op=0xB4; op1fix8; op=0xD1; off8  {  op_xorb(op1fix8, off8); }
:XORB op1off8, off8 is op=0xB5; op1off8; op=0xD1; off8  {  op_xorb(op1off8, off8); }
:XORB op1sfr8, off8 is op=0xB6; op1sfr8; op=0xD1; off8  {  op_xorb(op1sfr8, off8); }
:XORB op1n16b, off8 is op=0xB7; op1n16b; op=0xD1; off8  {  op_xorb(op1n16b, off8); }
:XORB X1immb, off8 is op=0xB8; X1immb; op=0xD1; off8  {  op_xorb(X1immb, off8); }
:XORB X2immb, off8 is op=0xB9; X2immb; op=0xD1; off8  {  op_xorb(X2immb, off8); }
:XORB X1plusAb, off8 is op=0xBA & X1plusAb; op=0xD1; off8  {  op_xorb(X1plusAb, off8); }
:XORB X1plusR0b, off8 is op=0xBB & X1plusR0b; op=0xD1; off8  {  op_xorb(X1plusR0b, off8); }
:XORB PSWL, off8 is op=0x8A & PSWL; op=0xD1; off8  {  op_xorb(PSWL, off8); }
:XORB PSWH, off8 is op=0x9A & PSWH; op=0xD1; off8  {  op_xorb(PSWH, off8); }
:XORB n7b, off8 is op=0x9B; n7b; op=0xD1; off8  {  op_xorb(n7b, off8); }
:XORB reg8, sfr8 is regop0=0xd & reg8; op=0xD2; sfr8  {  op_xorb(reg8, sfr8); }
:XORB X1indb, sfr8 is op=0xB0 & X1indb; op=0xD2; sfr8  {  op_xorb(X1indb, sfr8); }
:XORB DPinddecb, sfr8 is op=0xB1 & DPinddecb; op=0xD2; sfr8  {  op_xorb(DPinddecb, sfr8); }
:XORB DPindb, sfr8 is op=0xB2 & DPindb; op=0xD2; sfr8  {  op_xorb(DPindb, sfr8); }
:XORB DPindincb, sfr8 is op=0xB3 & DPindincb; op=0xD2; sfr8  {  op_xorb(DPindincb, sfr8); }
:XORB op1fix8, sfr8 is op=0xB4; op1fix8; op=0xD2; sfr8  {  op_xorb(op1fix8, sfr8); }
:XORB op1off8, sfr8 is op=0xB5; op1off8; op=0xD2; sfr8  {  op_xorb(op1off8, sfr8); }
:XORB op1sfr8, sfr8 is op=0xB6; op1sfr8; op=0xD2; sfr8  {  op_xorb(op1sfr8, sfr8); }
:XORB op1n16b, sfr8 is op=0xB7; op1n16b; op=0xD2; sfr8  {  op_xorb(op1n16b, sfr8); }
:XORB X1immb, sfr8 is op=0xB8; X1immb; op=0xD2; sfr8  {  op_xorb(X1immb, sfr8); }
:XORB X2immb, sfr8 is op=0xB9; X2immb; op=0xD2; sfr8  {  op_xorb(X2immb, sfr8); }
:XORB X1plusAb, sfr8 is op=0xBA & X1plusAb; op=0xD2; sfr8  {  op_xorb(X1plusAb, sfr8); }
:XORB X1plusR0b, sfr8 is op=0xBB & X1plusR0b; op=0xD2; sfr8  {  op_xorb(X1plusR0b, sfr8); }
:XORB PSWL, sfr8 is op=0x8A & PSWL; op=0xD2; sfr8  {  op_xorb(PSWL, sfr8); }
:XORB PSWH, sfr8 is op=0x9A & PSWH; op=0xD2; sfr8  {  op_xorb(PSWH, sfr8); }
:XORB n7b, sfr8 is op=0x9B; n7b; op=0xD2; sfr8  {  op_xorb(n7b, sfr8); }
:XORB reg8, #n8 is regop0=0xd & reg8; op=0xD3; n8  {  op_xorb(reg8, n8:1); }
:XORB X1indb, #n8 is op=0xB0 & X1indb; op=0xD3; n8  {  op_xorb(X1indb, n8:1); }
:XORB DPinddecb, #n8 is op=0xB1 & DPinddecb; op=0xD3; n8  {  op_xorb(DPinddecb, n8:1); }
:XORB DPindb, #n8 is op=0xB2 & DPindb; op=0xD3; n8  {  op_xorb(DPindb, n8:1); }
:XORB DPindincb, #n8 is op=0xB3 & DPindincb; op=0xD3; n8  {  op_xorb(DPindincb, n8:1); }
:XORB op1fix8, #n8 is op=0xB4; op1fix8; op=0xD3; n8  {  op_xorb(op1fix8, n8:1); }
:XORB op1off8, #n8 is op=0xB5; op1off8; op=0xD3; n8  {  op_xorb(op1off8, n8:1); }
:XORB op1sfr8, #n8 is op=0xB6; op1sfr8; op=0xD3; n8  {  op_xorb(op1sfr8, n8:1); }
:XORB op1n16b, #n8 is op=0xB7; op1n16b; op=0xD3; n8  {  op_xorb(op1n16b, n8:1); }
:XORB X1immb, #n8 is op=0xB8; X1immb; op=0xD3; n8  {  op_xorb(X1immb, n8:1); }
:XORB X2immb, #n8 is op=0xB9; X2immb; op=0xD3; n8  {  op_xorb(X2immb, n8:1); }
:XORB X1plusAb, #n8 is op=0xBA & X1plusAb; op=0xD3; n8  {  op_xorb(X1plusAb, n8:1); }
:XORB X1plusR0b, #n8 is op=0xBB & X1plusR0b; op=0xD3; n8  {  op_xorb(X1plusR0b, n8:1); }
:XORB PSWL, #n8 is op=0x8A & PSWL; op=0xD3; n8  {  op_xorb(PSWL, n8:1); }
:XORB PSWH, #n8 is op=0x9A & PSWH; op=0xD3; n8  {  op_xorb(PSWH, n8:1); }
:XORB n7b, #n8 is op=0x9B; n7b; op=0xD3; n8  {  op_xorb(n7b, n8:1); }
:XORB reg8, A8 is regop0=0xd & reg8; op=0xD4 & A8  {  op_xorb(reg8, A8); }
:XORB X1indb, A8 is op=0xB0 & X1indb; op=0xD4 & A8  {  op_xorb(X1indb, A8); }
:XORB DPinddecb, A8 is op=0xB1 & DPinddecb; op=0xD4 & A8  {  op_xorb(DPinddecb, A8); }
:XORB DPindb, A8 is op=0xB2 & DPindb; op=0xD4 & A8  {  op_xorb(DPindb, A8); }
:XORB DPindincb, A8 is op=0xB3 & DPindincb; op=0xD4 & A8  {  op_xorb(DPindincb, A8); }
:XORB op1fix8, A8 is op=0xB4; op1fix8; op=0xD4 & A8  {  op_xorb(op1fix8, A8); }
:XORB op1off8, A8 is op=0xB5; op1off8; op=0xD4 & A8  {  op_xorb(op1off8, A8); }
:XORB op1sfr8, A8 is op=0xB6; op1sfr8; op=0xD4 & A8  {  op_xorb(op1sfr8, A8); }
:XORB op1n16b, A8 is op=0xB7; op1n16b; op=0xD4 & A8  {  op_xorb(op1n16b, A8); }
:XORB X1immb, A8 is op=0xB8; X1immb; op=0xD4 & A8  {  op_xorb(X1immb, A8); }
:XORB X2immb, A8 is op=0xB9; X2immb; op=0xD4 & A8  {  op_xorb(X2immb, A8); }
:XORB X1plusAb, A8 is op=0xBA & X1plusAb; op=0xD4 & A8  {  op_xorb(X1plusAb, A8); }
:XORB X1plusR0b, A8 is op=0xBB & X1plusR0b; op=0xD4 & A8  {  op_xorb(X1plusR0b, A8); }
:XORB PSWL, A8 is op=0x8A & PSWL; op=0xD4 & A8  {  op_xorb(PSWL, A8); }
:XORB PSWH, A8 is op=0x9A & PSWH; op=0xD4 & A8  {  op_xorb(PSWH, A8); }
:XORB n7b, A8 is op=0x9B; n7b; op=0xD4 & A8  {  op_xorb(n7b, A8); }
